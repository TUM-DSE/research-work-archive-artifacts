#![allow(nonstandard_style, unused)]
use crate::arm64::AArch64LifterError;
use crate::arm64::{decode, common};
use crate::integer_to_usize;
use num_bigint::BigInt;
use num_traits::ToPrimitive;
use std::collections::BTreeMap;
pub fn generated_decode_logic(
    reader: &mut decode::BitReader,
) -> Result<common::types::Instruction, AArch64LifterError> {
    let mut instruction: common::types::Instruction;
    if decode::BitReader::match_bits(&reader.extract_slice(24usize, 5usize)?, "x111x") {
        if decode::BitReader::match_bits(&reader.extract_slice(28usize, 4usize)?, "x0x1")
            && decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "1x",
            )
        {
            let M_slice = reader.extract_slice(31usize, 1usize)?;
            let S_slice = reader.extract_slice(29usize, 1usize)?;
            let ptype_slice = reader.extract_slice(22usize, 2usize)?;
            let o1_slice = reader.extract_slice(21usize, 1usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let o0_slice = reader.extract_slice(15usize, 1usize)?;
            let Ra_slice = reader.extract_slice(10usize, 5usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&M_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_mul_add_sub(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_mul_add_sub(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_mul_add_sub(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_mul_add_sub(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_mul_add_sub(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_mul_add_sub(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_mul_add_sub(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_mul_add_sub(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_mul_add_sub(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_mul_add_sub(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_mul_add_sub(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_mul_add_sub(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&S_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&ptype_slice, "10") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "x0x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x1xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxxxxxx11",
            )
        {
            let M_slice = reader.extract_slice(31usize, 1usize)?;
            let S_slice = reader.extract_slice(29usize, 1usize)?;
            let ptype_slice = reader.extract_slice(22usize, 2usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let cond_slice = reader.extract_slice(12usize, 4usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&M_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_move_fp_select(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_move_fp_select(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_move_fp_select(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&S_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&ptype_slice, "10") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "x0x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x1xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxxxxxx10",
            )
        {
            let M_slice = reader.extract_slice(31usize, 1usize)?;
            let S_slice = reader.extract_slice(29usize, 1usize)?;
            let ptype_slice = reader.extract_slice(22usize, 2usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let opcode_slice = reader.extract_slice(12usize, 4usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&M_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "1000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_mul_product(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "0111")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_max_min(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "0110")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_max_min(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "0101")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_max_min(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "0100")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_max_min(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "0011")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_add_sub(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "0010")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_add_sub(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "0001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_div(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "0000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_mul_product(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "1000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_mul_product(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "0111")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_max_min(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "0110")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_max_min(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "0101")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_max_min(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "0100")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_max_min(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "0011")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_add_sub(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "0010")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_add_sub(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "0001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_div(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "0000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_mul_product(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "1000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_mul_product(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "0111")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_max_min(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "0110")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_max_min(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "0101")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_max_min(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "0100")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_max_min(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "0011")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_add_sub(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "0010")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_add_sub(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "0001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_div(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "0000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_mul_product(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&S_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&ptype_slice, "10") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "11xx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "1x1x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "1xx1") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "x0x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x1xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxxxxxx01",
            )
        {
            let M_slice = reader.extract_slice(31usize, 1usize)?;
            let S_slice = reader.extract_slice(29usize, 1usize)?;
            let ptype_slice = reader.extract_slice(22usize, 2usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let cond_slice = reader.extract_slice(12usize, 4usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let op_slice = reader.extract_slice(4usize, 1usize)?;
            let nzcv_slice = reader.extract_slice(0usize, 4usize)?;
            if decode::BitReader::match_bits(&M_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&op_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_compare_cond(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&op_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_compare_cond(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&op_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_compare_cond(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&op_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_compare_cond(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&op_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_compare_cond(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&op_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_compare_cond(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&S_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&ptype_slice, "10") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "x0x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x1xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxxxxx100",
            )
        {
            let M_slice = reader.extract_slice(31usize, 1usize)?;
            let S_slice = reader.extract_slice(29usize, 1usize)?;
            let ptype_slice = reader.extract_slice(22usize, 2usize)?;
            let imm8_slice = reader.extract_slice(13usize, 8usize)?;
            let imm5_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&M_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&imm5_slice, "00000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_move_fp_imm(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&imm5_slice, "00000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_move_fp_imm(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&imm5_slice, "00000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_move_fp_imm(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&S_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&ptype_slice, "10") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&imm5_slice, "1xxxx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&imm5_slice, "x1xxx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&imm5_slice, "xx1xx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&imm5_slice, "xxx1x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&imm5_slice, "xxxx1") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "x0x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x1xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxxxx1000",
            )
        {
            let M_slice = reader.extract_slice(31usize, 1usize)?;
            let S_slice = reader.extract_slice(29usize, 1usize)?;
            let ptype_slice = reader.extract_slice(22usize, 2usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let op_slice = reader.extract_slice(14usize, 2usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let opcode2_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&M_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&op_slice, "00")
                && decode::BitReader::match_bits(&opcode2_slice, "11000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_compare_uncond(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&op_slice, "00")
                && decode::BitReader::match_bits(&opcode2_slice, "10000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_compare_uncond(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&op_slice, "00")
                && decode::BitReader::match_bits(&opcode2_slice, "01000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_compare_uncond(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&op_slice, "00")
                && decode::BitReader::match_bits(&opcode2_slice, "00000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_compare_uncond(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&op_slice, "00")
                && decode::BitReader::match_bits(&opcode2_slice, "11000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_compare_uncond(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&op_slice, "00")
                && decode::BitReader::match_bits(&opcode2_slice, "10000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_compare_uncond(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&op_slice, "00")
                && decode::BitReader::match_bits(&opcode2_slice, "01000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_compare_uncond(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&op_slice, "00")
                && decode::BitReader::match_bits(&opcode2_slice, "00000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_compare_uncond(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&op_slice, "00")
                && decode::BitReader::match_bits(&opcode2_slice, "11000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_compare_uncond(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&op_slice, "00")
                && decode::BitReader::match_bits(&opcode2_slice, "10000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_compare_uncond(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&op_slice, "00")
                && decode::BitReader::match_bits(&opcode2_slice, "01000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_compare_uncond(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&op_slice, "00")
                && decode::BitReader::match_bits(&opcode2_slice, "00000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_compare_uncond(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&S_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&ptype_slice, "10") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op_slice, "1x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op_slice, "x1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode2_slice, "xx1xx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode2_slice, "xxx1x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode2_slice, "xxxx1") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "x0x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x1xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxxx10000",
            )
        {
            let M_slice = reader.extract_slice(31usize, 1usize)?;
            let S_slice = reader.extract_slice(29usize, 1usize)?;
            let ptype_slice = reader.extract_slice(22usize, 2usize)?;
            let opcode_slice = reader.extract_slice(15usize, 6usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&M_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "01xxxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "001111")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "001110")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "001101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "001100")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "001011")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "001010")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "001001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "001000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "00011x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "000101")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "000100")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "000011")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_unary(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "000010")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_unary(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "000001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_unary(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "000000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_unary(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "0xxxxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "011xxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "0101xx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "010011")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint_32_64(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "010010")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint_32_64(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "010001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint_32_64(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "010000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint_32_64(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "001111")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "001110")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "001101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "001100")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "001011")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "001010")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "001001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "001000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "000111")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "000110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_cvt_bf16_scalar(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "000101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "000100")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "000011")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_unary(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "000010")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_unary(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "000001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_unary(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "000000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_unary(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "011xxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "0101xx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "010011")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint_32_64(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "010010")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint_32_64(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "010001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint_32_64(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "010000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint_32_64(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "001111")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "001110")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "001101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "001100")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "001011")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "001010")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "001001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "001000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_round_frint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "000111")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "000110")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "000101")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "000100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "000011")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_unary(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "000010")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_unary(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "000001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_unary(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "000000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_arithmetic_unary(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&S_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "1xxxxx") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "x0x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x1xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxx000000",
            )
        {
            let sf_slice = reader.extract_slice(31usize, 1usize)?;
            let S_slice = reader.extract_slice(29usize, 1usize)?;
            let ptype_slice = reader.extract_slice(22usize, 2usize)?;
            let rmode_slice = reader.extract_slice(19usize, 2usize)?;
            let opcode_slice = reader.extract_slice(16usize, 3usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "10")
                && decode::BitReader::match_bits(&rmode_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "10")
                && decode::BitReader::match_bits(&rmode_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "10")
                && decode::BitReader::match_bits(&rmode_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "10")
                && decode::BitReader::match_bits(&rmode_slice, "x0")
                && decode::BitReader::match_bits(&opcode_slice, "11x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "x1")
                && decode::BitReader::match_bits(&opcode_slice, "11x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "11x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "11x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "11x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "x1")
                && decode::BitReader::match_bits(&opcode_slice, "11x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&S_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "10x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "0xx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&rmode_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "10x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&rmode_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "01x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&rmode_slice, "x1")
                && decode::BitReader::match_bits(&opcode_slice, "10x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&rmode_slice, "x1")
                && decode::BitReader::match_bits(&opcode_slice, "01x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "x0x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x0xx",
            )
        {
            let sf_slice = reader.extract_slice(31usize, 1usize)?;
            let S_slice = reader.extract_slice(29usize, 1usize)?;
            let ptype_slice = reader.extract_slice(22usize, 2usize)?;
            let rmode_slice = reader.extract_slice(19usize, 2usize)?;
            let opcode_slice = reader.extract_slice(16usize, 3usize)?;
            let scale_slice = reader.extract_slice(10usize, 6usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "11")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "01")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&ptype_slice, "00")
                && decode::BitReader::match_bits(&rmode_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_float_convert_fix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&scale_slice, "0xxxxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&S_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&ptype_slice, "10") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&rmode_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "01x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&rmode_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "00x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&rmode_slice, "x1")
                && decode::BitReader::match_bits(&opcode_slice, "01x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&rmode_slice, "x0")
                && decode::BitReader::match_bits(&opcode_slice, "00x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "1xx") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "1xx0",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "1100",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "01")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "1000",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "0001000xx",
            )
        {
            let opcode_slice = reader.extract_slice(10usize, 2usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&opcode_slice, "1x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "01") {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sm4_sm4enc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opcode_slice, "00") {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sha512_sha512su0(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "1100",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "01")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "00xx",
            )
        {
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let imm6_slice = reader.extract_slice(10usize, 6usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sha3_xar(
                reader,
            ) {
                Ok(instr) => instruction = instr,
                Err(AArch64LifterError::UndefinedInstruction) => {
                    instruction = common::types::Instruction::UNDEF;
                }
                Err(e) => return Err(e),
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "1100",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "00")
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxx0xxxxx",
            )
        {
            let Op0_slice = reader.extract_slice(21usize, 2usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let Ra_slice = reader.extract_slice(10usize, 5usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&Op0_slice, "11") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&Op0_slice, "10") {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sm3_sm3ss1(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&Op0_slice, "01") {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sha3_bcax(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&Op0_slice, "00") {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sha3_eor3(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "1100",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "00")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "11xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxx1x00xx",
            )
        {
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let O_slice = reader.extract_slice(14usize, 1usize)?;
            let opcode_slice = reader.extract_slice(10usize, 2usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&O_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&O_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sm4_sm4enckey(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&O_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sm3_sm3partw2(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&O_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sm3_sm3partw1(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&O_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sha3_rax1(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&O_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sha512_sha512su1(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&O_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sha512_sha512h2(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&O_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sha512_sha512h(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "1100",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "00")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "10xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxx10xxxx",
            )
        {
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let imm2_slice = reader.extract_slice(12usize, 2usize)?;
            let opcode_slice = reader.extract_slice(10usize, 2usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&opcode_slice, "11") {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sm3_sm3tt2b(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opcode_slice, "10") {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sm3_sm3tt2a(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opcode_slice, "01") {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sm3_sm3tt1b(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opcode_slice, "00") {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sm3_sm3tt1a(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0xx0",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxxxxxxx0",
            )
        {
            let Q_slice = reader.extract_slice(30usize, 1usize)?;
            let U_slice = reader.extract_slice(29usize, 1usize)?;
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let L_slice = reader.extract_slice(21usize, 1usize)?;
            let M_slice = reader.extract_slice(20usize, 1usize)?;
            let Rm_slice = reader.extract_slice(16usize, 4usize)?;
            let opcode_slice = reader.extract_slice(12usize, 4usize)?;
            let H_slice = reader.extract_slice(11usize, 1usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "1100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "1000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "0111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "0101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "0011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "0001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "1100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_mul_norounding_i_upper(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "1000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_mul_norounding_i_upper(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "0xx1")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_complex(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "1001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_fp_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "0xx1")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_complex(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "1001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_fp16_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "0111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "0101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "0011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "0001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "1100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "1000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_high_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_dotp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_high_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_long(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_long(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_long(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "1111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_bf16_long(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "0100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "0000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "1111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mat_mul_int_dotp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "0100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_mul_norounding_i_lower(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "0000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_mul_norounding_i_lower(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "1001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_fp_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "0101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_fp_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "0001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_fp_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "1111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_bfdot(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "0101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "0001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "1111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mat_mul_int_dotp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "1001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_fp16_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "0101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_fp16_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "0001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_fp16_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "0100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "0000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_dotp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_high_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_high_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_double_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_long(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_double_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_long(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_double_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_long(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "1001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0xx0",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "11")
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxxxxxxx1",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0xx0",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "10")
            && !decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "0000",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxxxxxxx1",
            )
        {
            let Q_slice = reader.extract_slice(30usize, 1usize)?;
            let U_slice = reader.extract_slice(29usize, 1usize)?;
            let immh_slice = reader.extract_slice(19usize, 4usize)?;
            let immb_slice = reader.extract_slice(16usize, 3usize)?;
            let opcode_slice = reader.extract_slice(11usize, 5usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_conv_float_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_conv_int_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_left_long(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_narrow_uniform_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_narrow_uniform_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_narrow_nonuniform_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_narrow_nonuniform_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_left_sat_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_left_sat_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_left_insert_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_insert_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_conv_float_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_conv_int_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_left_long(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_narrow_uniform_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_narrow_uniform_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_narrow_logical(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_narrow_logical(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_left_sat_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_left_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opcode_slice, "11110") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "11101") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "110xx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "1011x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "10101") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "01111") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "01101") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "01011") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "01001") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "00111") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "00101") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "00011") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "00001") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0xx0",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "10")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "0000",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxxxxxxx1",
            )
        {
            let Q_slice = reader.extract_slice(30usize, 1usize)?;
            let op_slice = reader.extract_slice(29usize, 1usize)?;
            let a_slice = reader.extract_slice(18usize, 1usize)?;
            let b_slice = reader.extract_slice(17usize, 1usize)?;
            let c_slice = reader.extract_slice(16usize, 1usize)?;
            let cmode_slice = reader.extract_slice(12usize, 4usize)?;
            let o2_slice = reader.extract_slice(11usize, 1usize)?;
            let d_slice = reader.extract_slice(9usize, 1usize)?;
            let e_slice = reader.extract_slice(8usize, 1usize)?;
            let f_slice = reader.extract_slice(7usize, 1usize)?;
            let g_slice = reader.extract_slice(6usize, 1usize)?;
            let h_slice = reader.extract_slice(5usize, 1usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&Q_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&cmode_slice, "1111")
                && decode::BitReader::match_bits(&o2_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_logical(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&Q_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&cmode_slice, "1110")
                && decode::BitReader::match_bits(&o2_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_logical(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&Q_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&cmode_slice, "1111")
                && decode::BitReader::match_bits(&o2_slice, "0")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&Q_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&cmode_slice, "1110")
                && decode::BitReader::match_bits(&o2_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_logical(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&cmode_slice, "110x")
                && decode::BitReader::match_bits(&o2_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_logical(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&cmode_slice, "10x1")
                && decode::BitReader::match_bits(&o2_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_logical(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&cmode_slice, "10x0")
                && decode::BitReader::match_bits(&o2_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_logical(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&cmode_slice, "0xx1")
                && decode::BitReader::match_bits(&o2_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_logical(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&cmode_slice, "0xx0")
                && decode::BitReader::match_bits(&o2_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_logical(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&cmode_slice, "1111")
                && decode::BitReader::match_bits(&o2_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_fp16_movi(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&cmode_slice, "1111")
                && decode::BitReader::match_bits(&o2_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_logical(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&cmode_slice, "1110")
                && decode::BitReader::match_bits(&o2_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&cmode_slice, "1110")
                && decode::BitReader::match_bits(&o2_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_logical(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&cmode_slice, "110x")
                && decode::BitReader::match_bits(&o2_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&cmode_slice, "110x")
                && decode::BitReader::match_bits(&o2_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_logical(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&cmode_slice, "10x1")
                && decode::BitReader::match_bits(&o2_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_logical(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&cmode_slice, "10x0")
                && decode::BitReader::match_bits(&o2_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_logical(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&cmode_slice, "10xx")
                && decode::BitReader::match_bits(&o2_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&cmode_slice, "0xx1")
                && decode::BitReader::match_bits(&o2_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_logical(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&cmode_slice, "0xx0")
                && decode::BitReader::match_bits(&o2_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_logical(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&cmode_slice, "0xxx")
                && decode::BitReader::match_bits(&o2_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0xx0",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x1xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxxxxxxx1",
            )
        {
            let Q_slice = reader.extract_slice(30usize, 1usize)?;
            let U_slice = reader.extract_slice(29usize, 1usize)?;
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let opcode_slice = reader.extract_slice(11usize, 5usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "11001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "00011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "11001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_fp_mul_norounding_upper(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "00011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_max_min_fp_1985(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_fp_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_fp_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_sub_fp_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_max_min_fp_2008(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "11001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "00011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "11001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_fp_mul_norounding_upper(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "00011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_logical_bsl_eor(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_div(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_max_min_fp_1985(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_fp_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_fp_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_fp_product(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_add_fp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_max_min_fp_2008(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_int_doubling_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_max_min_pair(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_max_min_pair(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_int_product(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_int_accum(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_diff(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_diff(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_max_min_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_max_min_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_shift_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_shift_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_shift_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_shift_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_int_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_int_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_sub_saturating_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_sub_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_add_halving_rounding(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_add_saturating_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_add_halving_truncating(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "00011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_logical_and_orr(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_fp_mul_norounding_lower(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "00011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_logical_and_orr(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_rsqrts_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_max_min_fp_1985(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_sub_fp_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_fp_fused(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_max_min_fp_2008(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "00011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_logical_and_orr(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_fp_mul_norounding_lower(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "00011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_logical_and_orr(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_recps_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_max_min_fp_1985(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_fp_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_fp_extended_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_add_fp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_fp_fused(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_max_min_fp_2008(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_add_wrapping_pair(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_int_doubling_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_max_min_pair(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_max_min_pair(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_int_product(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_int_accum(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_diff(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_diff(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_max_min_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_max_min_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_shift_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_shift_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_shift_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_shift_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_int_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_int_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_sub_saturating_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_sub_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_add_halving_rounding(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_add_saturating_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_add_halving_truncating(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0xx0",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x1xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxxxxxx00",
            )
        {
            let Q_slice = reader.extract_slice(30usize, 1usize)?;
            let U_slice = reader.extract_slice(29usize, 1usize)?;
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let opcode_slice = reader.extract_slice(12usize, 4usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1110")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_mul_product(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_mul_accum(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_mul_accum(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_diff(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_add_sub_narrow(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_diff(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_add_sub_narrow(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_add_sub_wide(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_add_sub_long(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_add_sub_wide(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_add_sub_long(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_mul_poly(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_mul_double_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_mul_product(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_mul_dmacc_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_mul_accum(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_mul_dmacc_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_mul_accum(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_diff(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_add_sub_narrow(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_diff(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_add_sub_narrow(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_add_sub_wide(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_add_sub_long(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_add_sub_wide(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_add_sub_long(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opcode_slice, "1111") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0xx0",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x1xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "x1xxxxx10",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0xx0",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x1xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "1xxxxxx10",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0xx0",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x110",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "00xxxxx10",
            )
        {
            let Q_slice = reader.extract_slice(30usize, 1usize)?;
            let U_slice = reader.extract_slice(29usize, 1usize)?;
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let opcode_slice = reader.extract_slice(12usize, 5usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "01111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_fp_max_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_fp_maxnm_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "01111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_fp_max_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_fp_maxnm_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_int_max(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_int_max(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_add_long(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "01111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "01111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_fp16_max_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_fp16_maxnm_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "01111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "01111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_fp16_max_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_fp16_maxnm_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_add_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_int_max(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_int_max(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_add_long(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opcode_slice, "111xx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "1100x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "10xxx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "01110") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "01101") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "01011") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "0100x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "001xx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "00010") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "0000x") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0xx0",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x100",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "00xxxxx10",
            )
        {
            let Q_slice = reader.extract_slice(30usize, 1usize)?;
            let U_slice = reader.extract_slice(29usize, 1usize)?;
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let opcode_slice = reader.extract_slice(12usize, 5usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "10110")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_special_sqrt(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_special_sqrt_est_float_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_special_sqrt_est_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_conv_float_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_conv_float_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_round(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "01111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_diff_neg_float(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "01110")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "01101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_float_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_float_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "00101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "00101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_rbit(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "00101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_not(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_round_frint_32_64(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_round_frint_32_64(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_conv_int_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_conv_float_tieaway_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_conv_float_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_conv_float_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_round(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_round(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "10111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "10110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_xtn_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_extract_sat_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_shift(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_extract_sqxtun_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_diff_neg_int_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01010")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_int_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_int_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_diff_neg_sat_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_add_pairwise(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_clsz(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_add_saturating_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_add_pairwise(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_rev(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "10110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_cvt_bf16_vector(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_special_recip_float_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_special_recip_int(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_conv_float_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_conv_float_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_round(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_round(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "01111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_diff_neg_float(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "01110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_float_lessthan_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "01101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_float_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_float_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_round_frint_32_64(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_round_frint_32_64(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_conv_int_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_conv_float_tieaway_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_conv_float_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_conv_float_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_round(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_round(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "10111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_widen(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "10110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_narrow(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_extract_sat_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_extract_nosat(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_diff_neg_int_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_int_lessthan_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_int_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_int_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_diff_neg_sat_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_add_pairwise(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cnt(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_clsz(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_add_saturating_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_add_pairwise(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_rev(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_rev(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "10110")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11110")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "10111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "011xx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "10101") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "1000x") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0xx0",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x0xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxx1xxxx1",
            )
        {
            let Q_slice = reader.extract_slice(30usize, 1usize)?;
            let U_slice = reader.extract_slice(29usize, 1usize)?;
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let opcode_slice = reader.extract_slice(11usize, 4usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&Q_slice, "1")
                && decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "0101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&Q_slice, "1")
                && decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "0100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mat_mul_int_mla(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&Q_slice, "1")
                && decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "1101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_bfmmla(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&Q_slice, "1")
                && decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "0101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mat_mul_int_mla(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&Q_slice, "1")
                && decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "0100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mat_mul_int_mla(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&Q_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "011x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&Q_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "01xx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&Q_slice, "0")
                && decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "1101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&Q_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01xx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "1111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_acc_bf16_long(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "1111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "0011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "1101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "1111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_int_bfdot(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "1111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "1101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_add_fp_complex(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10xx")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_fp_complex(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_int_dotp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_int_doubling_accum_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_int_doubling_accum_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "0011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mat_mul_int_usdot(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1xxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_int_dotp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "0011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "0011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0xx0",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x0xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxx1xxxx0",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0xx0",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "1111",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "00xxxxx10",
            )
        {
            let Q_slice = reader.extract_slice(30usize, 1usize)?;
            let U_slice = reader.extract_slice(29usize, 1usize)?;
            let a_slice = reader.extract_slice(23usize, 1usize)?;
            let opcode_slice = reader.extract_slice(12usize, 5usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_special_sqrt_fp16(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_special_sqrt_est_fp16_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_conv_float_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_conv_float_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_round(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_diff_neg_fp16(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01110")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_fp16_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_fp16_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_conv_int_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_conv_float_tieaway_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_conv_float_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_conv_float_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_round(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_round(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_special_recip_fp16_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_conv_float_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_conv_float_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_round(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_round(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_diff_neg_fp16(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_fp16_lessthan_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_fp16_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_fp16_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_conv_int_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_conv_float_tieaway_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_conv_float_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_conv_float_bulk_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_round(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_round(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "011xx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "11110") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "10xxx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "010xx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "00xxx") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0xx0",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "10xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxx01xxx1",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0xx0",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "10xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxx00xxx1",
            )
        {
            let Q_slice = reader.extract_slice(30usize, 1usize)?;
            let U_slice = reader.extract_slice(29usize, 1usize)?;
            let a_slice = reader.extract_slice(23usize, 1usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let opcode_slice = reader.extract_slice(11usize, 3usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_max_min_fp16_1985(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_fp16_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_fp16_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_sub_fp16_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_max_min_fp16_2008(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_div_fp16(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_max_min_fp16_1985(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_fp16_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_fp16_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_fp16_product(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_add_fp16(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_max_min_fp16_2008(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_rsqrts_fp16_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_max_min_fp16_1985(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_sub_fp16_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_fp16_fused(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_max_min_fp16_2008(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_recps_fp16_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_max_min_fp16_1985(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_fp16_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_fp16_extended_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_add_fp16(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_fp16_fused(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_max_min_fp16_2008(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0xx0",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "0111",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "00xxxxx10",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0xx0",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "01")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "00xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxx0xxxx1",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0xx0",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "00")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "00xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxx0xxxx1",
            )
        {
            let Q_slice = reader.extract_slice(30usize, 1usize)?;
            let op_slice = reader.extract_slice(29usize, 1usize)?;
            let imm5_slice = reader.extract_slice(16usize, 5usize)?;
            let imm4_slice = reader.extract_slice(11usize, 4usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&Q_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_transfer_vector_insert(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&Q_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&imm5_slice, "x1000")
                && decode::BitReader::match_bits(&imm4_slice, "0111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_transfer_integer_move_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&Q_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&imm4_slice, "0101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_transfer_integer_move_signed(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&Q_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&imm4_slice, "0011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_transfer_integer_insert(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&Q_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&Q_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&imm4_slice, "0111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_transfer_integer_move_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&Q_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&imm4_slice, "0101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_transfer_integer_move_signed(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&Q_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&imm4_slice, "0011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&imm4_slice, "1xxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&imm4_slice, "0110")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&imm4_slice, "0100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&imm4_slice, "0010")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&imm4_slice, "0001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_transfer_integer_dup(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&imm4_slice, "0000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_transfer_vector_cpy_dup_simd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&imm5_slice, "x0000") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0x10",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x0xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxx0xxxx0",
            )
        {
            let Q_slice = reader.extract_slice(30usize, 1usize)?;
            let op2_slice = reader.extract_slice(22usize, 2usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let imm4_slice = reader.extract_slice(11usize, 4usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&op2_slice, "1x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op2_slice, "00") {
                match decode::generated::decode_blocks::decode_aarch64_vector_transfer_vector_extract(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op2_slice, "x1") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0x00",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x0xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxx0xxx10",
            )
        {
            let Q_slice = reader.extract_slice(30usize, 1usize)?;
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let opcode_slice = reader.extract_slice(12usize, 3usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&opcode_slice, "111") {
                match decode::generated::decode_blocks::decode_aarch64_vector_transfer_vector_permute_zip(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opcode_slice, "110") {
                match decode::generated::decode_blocks::decode_aarch64_vector_transfer_vector_permute_transpose(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opcode_slice, "101") {
                match decode::generated::decode_blocks::decode_aarch64_vector_transfer_vector_permute_unzip(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opcode_slice, "100") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "011") {
                match decode::generated::decode_blocks::decode_aarch64_vector_transfer_vector_permute_zip(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opcode_slice, "010") {
                match decode::generated::decode_blocks::decode_aarch64_vector_transfer_vector_permute_transpose(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opcode_slice, "001") {
                match decode::generated::decode_blocks::decode_aarch64_vector_transfer_vector_permute_unzip(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opcode_slice, "000") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0x00",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x0xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxx0xxx00",
            )
        {
            let Q_slice = reader.extract_slice(30usize, 1usize)?;
            let op2_slice = reader.extract_slice(22usize, 2usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let len_slice = reader.extract_slice(13usize, 2usize)?;
            let op_slice = reader.extract_slice(12usize, 1usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&op2_slice, "1x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op2_slice, "00")
                && decode::BitReader::match_bits(&len_slice, "11")
                && decode::BitReader::match_bits(&op_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_transfer_vector_table(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op2_slice, "00")
                && decode::BitReader::match_bits(&len_slice, "11")
                && decode::BitReader::match_bits(&op_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_transfer_vector_table(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op2_slice, "00")
                && decode::BitReader::match_bits(&len_slice, "10")
                && decode::BitReader::match_bits(&op_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_transfer_vector_table(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op2_slice, "00")
                && decode::BitReader::match_bits(&len_slice, "10")
                && decode::BitReader::match_bits(&op_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_transfer_vector_table(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op2_slice, "00")
                && decode::BitReader::match_bits(&len_slice, "01")
                && decode::BitReader::match_bits(&op_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_transfer_vector_table(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op2_slice, "00")
                && decode::BitReader::match_bits(&len_slice, "01")
                && decode::BitReader::match_bits(&op_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_transfer_vector_table(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op2_slice, "00")
                && decode::BitReader::match_bits(&len_slice, "00")
                && decode::BitReader::match_bits(&op_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_transfer_vector_table(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op2_slice, "00")
                && decode::BitReader::match_bits(&len_slice, "00")
                && decode::BitReader::match_bits(&op_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_transfer_vector_table(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op2_slice, "x1") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "01x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxxxxxxx0",
            )
        {
            let U_slice = reader.extract_slice(29usize, 1usize)?;
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let L_slice = reader.extract_slice(21usize, 1usize)?;
            let M_slice = reader.extract_slice(20usize, 1usize)?;
            let Rm_slice = reader.extract_slice(16usize, 4usize)?;
            let opcode_slice = reader.extract_slice(12usize, 4usize)?;
            let H_slice = reader.extract_slice(11usize, 1usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "1001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_fp_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "0101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "0001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "1001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_fp16_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "0101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "0001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_high_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_high_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "1001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_fp_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "0101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_fp_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "0001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_fp_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "1001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_fp16_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "0101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_fp16_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "0001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_fp16_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_high_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_high_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_double_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_double_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_element_mul_acc_double_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "1001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "0101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "0001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "1110") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "1010") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "1000") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "0110") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "0100") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "0010") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "0000") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "01x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "11")
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxxxxxxx1",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "01x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "10")
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxxxxxxx1",
            )
        {
            let U_slice = reader.extract_slice(29usize, 1usize)?;
            let immh_slice = reader.extract_slice(19usize, 4usize)?;
            let immb_slice = reader.extract_slice(16usize, 3usize)?;
            let opcode_slice = reader.extract_slice(11usize, 5usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&U_slice, "1")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_conv_float_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_conv_int_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "10011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_narrow_uniform_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "10010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_narrow_uniform_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "10001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_narrow_nonuniform_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "10000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_narrow_nonuniform_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "01110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_left_sat_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_left_sat_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "01010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_left_insert_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "01000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_insert_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "00110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "00100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "00010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "00000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_conv_float_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_conv_int_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "10011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_narrow_uniform_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "10010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_narrow_uniform_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "10001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "10000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "01110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_left_sat_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "01010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_left_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "01000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "00110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "00100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "00010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "00000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_shift_right_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&immh_slice, "0000") {
                instruction = common::types::Instruction::UNALLOC;
            } else if !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "11110")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "110xx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "101xx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "01111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "01101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "01011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "01001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "00111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "00101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "00011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if !decode::BitReader::match_bits(&immh_slice, "0000")
                && decode::BitReader::match_bits(&opcode_slice, "00001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "01x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x1xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxxxxxxx1",
            )
        {
            let U_slice = reader.extract_slice(29usize, 1usize)?;
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let opcode_slice = reader.extract_slice(11usize, 5usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11110")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_fp_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_fp_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_sub_fp_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11110")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_fp_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_fp_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_int_doubling_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_shift_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_shift_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_shift_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_shift_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_int_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_int_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_sub_saturating_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_add_saturating_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_rsqrts_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11110")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_recps_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11110")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_fp_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_fp_extended_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_int_doubling_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_bitwise_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_add_wrapping_single_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_shift_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_shift_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_shift_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_shift_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_int_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_int_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_sub_saturating_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_add_saturating_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "1001x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "011xx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "00100") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "0001x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "00000") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "01x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x1xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxxxxxx00",
            )
        {
            let U_slice = reader.extract_slice(29usize, 1usize)?;
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let opcode_slice = reader.extract_slice(12usize, 4usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_mul_double_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_mul_dmacc_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_disparate_mul_dmacc_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opcode_slice, "111x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "1100") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "1010") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "1000") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "01xx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "00xx") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "01x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x1xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "x1xxxxx10",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "01x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x1xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "1xxxxxx10",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "01x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x110",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "00xxxxx10",
            )
        {
            let U_slice = reader.extract_slice(29usize, 1usize)?;
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let opcode_slice = reader.extract_slice(12usize, 5usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "01111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_fp_max_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_fp_maxnm_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "01111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_fp_max_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "01101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_fp_add_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_fp_maxnm_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "01111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "01111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_fp16_max_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_fp16_maxnm_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "01111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "01101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "01111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_fp16_max_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "01101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_fp16_add_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_fp16_maxnm_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_reduce_add_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "01101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "111xx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "11010") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "1100x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "10xxx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "01110") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "010xx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "00xxx") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "01x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x100",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "00xxxxx10",
            )
        {
            let U_slice = reader.extract_slice(29usize, 1usize)?;
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let opcode_slice = reader.extract_slice(12usize, 5usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_special_sqrt_est_float_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_conv_float_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_conv_float_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "01110")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "01101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_float_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_float_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_conv_int_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_conv_float_tieaway_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_conv_float_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_conv_float_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "10110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_xtn_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_extract_sat_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "10010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_extract_sqxtun_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_diff_neg_int_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01010")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_int_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_int_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_diff_neg_sat_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_add_saturating_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_special_frecpx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_special_recip_float_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_conv_float_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_conv_float_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "01110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_float_lessthan_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "01101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_float_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_float_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_conv_int_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_conv_float_tieaway_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_conv_float_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_float_conv_float_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "10110")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_extract_sat_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "10010")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_diff_neg_int_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_int_lessthan_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_int_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "01000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_int_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_diff_neg_sat_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_add_saturating_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&opcode_slice, "10110")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&opcode_slice, "011xx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "11110") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "1100x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "10111") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "10101") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "10011") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "1000x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "01111") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "00110") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "0010x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "00010") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "0000x") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "01x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x0xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxx1xxxx1",
            )
        {
            let U_slice = reader.extract_slice(29usize, 1usize)?;
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let opcode_slice = reader.extract_slice(11usize, 4usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_int_doubling_accum_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_int_doubling_accum_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "1xxx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "01xx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "001x") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "01x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x0xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxx1xxxx0",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "01x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "1111",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "00xxxxx10",
            )
        {
            let U_slice = reader.extract_slice(29usize, 1usize)?;
            let a_slice = reader.extract_slice(23usize, 1usize)?;
            let opcode_slice = reader.extract_slice(12usize, 5usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_special_sqrt_est_fp16_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_conv_float_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_conv_float_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01110")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_fp16_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_fp16_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_conv_int_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_conv_float_tieaway_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_conv_float_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_conv_float_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_special_frecpx_fp16(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_special_recip_fp16_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_conv_float_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_conv_float_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_fp16_lessthan_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_fp16_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_cmp_fp16_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_conv_int_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_conv_float_tieaway_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_conv_float_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_unary_fp16_conv_float_bulk_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "011xx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "11110") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "1100x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "10xxx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "010xx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "00xxx") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "01x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "10xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxx01xxx1",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "01x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "10xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxx00xxx1",
            )
        {
            let U_slice = reader.extract_slice(29usize, 1usize)?;
            let a_slice = reader.extract_slice(23usize, 1usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let opcode_slice = reader.extract_slice(11usize, 3usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_fp16_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_fp16_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_sub_fp16_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_fp16_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_fp16_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "1")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_rsqrts_fp16_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_recps_fp16_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_cmp_fp16_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&U_slice, "0")
                && decode::BitReader::match_bits(&a_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_arithmetic_binary_uniform_mul_fp16_extended_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&a_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "110") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "01x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "0111",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "00xxxxx10",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "01x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "01")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "00xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxx0xxxx1",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "01x1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "00")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "00xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxx0xxxx1",
            )
        {
            let op_slice = reader.extract_slice(29usize, 1usize)?;
            let imm5_slice = reader.extract_slice(16usize, 5usize)?;
            let imm4_slice = reader.extract_slice(11usize, 4usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&op_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&imm5_slice, "x0000")
                && decode::BitReader::match_bits(&imm4_slice, "0000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&imm4_slice, "1xxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&imm4_slice, "0000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_transfer_vector_cpy_dup_sisd(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&imm4_slice, "x1xx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&imm4_slice, "xx1x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&imm4_slice, "xxx1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0111",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x101",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "00xxxxx10",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0111",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x0xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxx0xxxx0",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0110",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x101",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "00xxxxx10",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0101",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x101",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "00xxxxx10",
            )
        {
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let opcode_slice = reader.extract_slice(12usize, 5usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&size_slice, "1x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "00011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "00010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sha2op_sha256_sched0(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "00001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sha2op_sha1_sched1(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "00000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sha2op_sha1_hash(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "x1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "1xxxx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "x1xxx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "xx1xx") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0101",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x0xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxx0xxx10",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0101",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x0xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "xxx0xxx00",
            )
        {
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let opcode_slice = reader.extract_slice(12usize, 3usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&size_slice, "1x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sha3op_sha256_sched1(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sha3op_sha256_hash(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sha3op_sha256_hash(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sha3op_sha1_sched0(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sha3op_sha1_hash_majority(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sha3op_sha1_hash_parity(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_sha3op_sha1_hash_choose(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "x1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "111") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0100",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x101",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "00xxxxx10",
            )
        {
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let opcode_slice = reader.extract_slice(12usize, 5usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&size_slice, "1x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "00111")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_aes_mix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "00110")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_aes_mix(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "00101")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_aes_round(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opcode_slice, "00100")
            {
                match decode::generated::decode_blocks::decode_aarch64_vector_crypto_aes_round(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "x1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "1xxxx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "000xx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "x1xxx") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0010",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x101",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "00xxxxx10",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0000",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 4usize)?,
                "x101",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 9usize)?,
                "00xxxxx10",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else {
            return Ok(common::types::Instruction::UNDEF);
        }
    } else if decode::BitReader::match_bits(
        &reader.extract_slice(24usize, 5usize)?,
        "x101x",
    ) {
        if decode::BitReader::match_bits(&reader.extract_slice(28usize, 1usize)?, "1")
            && decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 4usize)?,
                "1xxx",
            )
        {
            let sf_slice = reader.extract_slice(31usize, 1usize)?;
            let op54_slice = reader.extract_slice(29usize, 2usize)?;
            let op31_slice = reader.extract_slice(21usize, 3usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let o0_slice = reader.extract_slice(15usize, 1usize)?;
            let Ra_slice = reader.extract_slice(10usize, 5usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op54_slice, "00")
                && decode::BitReader::match_bits(&op31_slice, "110")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_mul_widening_64_128hi(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op54_slice, "00")
                && decode::BitReader::match_bits(&op31_slice, "101")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_mul_widening_32_64(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op54_slice, "00")
                && decode::BitReader::match_bits(&op31_slice, "101")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_mul_widening_32_64(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op54_slice, "00")
                && decode::BitReader::match_bits(&op31_slice, "010")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_mul_widening_64_128hi(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op54_slice, "00")
                && decode::BitReader::match_bits(&op31_slice, "001")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_mul_widening_32_64(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op54_slice, "00")
                && decode::BitReader::match_bits(&op31_slice, "001")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_mul_widening_32_64(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op54_slice, "00")
                && decode::BitReader::match_bits(&op31_slice, "000")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_mul_uniform_add_sub(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op54_slice, "00")
                && decode::BitReader::match_bits(&op31_slice, "000")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_mul_uniform_add_sub(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op54_slice, "00")
                && decode::BitReader::match_bits(&op31_slice, "110")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op54_slice, "00")
                && decode::BitReader::match_bits(&op31_slice, "101")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op54_slice, "00")
                && decode::BitReader::match_bits(&op31_slice, "101")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op54_slice, "00")
                && decode::BitReader::match_bits(&op31_slice, "010")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op54_slice, "00")
                && decode::BitReader::match_bits(&op31_slice, "001")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op54_slice, "00")
                && decode::BitReader::match_bits(&op31_slice, "001")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op54_slice, "00")
                && decode::BitReader::match_bits(&op31_slice, "000")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_mul_uniform_add_sub(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op54_slice, "00")
                && decode::BitReader::match_bits(&op31_slice, "000")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_mul_uniform_add_sub(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op54_slice, "1x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op54_slice, "01") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op54_slice, "00")
                && decode::BitReader::match_bits(&op31_slice, "111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op54_slice, "00")
                && decode::BitReader::match_bits(&op31_slice, "110")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op54_slice, "00")
                && decode::BitReader::match_bits(&op31_slice, "100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op54_slice, "00")
                && decode::BitReader::match_bits(&op31_slice, "011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op54_slice, "00")
                && decode::BitReader::match_bits(&op31_slice, "010")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 1usize)?,
            "1",
        )
            && decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 4usize)?,
                "0100",
            )
        {
            let sf_slice = reader.extract_slice(31usize, 1usize)?;
            let op_slice = reader.extract_slice(30usize, 1usize)?;
            let S_slice = reader.extract_slice(29usize, 1usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let cond_slice = reader.extract_slice(12usize, 4usize)?;
            let op2_slice = reader.extract_slice(10usize, 2usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&op2_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_conditional_select(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&op2_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_conditional_select(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&op2_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_conditional_select(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&op2_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_conditional_select(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&op2_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_conditional_select(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&op2_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_conditional_select(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&op2_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_conditional_select(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&op2_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_conditional_select(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&S_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op2_slice, "1x") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 1usize)?,
            "1",
        )
            && decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 4usize)?,
                "0010",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "xxxx1x",
            )
        {
            let sf_slice = reader.extract_slice(31usize, 1usize)?;
            let op_slice = reader.extract_slice(30usize, 1usize)?;
            let S_slice = reader.extract_slice(29usize, 1usize)?;
            let imm5_slice = reader.extract_slice(16usize, 5usize)?;
            let cond_slice = reader.extract_slice(12usize, 4usize)?;
            let o2_slice = reader.extract_slice(10usize, 1usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let o3_slice = reader.extract_slice(4usize, 1usize)?;
            let nzcv_slice = reader.extract_slice(0usize, 4usize)?;
            if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_conditional_compare_immediate(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_conditional_compare_immediate(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_conditional_compare_immediate(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_conditional_compare_immediate(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&S_slice, "0") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&o2_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&o3_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 1usize)?,
            "1",
        )
            && decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 4usize)?,
                "0010",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "xxxx0x",
            )
        {
            let sf_slice = reader.extract_slice(31usize, 1usize)?;
            let op_slice = reader.extract_slice(30usize, 1usize)?;
            let S_slice = reader.extract_slice(29usize, 1usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let cond_slice = reader.extract_slice(12usize, 4usize)?;
            let o2_slice = reader.extract_slice(10usize, 1usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let o3_slice = reader.extract_slice(4usize, 1usize)?;
            let nzcv_slice = reader.extract_slice(0usize, 4usize)?;
            if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_conditional_compare_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_conditional_compare_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_conditional_compare_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_conditional_compare_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&S_slice, "0") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&o2_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&o3_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 1usize)?,
            "1",
        )
            && decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 4usize)?,
                "0000",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "xx0010",
            )
        {
            let sf_slice = reader.extract_slice(31usize, 1usize)?;
            let op_slice = reader.extract_slice(30usize, 1usize)?;
            let S_slice = reader.extract_slice(29usize, 1usize)?;
            let opcode2_slice = reader.extract_slice(15usize, 6usize)?;
            let sz_slice = reader.extract_slice(14usize, 1usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let o3_slice = reader.extract_slice(4usize, 1usize)?;
            let mask_slice = reader.extract_slice(0usize, 4usize)?;
            if decode::BitReader::match_bits(&sf_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&opcode2_slice, "000000")
                && decode::BitReader::match_bits(&sz_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&mask_slice, "1101")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_flags_setf(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&opcode2_slice, "000000")
                && decode::BitReader::match_bits(&sz_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&mask_slice, "1101")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_flags_setf(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&opcode2_slice, "000000")
                && decode::BitReader::match_bits(&o3_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&opcode2_slice, "000000")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && !decode::BitReader::match_bits(&mask_slice, "1101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "1")
                && !decode::BitReader::match_bits(&opcode2_slice, "000000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 1usize)?,
            "1",
        )
            && decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 4usize)?,
                "0000",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "x00001",
            )
        {
            let sf_slice = reader.extract_slice(31usize, 1usize)?;
            let op_slice = reader.extract_slice(30usize, 1usize)?;
            let S_slice = reader.extract_slice(29usize, 1usize)?;
            let imm6_slice = reader.extract_slice(15usize, 6usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let o2_slice = reader.extract_slice(4usize, 1usize)?;
            let mask_slice = reader.extract_slice(0usize, 4usize)?;
            if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_flags_rmif(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 1usize)?,
            "1",
        )
            && decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 4usize)?,
                "0000",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "000000",
            )
        {
            let sf_slice = reader.extract_slice(31usize, 1usize)?;
            let op_slice = reader.extract_slice(30usize, 1usize)?;
            let S_slice = reader.extract_slice(29usize, 1usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_carry(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_carry(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_carry(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_carry(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_carry(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_carry(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_carry(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_carry(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 1usize)?,
            "0",
        )
            && decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 4usize)?,
                "1xx1",
            )
        {
            let sf_slice = reader.extract_slice(31usize, 1usize)?;
            let op_slice = reader.extract_slice(30usize, 1usize)?;
            let S_slice = reader.extract_slice(29usize, 1usize)?;
            let opt_slice = reader.extract_slice(22usize, 2usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let option_slice = reader.extract_slice(13usize, 3usize)?;
            let imm3_slice = reader.extract_slice(10usize, 3usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&opt_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_extendedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opt_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_extendedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&opt_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_extendedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opt_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_extendedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&opt_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_extendedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opt_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_extendedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&opt_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_extendedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opt_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_extendedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opt_slice, "1x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opt_slice, "x1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&imm3_slice, "11x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&imm3_slice, "1x1") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 1usize)?,
            "0",
        )
            && decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 4usize)?,
                "1xx0",
            )
        {
            let sf_slice = reader.extract_slice(31usize, 1usize)?;
            let op_slice = reader.extract_slice(30usize, 1usize)?;
            let S_slice = reader.extract_slice(29usize, 1usize)?;
            let shift_slice = reader.extract_slice(22usize, 2usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let imm6_slice = reader.extract_slice(10usize, 6usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_shiftedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_shiftedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_shiftedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_shiftedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_shiftedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_shiftedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_shiftedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_shiftedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&imm6_slice, "1xxxxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&shift_slice, "11") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 1usize)?,
            "0",
        )
            && decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 4usize)?,
                "0xxx",
            )
        {
            let sf_slice = reader.extract_slice(31usize, 1usize)?;
            let opc_slice = reader.extract_slice(29usize, 2usize)?;
            let shift_slice = reader.extract_slice(22usize, 2usize)?;
            let N_slice = reader.extract_slice(21usize, 1usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let imm6_slice = reader.extract_slice(10usize, 6usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "11")
                && decode::BitReader::match_bits(&N_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_logical_shiftedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "11")
                && decode::BitReader::match_bits(&N_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_logical_shiftedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&N_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_logical_shiftedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&N_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_logical_shiftedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&N_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_logical_shiftedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&N_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_logical_shiftedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&N_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_logical_shiftedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&N_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_logical_shiftedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "11")
                && decode::BitReader::match_bits(&N_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_logical_shiftedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "11")
                && decode::BitReader::match_bits(&N_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_logical_shiftedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&N_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_logical_shiftedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&N_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_logical_shiftedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&N_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_logical_shiftedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&N_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_logical_shiftedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&N_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_logical_shiftedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&N_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_logical_shiftedreg(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&imm6_slice, "1xxxxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(30usize, 1usize)?,
            "1",
        ) && decode::BitReader::match_bits(&reader.extract_slice(28usize, 1usize)?, "1")
            && decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 4usize)?,
                "0110",
            )
        {
            let sf_slice = reader.extract_slice(31usize, 1usize)?;
            let S_slice = reader.extract_slice(29usize, 1usize)?;
            let opcode2_slice = reader.extract_slice(16usize, 5usize)?;
            let opcode_slice = reader.extract_slice(10usize, 6usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00001")
                && decode::BitReader::match_bits(&opcode_slice, "011xxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00001")
                && decode::BitReader::match_bits(&opcode_slice, "0101xx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00001")
                && decode::BitReader::match_bits(&opcode_slice, "01001x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00001")
                && decode::BitReader::match_bits(&opcode_slice, "010001")
                && decode::BitReader::match_bits(&Rn_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_strip_dp_1src(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00001")
                && decode::BitReader::match_bits(&opcode_slice, "010000")
                && decode::BitReader::match_bits(&Rn_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_strip_dp_1src(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00001")
                && decode::BitReader::match_bits(&opcode_slice, "001111")
                && decode::BitReader::match_bits(&Rn_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_autdb_dp_1src(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00001")
                && decode::BitReader::match_bits(&opcode_slice, "001110")
                && decode::BitReader::match_bits(&Rn_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_autda_dp_1src(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00001")
                && decode::BitReader::match_bits(&opcode_slice, "001101")
                && decode::BitReader::match_bits(&Rn_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_autib_dp_1src(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00001")
                && decode::BitReader::match_bits(&opcode_slice, "001100")
                && decode::BitReader::match_bits(&Rn_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_autia_dp_1src(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00001")
                && decode::BitReader::match_bits(&opcode_slice, "001011")
                && decode::BitReader::match_bits(&Rn_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_pacdb_dp_1src(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00001")
                && decode::BitReader::match_bits(&opcode_slice, "001010")
                && decode::BitReader::match_bits(&Rn_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_pacda_dp_1src(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00001")
                && decode::BitReader::match_bits(&opcode_slice, "001001")
                && decode::BitReader::match_bits(&Rn_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_pacib_dp_1src(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00001")
                && decode::BitReader::match_bits(&opcode_slice, "001000")
                && decode::BitReader::match_bits(&Rn_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_pacia_dp_1src(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00001")
                && decode::BitReader::match_bits(&opcode_slice, "000111")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_autdb_dp_1src(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00001")
                && decode::BitReader::match_bits(&opcode_slice, "000110")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_autda_dp_1src(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00001")
                && decode::BitReader::match_bits(&opcode_slice, "000101")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_autib_dp_1src(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00001")
                && decode::BitReader::match_bits(&opcode_slice, "000100")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_autia_dp_1src(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00001")
                && decode::BitReader::match_bits(&opcode_slice, "000011")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_pacdb_dp_1src(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00001")
                && decode::BitReader::match_bits(&opcode_slice, "000010")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_pacda_dp_1src(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00001")
                && decode::BitReader::match_bits(&opcode_slice, "000001")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_pacib_dp_1src(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00001")
                && decode::BitReader::match_bits(&opcode_slice, "000000")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_pacia_dp_1src(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00000")
                && decode::BitReader::match_bits(&opcode_slice, "000101")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_cnt(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00000")
                && decode::BitReader::match_bits(&opcode_slice, "000100")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_cnt(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00000")
                && decode::BitReader::match_bits(&opcode_slice, "000011")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_rev(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00000")
                && decode::BitReader::match_bits(&opcode_slice, "000010")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_rev(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00000")
                && decode::BitReader::match_bits(&opcode_slice, "000001")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_rev(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00000")
                && decode::BitReader::match_bits(&opcode_slice, "000000")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_rbit(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00000")
                && decode::BitReader::match_bits(&opcode_slice, "000101")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_cnt(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00000")
                && decode::BitReader::match_bits(&opcode_slice, "000100")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_cnt(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00000")
                && decode::BitReader::match_bits(&opcode_slice, "000011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00000")
                && decode::BitReader::match_bits(&opcode_slice, "000010")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_rev(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00000")
                && decode::BitReader::match_bits(&opcode_slice, "000001")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_rev(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00000")
                && decode::BitReader::match_bits(&opcode_slice, "000000")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_rbit(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&S_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00000")
                && decode::BitReader::match_bits(&opcode_slice, "01xxxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00000")
                && decode::BitReader::match_bits(&opcode_slice, "001xxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode2_slice, "00000")
                && decode::BitReader::match_bits(&opcode_slice, "00011x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode2_slice, "1xxxx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode2_slice, "x1xxx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode2_slice, "xx1xx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode2_slice, "xxx1x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "1xxxxx") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(30usize, 1usize)?,
            "0",
        ) && decode::BitReader::match_bits(&reader.extract_slice(28usize, 1usize)?, "1")
            && decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 4usize)?,
                "0110",
            )
        {
            let sf_slice = reader.extract_slice(31usize, 1usize)?;
            let S_slice = reader.extract_slice(29usize, 1usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let opcode_slice = reader.extract_slice(10usize, 6usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "000000")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_pointer_mcsubtracttaggedaddresssetflags(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "010111")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_crc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "010011")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_crc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "010x0x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "010xx0")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "001100")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_pacga_dp_2src(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "001011")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_shift_variable(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "001010")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_shift_variable(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "001001")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_shift_variable(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "001000")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_shift_variable(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "000101")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_tags_mcinserttagmask(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "000100")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_tags_mcinsertrandomtag(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "000011")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_div(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "000010")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_div(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "000000")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_pointer_mcsubtracttaggedaddress(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "010110")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_crc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "010101")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_crc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "010100")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_crc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "010010")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_crc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "010001")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_crc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "010000")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_crc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "010x11")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "001100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "001011")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_shift_variable(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "001010")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_shift_variable(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "001001")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_shift_variable(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "001000")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_shift_variable(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00010x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "000011")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_div(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "000010")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_div(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "000000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "01xxxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "001xxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0001xx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "00001x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00111x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "001101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "00011x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "1xxxxx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "011xxx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opcode_slice, "000001") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else {
            return Ok(common::types::Instruction::UNDEF);
        }
    } else if decode::BitReader::match_bits(
        &reader.extract_slice(24usize, 5usize)?,
        "x1x0x",
    ) {
        if decode::BitReader::match_bits(&reader.extract_slice(28usize, 4usize)?, "xx11")
            && decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "1x",
            )
        {
            let size_slice = reader.extract_slice(30usize, 2usize)?;
            let V_slice = reader.extract_slice(26usize, 1usize)?;
            let opc_slice = reader.extract_slice(22usize, 2usize)?;
            let imm12_slice = reader.extract_slice(10usize, 12usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "1x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_unsigned(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "x1")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "1x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "xx11",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 6usize)?,
                "1xxxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 2usize)?,
                "x1",
            )
        {
            let size_slice = reader.extract_slice(30usize, 2usize)?;
            let V_slice = reader.extract_slice(26usize, 1usize)?;
            let M_slice = reader.extract_slice(23usize, 1usize)?;
            let S_slice = reader.extract_slice(22usize, 1usize)?;
            let imm9_slice = reader.extract_slice(12usize, 9usize)?;
            let W_slice = reader.extract_slice(11usize, 1usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&M_slice, "1")
                && decode::BitReader::match_bits(&W_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_pac(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&M_slice, "1")
                && decode::BitReader::match_bits(&W_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_pac(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&W_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_pac(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&M_slice, "0")
                && decode::BitReader::match_bits(&W_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_pac(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if !decode::BitReader::match_bits(&size_slice, "11") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "xx11",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 6usize)?,
                "1xxxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 2usize)?,
                "10",
            )
        {
            let size_slice = reader.extract_slice(30usize, 2usize)?;
            let V_slice = reader.extract_slice(26usize, 1usize)?;
            let opc_slice = reader.extract_slice(22usize, 2usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let option_slice = reader.extract_slice(13usize, 3usize)?;
            let S_slice = reader.extract_slice(12usize, 1usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "1x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&option_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
                && !decode::BitReader::match_bits(&option_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&option_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
                && !decode::BitReader::match_bits(&option_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "11")
                && decode::BitReader::match_bits(&option_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "11")
                && !decode::BitReader::match_bits(&option_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&option_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
                && !decode::BitReader::match_bits(&option_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&option_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
                && !decode::BitReader::match_bits(&option_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&option_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
                && !decode::BitReader::match_bits(&option_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "x1")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "1x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&option_slice, "x0x") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "xx11",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 6usize)?,
                "1xxxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 2usize)?,
                "00",
            )
        {
            let size_slice = reader.extract_slice(30usize, 2usize)?;
            let V_slice = reader.extract_slice(26usize, 1usize)?;
            let A_slice = reader.extract_slice(23usize, 1usize)?;
            let R_slice = reader.extract_slice(22usize, 1usize)?;
            let Rs_slice = reader.extract_slice(16usize, 5usize)?;
            let o3_slice = reader.extract_slice(15usize, 1usize)?;
            let opc_slice = reader.extract_slice(12usize, 3usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_swp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_ordered_rcpc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_swp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_swp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_swp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_swp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_ordered_rcpc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_swp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_swp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_swp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_swp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_ordered_rcpc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_swp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_swp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_swp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_swp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_ordered_rcpc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_swp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_swp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_swp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_ld(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&V_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&A_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "100")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "11x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "xx11",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 6usize)?,
                "0xxxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 2usize)?,
                "11",
            )
        {
            let size_slice = reader.extract_slice(30usize, 2usize)?;
            let V_slice = reader.extract_slice(26usize, 1usize)?;
            let opc_slice = reader.extract_slice(22usize, 2usize)?;
            let imm9_slice = reader.extract_slice(12usize, 9usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "1x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "x1")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "1x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "xx11",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 6usize)?,
                "0xxxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 2usize)?,
                "10",
            )
        {
            let size_slice = reader.extract_slice(30usize, 2usize)?;
            let V_slice = reader.extract_slice(26usize, 1usize)?;
            let opc_slice = reader.extract_slice(22usize, 2usize)?;
            let imm9_slice = reader.extract_slice(12usize, 9usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_unpriv(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_unpriv(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_unpriv(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_unpriv(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_unpriv(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_unpriv(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_unpriv(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_unpriv(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_unpriv(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_unpriv(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_unpriv(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_unpriv(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_unpriv(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&V_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "xx11",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 6usize)?,
                "0xxxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 2usize)?,
                "01",
            )
        {
            let size_slice = reader.extract_slice(30usize, 2usize)?;
            let V_slice = reader.extract_slice(26usize, 1usize)?;
            let opc_slice = reader.extract_slice(22usize, 2usize)?;
            let imm9_slice = reader.extract_slice(12usize, 9usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "1x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "x1")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "1x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "xx11",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 6usize)?,
                "0xxxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 2usize)?,
                "00",
            )
        {
            let size_slice = reader.extract_slice(30usize, 2usize)?;
            let V_slice = reader.extract_slice(26usize, 1usize)?;
            let opc_slice = reader.extract_slice(22usize, 2usize)?;
            let imm9_slice = reader.extract_slice(12usize, 9usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_offset_normal(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_offset_normal(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_normal(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_normal(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_normal(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_offset_normal(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_offset_normal(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_normal(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_normal(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_normal(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "1x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "1x")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_offset_normal(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_offset_normal(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_normal(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_normal(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_normal(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_normal(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_offset_normal(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_offset_normal(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_offset_normal(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_simdfp_immediate_signed_offset_normal(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_normal(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_normal(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_normal(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_normal(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "x1")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "1x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "xx10",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "11")
        {
            let opc_slice = reader.extract_slice(30usize, 2usize)?;
            let V_slice = reader.extract_slice(26usize, 1usize)?;
            let L_slice = reader.extract_slice(22usize, 1usize)?;
            let imm7_slice = reader.extract_slice(15usize, 7usize)?;
            let Rt2_slice = reader.extract_slice(10usize, 5usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&opc_slice, "11") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_simdfp_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_simdfp_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_general_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_general_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_simdfp_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_simdfp_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_general_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_tags_mcsettaganddatapairpre(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_simdfp_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_simdfp_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_general_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_general_pre_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "xx10",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "10")
        {
            let opc_slice = reader.extract_slice(30usize, 2usize)?;
            let V_slice = reader.extract_slice(26usize, 1usize)?;
            let L_slice = reader.extract_slice(22usize, 1usize)?;
            let imm7_slice = reader.extract_slice(15usize, 7usize)?;
            let Rt2_slice = reader.extract_slice(10usize, 5usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&opc_slice, "11") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_simdfp_offset(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_simdfp_offset(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_general_offset(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_general_offset(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_simdfp_offset(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_simdfp_offset(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_general_offset(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_tags_mcsettaganddatapair(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_simdfp_offset(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_simdfp_offset(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_general_offset(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_general_offset(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "xx10",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "01")
        {
            let opc_slice = reader.extract_slice(30usize, 2usize)?;
            let V_slice = reader.extract_slice(26usize, 1usize)?;
            let L_slice = reader.extract_slice(22usize, 1usize)?;
            let imm7_slice = reader.extract_slice(15usize, 7usize)?;
            let Rt2_slice = reader.extract_slice(10usize, 5usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&opc_slice, "11") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_simdfp_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_simdfp_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_general_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_general_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_simdfp_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_simdfp_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_general_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_tags_mcsettaganddatapairpost(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_simdfp_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_simdfp_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_general_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_general_post_idx(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "xx10",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "00")
        {
            let opc_slice = reader.extract_slice(30usize, 2usize)?;
            let V_slice = reader.extract_slice(26usize, 1usize)?;
            let L_slice = reader.extract_slice(22usize, 1usize)?;
            let imm7_slice = reader.extract_slice(15usize, 7usize)?;
            let Rt2_slice = reader.extract_slice(10usize, 5usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&opc_slice, "11") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_simdfp_no_alloc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_simdfp_no_alloc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_general_no_alloc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_general_no_alloc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_simdfp_no_alloc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_simdfp_no_alloc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_simdfp_no_alloc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_simdfp_no_alloc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_general_no_alloc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_pair_general_no_alloc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "xx01",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
        {
            let opc_slice = reader.extract_slice(30usize, 2usize)?;
            let V_slice = reader.extract_slice(26usize, 1usize)?;
            let imm19_slice = reader.extract_slice(5usize, 19usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&opc_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "11")
                && decode::BitReader::match_bits(&V_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_literal_general(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_literal_simdfp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&V_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_literal_general(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_literal_simdfp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&V_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_literal_general(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_literal_simdfp(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&V_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_literal_general(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "xx01",
        ) && decode::BitReader::match_bits(&reader.extract_slice(26usize, 1usize)?, "0")
            && decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "1x",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 6usize)?,
                "0xxxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 2usize)?,
                "00",
            )
        {
            let size_slice = reader.extract_slice(30usize, 2usize)?;
            let opc_slice = reader.extract_slice(22usize, 2usize)?;
            let imm9_slice = reader.extract_slice(12usize, 9usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_lda_stl(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_lda_stl(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_lda_stl(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_lda_stl(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_lda_stl(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_lda_stl(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_lda_stl(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_lda_stl(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_lda_stl(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_lda_stl(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_lda_stl(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_lda_stl(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_single_general_immediate_signed_offset_lda_stl(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "xx00",
        ) && decode::BitReader::match_bits(&reader.extract_slice(26usize, 1usize)?, "0")
            && decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "0x",
            )
        {
            let size_slice = reader.extract_slice(30usize, 2usize)?;
            let o2_slice = reader.extract_slice(23usize, 1usize)?;
            let L_slice = reader.extract_slice(22usize, 1usize)?;
            let o1_slice = reader.extract_slice(21usize, 1usize)?;
            let Rs_slice = reader.extract_slice(16usize, 5usize)?;
            let o0_slice = reader.extract_slice(15usize, 1usize)?;
            let Rt2_slice = reader.extract_slice(10usize, 5usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "1")
                && decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_cas_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "0")
                && decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_cas_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_ordered(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_ordered(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "1")
                && decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_cas_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "0")
                && decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_cas_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_ordered(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_ordered(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_exclusive_pair(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_exclusive_pair(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_exclusive_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_exclusive_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_exclusive_pair(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_exclusive_pair(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_exclusive_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_exclusive_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "1")
                && decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_cas_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "0")
                && decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_cas_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_ordered(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_ordered(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "1")
                && decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_cas_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "0")
                && decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_cas_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_ordered(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_ordered(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_exclusive_pair(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_exclusive_pair(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_exclusive_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_exclusive_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_exclusive_pair(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_exclusive_pair(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_exclusive_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_exclusive_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "1")
                && decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_cas_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "0")
                && decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_cas_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_ordered(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_ordered(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "1")
                && decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_cas_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "0")
                && decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_cas_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_ordered(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_ordered(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "1")
                && decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_cas_pair(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "0")
                && decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_cas_pair(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_exclusive_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_exclusive_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "1")
                && decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_cas_pair(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "0")
                && decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_cas_pair(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_exclusive_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "01")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_exclusive_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "1")
                && decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_cas_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "0")
                && decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_cas_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_ordered(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_ordered(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "1")
                && decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_cas_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "0")
                && decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_cas_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_ordered(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_ordered(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "1")
                && decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_cas_pair(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "0")
                && decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_cas_pair(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_exclusive_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_exclusive_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "1")
                && decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_cas_pair(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "0")
                && decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_atomicops_cas_pair(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_exclusive_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "00")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_exclusive_single(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && !decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&o1_slice, "1")
                && !decode::BitReader::match_bits(&Rt2_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "1x00",
        ) && decode::BitReader::match_bits(&reader.extract_slice(26usize, 1usize)?, "1")
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "1101",
        ) && decode::BitReader::match_bits(&reader.extract_slice(26usize, 1usize)?, "0")
            && decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "1x",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 6usize)?,
                "1xxxxx",
            )
        {
            let opc_slice = reader.extract_slice(22usize, 2usize)?;
            let imm9_slice = reader.extract_slice(12usize, 9usize)?;
            let op2_slice = reader.extract_slice(10usize, 2usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&opc_slice, "11")
                && decode::BitReader::match_bits(&imm9_slice, "000000000")
                && decode::BitReader::match_bits(&op2_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_tags_mcgettagarray(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "11")
                && !decode::BitReader::match_bits(&imm9_slice, "000000000")
                && decode::BitReader::match_bits(&op2_slice, "00")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "11")
                && decode::BitReader::match_bits(&op2_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_tags_mcsettagpairandzerodatapre(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "11")
                && decode::BitReader::match_bits(&op2_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_tags_mcsettagpairandzerodata(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "11")
                && decode::BitReader::match_bits(&op2_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_tags_mcsettagpairandzerodatapost(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&imm9_slice, "000000000")
                && decode::BitReader::match_bits(&op2_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_tags_mcsettagarray(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && !decode::BitReader::match_bits(&imm9_slice, "000000000")
                && decode::BitReader::match_bits(&op2_slice, "00")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&op2_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_tags_mcsettagpairpre(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&op2_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_tags_mcsettagpair(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&op2_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_tags_mcsettagpairpost(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&op2_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_tags_mcsettagandzerodatapre(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&op2_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_tags_mcsettagandzerodata(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&op2_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_tags_mcsettagandzerodatapost(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&op2_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_tags_mcgettag(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&imm9_slice, "000000000")
                && decode::BitReader::match_bits(&op2_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_tags_mcsettagandzeroarray(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&op2_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_tags_mcsettagpre(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&op2_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_tags_mcsettag(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&op2_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_tags_mcsettagpost(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0x00",
        ) && decode::BitReader::match_bits(&reader.extract_slice(26usize, 1usize)?, "1")
            && decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "x0",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 6usize)?,
                "xxxxx1",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0x00",
        ) && decode::BitReader::match_bits(&reader.extract_slice(26usize, 1usize)?, "1")
            && decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "x0",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 6usize)?,
                "xxxx1x",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0x00",
        ) && decode::BitReader::match_bits(&reader.extract_slice(26usize, 1usize)?, "1")
            && decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "x0",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 6usize)?,
                "xxx1xx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0x00",
        ) && decode::BitReader::match_bits(&reader.extract_slice(26usize, 1usize)?, "1")
            && decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "x0",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 6usize)?,
                "xx1xxx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0x00",
        ) && decode::BitReader::match_bits(&reader.extract_slice(26usize, 1usize)?, "1")
            && decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "x0",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 6usize)?,
                "x1xxxx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0x00",
        ) && decode::BitReader::match_bits(&reader.extract_slice(26usize, 1usize)?, "1")
            && decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "11",
            )
        {
            let Q_slice = reader.extract_slice(30usize, 1usize)?;
            let L_slice = reader.extract_slice(22usize, 1usize)?;
            let R_slice = reader.extract_slice(21usize, 1usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let opcode_slice = reader.extract_slice(13usize, 3usize)?;
            let S_slice = reader.extract_slice(12usize, 1usize)?;
            let size_slice = reader.extract_slice(10usize, 2usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "111")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "110")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&size_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&size_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "011")
                && decode::BitReader::match_bits(&size_slice, "x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "010")
                && decode::BitReader::match_bits(&size_slice, "x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "111")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "110")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&size_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&size_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "011")
                && decode::BitReader::match_bits(&size_slice, "x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "010")
                && decode::BitReader::match_bits(&size_slice, "x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "111")
                && decode::BitReader::match_bits(&S_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "110")
                && decode::BitReader::match_bits(&S_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "11")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&size_slice, "10")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "11")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&size_slice, "10")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "011")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "010")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "111")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "110")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&size_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&size_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "011")
                && decode::BitReader::match_bits(&size_slice, "x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "010")
                && decode::BitReader::match_bits(&size_slice, "x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "111")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "110")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&size_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&size_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "011")
                && decode::BitReader::match_bits(&size_slice, "x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "010")
                && decode::BitReader::match_bits(&size_slice, "x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "111")
                && decode::BitReader::match_bits(&S_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "110")
                && decode::BitReader::match_bits(&S_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "11")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&size_slice, "10")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&size_slice, "1x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "011")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "010")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&size_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&size_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "011")
                && decode::BitReader::match_bits(&size_slice, "x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "010")
                && decode::BitReader::match_bits(&size_slice, "x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&size_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&size_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "011")
                && decode::BitReader::match_bits(&size_slice, "x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "010")
                && decode::BitReader::match_bits(&size_slice, "x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "11")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&size_slice, "10")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "11")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&size_slice, "10")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "011")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "010")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&size_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&size_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "011")
                && decode::BitReader::match_bits(&size_slice, "x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "010")
                && decode::BitReader::match_bits(&size_slice, "x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&size_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&size_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "011")
                && decode::BitReader::match_bits(&size_slice, "x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "010")
                && decode::BitReader::match_bits(&size_slice, "x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "11")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&size_slice, "10")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&size_slice, "1x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "011")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "010")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0x00",
        ) && decode::BitReader::match_bits(&reader.extract_slice(26usize, 1usize)?, "1")
            && decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "10",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 6usize)?,
                "x00000",
            )
        {
            let Q_slice = reader.extract_slice(30usize, 1usize)?;
            let L_slice = reader.extract_slice(22usize, 1usize)?;
            let R_slice = reader.extract_slice(21usize, 1usize)?;
            let opcode_slice = reader.extract_slice(13usize, 3usize)?;
            let S_slice = reader.extract_slice(12usize, 1usize)?;
            let size_slice = reader.extract_slice(10usize, 2usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "111")
                && decode::BitReader::match_bits(&S_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "111")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "110")
                && decode::BitReader::match_bits(&S_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "110")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "11")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&size_slice, "10")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&size_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "11")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&size_slice, "10")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&size_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "011")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "011")
                && decode::BitReader::match_bits(&size_slice, "x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "010")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "010")
                && decode::BitReader::match_bits(&size_slice, "x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "111")
                && decode::BitReader::match_bits(&S_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "111")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "110")
                && decode::BitReader::match_bits(&S_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "110")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "11")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&size_slice, "10")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&size_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&size_slice, "1x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&size_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "011")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "011")
                && decode::BitReader::match_bits(&size_slice, "x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "010")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "010")
                && decode::BitReader::match_bits(&size_slice, "x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "11")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&size_slice, "10")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&size_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "11")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&size_slice, "10")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&size_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "011")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "011")
                && decode::BitReader::match_bits(&size_slice, "x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "010")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "010")
                && decode::BitReader::match_bits(&size_slice, "x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "11")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&size_slice, "10")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "101")
                && decode::BitReader::match_bits(&size_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&size_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&size_slice, "1x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "100")
                && decode::BitReader::match_bits(&size_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "011")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "011")
                && decode::BitReader::match_bits(&size_slice, "x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "010")
                && decode::BitReader::match_bits(&size_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "010")
                && decode::BitReader::match_bits(&size_slice, "x0")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&R_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_single_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0x00",
        ) && decode::BitReader::match_bits(&reader.extract_slice(26usize, 1usize)?, "1")
            && decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "0x",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 6usize)?,
                "1xxxxx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0x00",
        ) && decode::BitReader::match_bits(&reader.extract_slice(26usize, 1usize)?, "1")
            && decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "01",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 6usize)?,
                "0xxxxx",
            )
        {
            let Q_slice = reader.extract_slice(30usize, 1usize)?;
            let L_slice = reader.extract_slice(22usize, 1usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let opcode_slice = reader.extract_slice(12usize, 4usize)?;
            let size_slice = reader.extract_slice(10usize, 2usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "1010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "1000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "0111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "0110")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "0100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "0010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "0000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "1010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "1000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "0111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "0110")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "0100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "0010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "0000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11xx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "1010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "1000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "0111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "0110")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "0100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "0010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "0000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "1010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "1000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "0111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "0110")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "0100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "0010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && !decode::BitReader::match_bits(&Rm_slice, "11111")
                && decode::BitReader::match_bits(&opcode_slice, "0000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_post_inc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11xx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(28usize, 4usize)?,
            "0x00",
        ) && decode::BitReader::match_bits(&reader.extract_slice(26usize, 1usize)?, "1")
            && decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "00",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 6usize)?,
                "000000",
            )
        {
            let Q_slice = reader.extract_slice(30usize, 1usize)?;
            let L_slice = reader.extract_slice(22usize, 1usize)?;
            let opcode_slice = reader.extract_slice(12usize, 4usize)?;
            let size_slice = reader.extract_slice(10usize, 2usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "11xx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "1000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0110")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "1")
                && decode::BitReader::match_bits(&opcode_slice, "0000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "11xx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "1000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0111")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0110")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0101")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0100")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0010")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&L_slice, "0")
                && decode::BitReader::match_bits(&opcode_slice, "0000")
            {
                match decode::generated::decode_blocks::decode_aarch64_memory_vector_multiple_no_wb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else {
            return Ok(common::types::Instruction::UNDEF);
        }
    } else if decode::BitReader::match_bits(
        &reader.extract_slice(24usize, 5usize)?,
        "101xx",
    ) {
        if decode::BitReader::match_bits(&reader.extract_slice(29usize, 3usize)?, "x01")
            && decode::BitReader::match_bits(
                &reader.extract_slice(12usize, 14usize)?,
                "1xxxxxxxxxxxxx",
            )
        {
            let b5_slice = reader.extract_slice(31usize, 1usize)?;
            let op_slice = reader.extract_slice(24usize, 1usize)?;
            let b40_slice = reader.extract_slice(19usize, 5usize)?;
            let imm14_slice = reader.extract_slice(5usize, 14usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&op_slice, "1") {
                match decode::generated::decode_blocks::decode_aarch64_branch_conditional_test(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0") {
                match decode::generated::decode_blocks::decode_aarch64_branch_conditional_test(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "x01",
        )
            && decode::BitReader::match_bits(
                &reader.extract_slice(12usize, 14usize)?,
                "0xxxxxxxxxxxxx",
            )
        {
            let sf_slice = reader.extract_slice(31usize, 1usize)?;
            let op_slice = reader.extract_slice(24usize, 1usize)?;
            let imm19_slice = reader.extract_slice(5usize, 19usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_branch_conditional_compare(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_branch_conditional_compare(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_branch_conditional_compare(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_branch_conditional_compare(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "x00",
        ) {
            let op_slice = reader.extract_slice(31usize, 1usize)?;
            let imm26_slice = reader.extract_slice(0usize, 26usize)?;
            if decode::BitReader::match_bits(&op_slice, "1") {
                match decode::generated::decode_blocks::decode_aarch64_branch_unconditional_immediate(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0") {
                match decode::generated::decode_blocks::decode_aarch64_branch_unconditional_immediate(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "110",
        )
            && decode::BitReader::match_bits(
                &reader.extract_slice(12usize, 14usize)?,
                "1xxxxxxxxxxxxx",
            )
        {
            let opc_slice = reader.extract_slice(21usize, 4usize)?;
            let op2_slice = reader.extract_slice(16usize, 5usize)?;
            let op3_slice = reader.extract_slice(10usize, 6usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let op4_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&opc_slice, "11xx")
                && decode::BitReader::match_bits(&op2_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "101x")
                && decode::BitReader::match_bits(&op2_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "1001")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "1xxxxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "1001")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "01xxxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "1001")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "001xxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "1001")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "0001xx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "1001")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000011")
            {
                match decode::generated::decode_blocks::decode_aarch64_branch_unconditional_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "1001")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000010")
            {
                match decode::generated::decode_blocks::decode_aarch64_branch_unconditional_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "1001")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "00000x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "1000")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "1xxxxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "1000")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "01xxxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "1000")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "001xxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "1000")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "0001xx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "1000")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000011")
            {
                match decode::generated::decode_blocks::decode_aarch64_branch_unconditional_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "1000")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000010")
            {
                match decode::generated::decode_blocks::decode_aarch64_branch_unconditional_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "1000")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "00000x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "011x")
                && decode::BitReader::match_bits(&op2_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0101")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000000")
                && decode::BitReader::match_bits(&Rn_slice, "11111")
                && decode::BitReader::match_bits(&op4_slice, "00000")
            {
                match decode::generated::decode_blocks::decode_aarch64_branch_unconditional_dret(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "0101")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000000")
                && decode::BitReader::match_bits(&Rn_slice, "11111")
                && !decode::BitReader::match_bits(&op4_slice, "00000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0101")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000000")
                && !decode::BitReader::match_bits(&Rn_slice, "11111")
                && decode::BitReader::match_bits(&op4_slice, "00000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0101")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000000")
                && !decode::BitReader::match_bits(&Rn_slice, "11111")
                && !decode::BitReader::match_bits(&op4_slice, "00000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0101")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && !decode::BitReader::match_bits(&op3_slice, "000000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0100")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "1xxxxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0100")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "01xxxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0100")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "001xxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0100")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "0001xx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0100")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000011")
                && decode::BitReader::match_bits(&Rn_slice, "11111")
                && decode::BitReader::match_bits(&op4_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_branch_unconditional_eret(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "0100")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000011")
                && decode::BitReader::match_bits(&Rn_slice, "11111")
                && !decode::BitReader::match_bits(&op4_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0100")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000011")
                && !decode::BitReader::match_bits(&Rn_slice, "11111")
                && decode::BitReader::match_bits(&op4_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0100")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000011")
                && !decode::BitReader::match_bits(&Rn_slice, "11111")
                && !decode::BitReader::match_bits(&op4_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0100")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000010")
                && decode::BitReader::match_bits(&Rn_slice, "11111")
                && decode::BitReader::match_bits(&op4_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_branch_unconditional_eret(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "0100")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000010")
                && decode::BitReader::match_bits(&Rn_slice, "11111")
                && !decode::BitReader::match_bits(&op4_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0100")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000010")
                && !decode::BitReader::match_bits(&Rn_slice, "11111")
                && decode::BitReader::match_bits(&op4_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0100")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000010")
                && !decode::BitReader::match_bits(&Rn_slice, "11111")
                && !decode::BitReader::match_bits(&op4_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0100")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0100")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000000")
                && decode::BitReader::match_bits(&Rn_slice, "11111")
                && decode::BitReader::match_bits(&op4_slice, "00000")
            {
                match decode::generated::decode_blocks::decode_aarch64_branch_unconditional_eret(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "0100")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000000")
                && decode::BitReader::match_bits(&Rn_slice, "11111")
                && !decode::BitReader::match_bits(&op4_slice, "00000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0100")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000000")
                && !decode::BitReader::match_bits(&Rn_slice, "11111")
                && decode::BitReader::match_bits(&op4_slice, "00000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0100")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000000")
                && !decode::BitReader::match_bits(&Rn_slice, "11111")
                && !decode::BitReader::match_bits(&op4_slice, "00000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0011")
                && decode::BitReader::match_bits(&op2_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0010")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "1xxxxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0010")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "01xxxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0010")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "001xxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0010")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "0001xx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0010")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000011")
                && decode::BitReader::match_bits(&Rn_slice, "11111")
                && decode::BitReader::match_bits(&op4_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_branch_unconditional_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "0010")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000011")
                && !decode::BitReader::match_bits(&Rn_slice, "11111")
                && !decode::BitReader::match_bits(&op4_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0010")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000010")
                && decode::BitReader::match_bits(&Rn_slice, "11111")
                && decode::BitReader::match_bits(&op4_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_branch_unconditional_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "0010")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000010")
                && !decode::BitReader::match_bits(&Rn_slice, "11111")
                && !decode::BitReader::match_bits(&op4_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0010")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0010")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000000")
                && decode::BitReader::match_bits(&op4_slice, "00000")
            {
                match decode::generated::decode_blocks::decode_aarch64_branch_unconditional_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "0010")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000000")
                && !decode::BitReader::match_bits(&op4_slice, "00000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0001")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "1xxxxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0001")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "01xxxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0001")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "001xxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0001")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "0001xx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0001")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000011")
                && decode::BitReader::match_bits(&op4_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_branch_unconditional_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "0001")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000011")
                && !decode::BitReader::match_bits(&op4_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0001")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000010")
                && decode::BitReader::match_bits(&op4_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_branch_unconditional_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "0001")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000010")
                && !decode::BitReader::match_bits(&op4_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0001")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0001")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000000")
                && decode::BitReader::match_bits(&op4_slice, "00000")
            {
                match decode::generated::decode_blocks::decode_aarch64_branch_unconditional_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "0001")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000000")
                && !decode::BitReader::match_bits(&op4_slice, "00000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0000")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "1xxxxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0000")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "01xxxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0000")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "001xxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0000")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "0001xx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0000")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000011")
                && decode::BitReader::match_bits(&op4_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_branch_unconditional_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "0000")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000011")
                && !decode::BitReader::match_bits(&op4_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0000")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000010")
                && decode::BitReader::match_bits(&op4_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_branch_unconditional_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "0000")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000010")
                && !decode::BitReader::match_bits(&op4_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0000")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000001")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0000")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000000")
                && decode::BitReader::match_bits(&op4_slice, "00000")
            {
                match decode::generated::decode_blocks::decode_aarch64_branch_unconditional_register(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "0000")
                && decode::BitReader::match_bits(&op2_slice, "11111")
                && decode::BitReader::match_bits(&op3_slice, "000000")
                && !decode::BitReader::match_bits(&op4_slice, "00000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if !decode::BitReader::match_bits(&op2_slice, "11111") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "110",
        )
            && decode::BitReader::match_bits(
                &reader.extract_slice(12usize, 14usize)?,
                "0100x1xxxxxxxx",
            )
        {
            let L_slice = reader.extract_slice(21usize, 1usize)?;
            let o0_slice = reader.extract_slice(19usize, 1usize)?;
            let op1_slice = reader.extract_slice(16usize, 3usize)?;
            let CRn_slice = reader.extract_slice(12usize, 4usize)?;
            let CRm_slice = reader.extract_slice(8usize, 4usize)?;
            let op2_slice = reader.extract_slice(5usize, 3usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&L_slice, "1") {
                match decode::generated::decode_blocks::decode_aarch64_system_register_system(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0") {
                match decode::generated::decode_blocks::decode_aarch64_system_register_system(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "110",
        )
            && decode::BitReader::match_bits(
                &reader.extract_slice(12usize, 14usize)?,
                "0100x01xxxxxxx",
            )
        {
            let L_slice = reader.extract_slice(21usize, 1usize)?;
            let op1_slice = reader.extract_slice(16usize, 3usize)?;
            let CRn_slice = reader.extract_slice(12usize, 4usize)?;
            let CRm_slice = reader.extract_slice(8usize, 4usize)?;
            let op2_slice = reader.extract_slice(5usize, 3usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&L_slice, "1") {
                match decode::generated::decode_blocks::decode_aarch64_system_sysops(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&L_slice, "0") {
                match decode::generated::decode_blocks::decode_aarch64_system_sysops(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "110",
        )
            && decode::BitReader::match_bits(
                &reader.extract_slice(12usize, 14usize)?,
                "0100000xxx0100",
            )
        {
            let op1_slice = reader.extract_slice(16usize, 3usize)?;
            let CRm_slice = reader.extract_slice(8usize, 4usize)?;
            let op2_slice = reader.extract_slice(5usize, 3usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&op1_slice, "000")
                && decode::BitReader::match_bits(&op2_slice, "010")
                && decode::BitReader::match_bits(&Rt_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_flags_axflag(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op1_slice, "000")
                && decode::BitReader::match_bits(&op2_slice, "001")
                && decode::BitReader::match_bits(&Rt_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_flags_xaflag(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op1_slice, "000")
                && decode::BitReader::match_bits(&op2_slice, "000")
                && decode::BitReader::match_bits(&Rt_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_flags_cfinv(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&Rt_slice, "11111") {
                match decode::generated::decode_blocks::decode_aarch64_system_register_cpsr(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if !decode::BitReader::match_bits(&Rt_slice, "11111") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "110",
        )
            && decode::BitReader::match_bits(
                &reader.extract_slice(12usize, 14usize)?,
                "01000000110011",
            )
        {
            let CRm_slice = reader.extract_slice(8usize, 4usize)?;
            let op2_slice = reader.extract_slice(5usize, 3usize)?;
            let Rt_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&CRm_slice, "1xxx")
                && decode::BitReader::match_bits(&op2_slice, "011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&CRm_slice, "0100")
                && decode::BitReader::match_bits(&op2_slice, "100")
                && decode::BitReader::match_bits(&Rt_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_barriers_pssbb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "01xx")
                && decode::BitReader::match_bits(&op2_slice, "011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&CRm_slice, "001x")
                && decode::BitReader::match_bits(&op2_slice, "011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&CRm_slice, "0001")
                && decode::BitReader::match_bits(&op2_slice, "011")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&CRm_slice, "0000")
                && decode::BitReader::match_bits(&op2_slice, "100")
                && decode::BitReader::match_bits(&Rt_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_barriers_ssbb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if !decode::BitReader::match_bits(&CRm_slice, "0x00")
                && decode::BitReader::match_bits(&op2_slice, "100")
                && decode::BitReader::match_bits(&Rt_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_barriers_dsb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op2_slice, "111")
                && decode::BitReader::match_bits(&Rt_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_barriers_sb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op2_slice, "111")
                && !decode::BitReader::match_bits(&Rt_slice, "11111")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op2_slice, "110")
                && decode::BitReader::match_bits(&Rt_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_barriers_isb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op2_slice, "101")
                && decode::BitReader::match_bits(&Rt_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_barriers_dmb(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op2_slice, "010")
                && decode::BitReader::match_bits(&Rt_slice, "11111")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_monitors(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op2_slice, "001") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op2_slice, "000") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "110",
        )
            && decode::BitReader::match_bits(
                &reader.extract_slice(12usize, 14usize)?,
                "01000000110010",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(0usize, 5usize)?,
                "11111",
            )
        {
            let CRm_slice = reader.extract_slice(8usize, 4usize)?;
            let op2_slice = reader.extract_slice(5usize, 3usize)?;
            if decode::BitReader::match_bits(&CRm_slice, "0100")
                && decode::BitReader::match_bits(&op2_slice, "xx0")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_hints(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "0011")
                && decode::BitReader::match_bits(&op2_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_autib_hint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "0011")
                && decode::BitReader::match_bits(&op2_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_autib_hint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "0011")
                && decode::BitReader::match_bits(&op2_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_autia_hint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "0011")
                && decode::BitReader::match_bits(&op2_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_autia_hint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "0011")
                && decode::BitReader::match_bits(&op2_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_pacib_hint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "0011")
                && decode::BitReader::match_bits(&op2_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_pacib_hint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "0011")
                && decode::BitReader::match_bits(&op2_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_pacia_hint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "0011")
                && decode::BitReader::match_bits(&op2_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_pacia_hint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "0010")
                && decode::BitReader::match_bits(&op2_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_hints(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "0010")
                && decode::BitReader::match_bits(&op2_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_hints(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "0010")
                && decode::BitReader::match_bits(&op2_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_hints(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "0010")
                && decode::BitReader::match_bits(&op2_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_hints(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "0001")
                && decode::BitReader::match_bits(&op2_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_autib_hint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "0001")
                && decode::BitReader::match_bits(&op2_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_autia_hint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "0001")
                && decode::BitReader::match_bits(&op2_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_pacib_hint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "0001")
                && decode::BitReader::match_bits(&op2_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_pacia_hint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "0000")
                && decode::BitReader::match_bits(&op2_slice, "111")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_pac_strip_hint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "0000")
                && decode::BitReader::match_bits(&op2_slice, "110")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_hints(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "0000")
                && decode::BitReader::match_bits(&op2_slice, "101")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_hints(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "0000")
                && decode::BitReader::match_bits(&op2_slice, "100")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_hints(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "0000")
                && decode::BitReader::match_bits(&op2_slice, "011")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_hints(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "0000")
                && decode::BitReader::match_bits(&op2_slice, "010")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_hints(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "0000")
                && decode::BitReader::match_bits(&op2_slice, "001")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_hints(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&CRm_slice, "0000")
                && decode::BitReader::match_bits(&op2_slice, "000")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_hints(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                match decode::generated::decode_blocks::decode_aarch64_system_hints(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "110",
        )
            && decode::BitReader::match_bits(
                &reader.extract_slice(12usize, 14usize)?,
                "00xxxxxxxxxxxx",
            )
        {
            let opc_slice = reader.extract_slice(21usize, 3usize)?;
            let imm16_slice = reader.extract_slice(5usize, 16usize)?;
            let op2_slice = reader.extract_slice(2usize, 3usize)?;
            let LL_slice = reader.extract_slice(0usize, 2usize)?;
            if decode::BitReader::match_bits(&opc_slice, "111")
                && decode::BitReader::match_bits(&op2_slice, "000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "110")
                && decode::BitReader::match_bits(&op2_slice, "000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "101")
                && decode::BitReader::match_bits(&op2_slice, "000")
                && decode::BitReader::match_bits(&LL_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_exceptions_debug_exception(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "101")
                && decode::BitReader::match_bits(&op2_slice, "000")
                && decode::BitReader::match_bits(&LL_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_exceptions_debug_exception(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "101")
                && decode::BitReader::match_bits(&op2_slice, "000")
                && decode::BitReader::match_bits(&LL_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_exceptions_debug_exception(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "101")
                && decode::BitReader::match_bits(&op2_slice, "000")
                && decode::BitReader::match_bits(&LL_slice, "00")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "100")
                && decode::BitReader::match_bits(&op2_slice, "000")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "011")
                && decode::BitReader::match_bits(&op2_slice, "000")
                && decode::BitReader::match_bits(&LL_slice, "1x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "011")
                && decode::BitReader::match_bits(&op2_slice, "000")
                && decode::BitReader::match_bits(&LL_slice, "01")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "010")
                && decode::BitReader::match_bits(&op2_slice, "000")
                && decode::BitReader::match_bits(&LL_slice, "1x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "010")
                && decode::BitReader::match_bits(&op2_slice, "000")
                && decode::BitReader::match_bits(&LL_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_exceptions_debug_halt(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "010")
                && decode::BitReader::match_bits(&op2_slice, "000")
                && decode::BitReader::match_bits(&LL_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "001")
                && decode::BitReader::match_bits(&op2_slice, "000")
                && decode::BitReader::match_bits(&LL_slice, "1x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "001")
                && decode::BitReader::match_bits(&op2_slice, "000")
                && decode::BitReader::match_bits(&LL_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_exceptions_debug_breakpoint(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "001")
                && decode::BitReader::match_bits(&op2_slice, "000")
                && decode::BitReader::match_bits(&LL_slice, "x1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "000")
                && decode::BitReader::match_bits(&op2_slice, "000")
                && decode::BitReader::match_bits(&LL_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_exceptions_runtime_smc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "000")
                && decode::BitReader::match_bits(&op2_slice, "000")
                && decode::BitReader::match_bits(&LL_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_exceptions_runtime_hvc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "000")
                && decode::BitReader::match_bits(&op2_slice, "000")
                && decode::BitReader::match_bits(&LL_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_system_exceptions_runtime_svc(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "000")
                && decode::BitReader::match_bits(&op2_slice, "000")
                && decode::BitReader::match_bits(&LL_slice, "00")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op2_slice, "1xx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op2_slice, "01x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op2_slice, "001") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "010",
        )
            && decode::BitReader::match_bits(
                &reader.extract_slice(12usize, 14usize)?,
                "0xxxxxxxxxxxxx",
            )
        {
            let o1_slice = reader.extract_slice(24usize, 1usize)?;
            let imm19_slice = reader.extract_slice(5usize, 19usize)?;
            let o0_slice = reader.extract_slice(4usize, 1usize)?;
            let cond_slice = reader.extract_slice(0usize, 4usize)?;
            if decode::BitReader::match_bits(&o1_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&o1_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_branch_conditional_cond(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else {
            return Ok(common::types::Instruction::UNDEF);
        }
    } else if decode::BitReader::match_bits(
        &reader.extract_slice(24usize, 5usize)?,
        "100xx",
    ) {
        if decode::BitReader::match_bits(
            &reader.extract_slice(23usize, 3usize)?,
            "111",
        ) {
            let sf_slice = reader.extract_slice(31usize, 1usize)?;
            let op21_slice = reader.extract_slice(29usize, 2usize)?;
            let N_slice = reader.extract_slice(22usize, 1usize)?;
            let o0_slice = reader.extract_slice(21usize, 1usize)?;
            let Rm_slice = reader.extract_slice(16usize, 5usize)?;
            let imms_slice = reader.extract_slice(10usize, 6usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op21_slice, "00")
                && decode::BitReader::match_bits(&N_slice, "1")
                && decode::BitReader::match_bits(&o0_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_ins_ext_extract_immediate(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&N_slice, "0")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op21_slice, "00")
                && decode::BitReader::match_bits(&N_slice, "0")
                && decode::BitReader::match_bits(&o0_slice, "0")
                && decode::BitReader::match_bits(&imms_slice, "0xxxxx")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_ins_ext_extract_immediate(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&N_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&imms_slice, "1xxxxx")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op21_slice, "1x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op21_slice, "00")
                && decode::BitReader::match_bits(&o0_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op21_slice, "x1") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(23usize, 3usize)?,
            "110",
        ) {
            let sf_slice = reader.extract_slice(31usize, 1usize)?;
            let opc_slice = reader.extract_slice(29usize, 2usize)?;
            let N_slice = reader.extract_slice(22usize, 1usize)?;
            let immr_slice = reader.extract_slice(16usize, 6usize)?;
            let imms_slice = reader.extract_slice(10usize, 6usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&N_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_bitfield(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&N_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_bitfield(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&N_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_bitfield(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&N_slice, "0")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&N_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_bitfield(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&N_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_bitfield(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&N_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_bitfield(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&N_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "11") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(23usize, 3usize)?,
            "101",
        ) {
            let sf_slice = reader.extract_slice(31usize, 1usize)?;
            let opc_slice = reader.extract_slice(29usize, 2usize)?;
            let hw_slice = reader.extract_slice(21usize, 2usize)?;
            let imm16_slice = reader.extract_slice(5usize, 16usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_ins_ext_insert_movewide(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_ins_ext_insert_movewide(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_ins_ext_insert_movewide(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "11")
                && decode::BitReader::match_bits(&hw_slice, "0x")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_ins_ext_insert_movewide(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&hw_slice, "0x")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_ins_ext_insert_movewide(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&hw_slice, "0x")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_ins_ext_insert_movewide(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&hw_slice, "1x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "01") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(23usize, 3usize)?,
            "100",
        ) {
            let sf_slice = reader.extract_slice(31usize, 1usize)?;
            let opc_slice = reader.extract_slice(29usize, 2usize)?;
            let N_slice = reader.extract_slice(22usize, 1usize)?;
            let immr_slice = reader.extract_slice(16usize, 6usize)?;
            let imms_slice = reader.extract_slice(10usize, 6usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "11")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_logical_immediate(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "10")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_logical_immediate(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "01")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_logical_immediate(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&opc_slice, "00")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_logical_immediate(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "11")
                && decode::BitReader::match_bits(&N_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_logical_immediate(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&N_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_logical_immediate(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "01")
                && decode::BitReader::match_bits(&N_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_logical_immediate(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&opc_slice, "00")
                && decode::BitReader::match_bits(&N_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_logical_immediate(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&N_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(23usize, 3usize)?,
            "011",
        ) {
            let sf_slice = reader.extract_slice(31usize, 1usize)?;
            let op_slice = reader.extract_slice(30usize, 1usize)?;
            let S_slice = reader.extract_slice(29usize, 1usize)?;
            let o2_slice = reader.extract_slice(22usize, 1usize)?;
            let uimm6_slice = reader.extract_slice(16usize, 6usize)?;
            let op3_slice = reader.extract_slice(14usize, 2usize)?;
            let uimm4_slice = reader.extract_slice(10usize, 4usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&o2_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_tags_mcsubtag(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&o2_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_tags_mcaddtag(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "0")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&o2_slice, "0")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&o2_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(23usize, 3usize)?,
            "010",
        ) {
            let sf_slice = reader.extract_slice(31usize, 1usize)?;
            let op_slice = reader.extract_slice(30usize, 1usize)?;
            let S_slice = reader.extract_slice(29usize, 1usize)?;
            let sh_slice = reader.extract_slice(22usize, 1usize)?;
            let imm12_slice = reader.extract_slice(10usize, 12usize)?;
            let Rn_slice = reader.extract_slice(5usize, 5usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_immediate(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_immediate(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_immediate(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "1")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_immediate(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_immediate(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_immediate(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "1")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_immediate(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&sf_slice, "0")
                && decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
            {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_add_sub_immediate(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(23usize, 3usize)?,
            "00x",
        ) {
            let op_slice = reader.extract_slice(31usize, 1usize)?;
            let immlo_slice = reader.extract_slice(29usize, 2usize)?;
            let immhi_slice = reader.extract_slice(5usize, 19usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&op_slice, "1") {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_address_pc_rel(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0") {
                match decode::generated::decode_blocks::decode_aarch64_integer_arithmetic_address_pc_rel(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else {
            return Ok(common::types::Instruction::UNDEF);
        }
    } else if decode::BitReader::match_bits(
        &reader.extract_slice(24usize, 5usize)?,
        "0011x",
    ) {
        instruction = common::types::Instruction::UNPRED;
    } else if decode::BitReader::match_bits(
        &reader.extract_slice(24usize, 5usize)?,
        "0010x",
    ) {
        if decode::BitReader::match_bits(&reader.extract_slice(29usize, 3usize)?, "111")
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "111xxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "0",
            ) {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let size_slice = reader.extract_slice(21usize, 2usize)?;
                let imm4_slice = reader.extract_slice(16usize, 4usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11") {
                    match decode::generated::decode_blocks::decode_ST1D_Z_P_BI__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10") {
                    match decode::generated::decode_blocks::decode_ST1W_Z_P_BI__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01") {
                    match decode::generated::decode_blocks::decode_ST1H_Z_P_BI__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00") {
                    match decode::generated::decode_blocks::decode_ST1B_Z_P_BI__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if !decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(20usize, 1usize)?,
                    "1",
                )
            {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let opc_slice = reader.extract_slice(21usize, 2usize)?;
                let imm4_slice = reader.extract_slice(16usize, 4usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&opc_slice, "11")
                {
                    match decode::generated::decode_blocks::decode_ST4D_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&opc_slice, "10")
                {
                    match decode::generated::decode_blocks::decode_ST3D_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&opc_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_ST2D_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&opc_slice, "11")
                {
                    match decode::generated::decode_blocks::decode_ST4W_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&opc_slice, "10")
                {
                    match decode::generated::decode_blocks::decode_ST3W_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&opc_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_ST2W_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&opc_slice, "11")
                {
                    match decode::generated::decode_blocks::decode_ST4H_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&opc_slice, "10")
                {
                    match decode::generated::decode_blocks::decode_ST3H_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&opc_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_ST2H_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&opc_slice, "11")
                {
                    match decode::generated::decode_blocks::decode_ST4B_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&opc_slice, "10")
                {
                    match decode::generated::decode_blocks::decode_ST3B_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&opc_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_ST2B_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(20usize, 1usize)?,
                    "1",
                )
            {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let imm4_slice = reader.extract_slice(16usize, 4usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11") {
                    match decode::generated::decode_blocks::decode_STNT1D_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10") {
                    match decode::generated::decode_blocks::decode_STNT1W_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01") {
                    match decode::generated::decode_blocks::decode_STNT1H_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00") {
                    match decode::generated::decode_blocks::decode_STNT1B_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "111",
        )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "101xxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "11",
            ) {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let imm5_slice = reader.extract_slice(16usize, 5usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&msz_slice, "10") {
                    match decode::generated::decode_blocks::decode_ST1W_Z_P_AI_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01") {
                    match decode::generated::decode_blocks::decode_ST1H_Z_P_AI_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00") {
                    match decode::generated::decode_blocks::decode_ST1B_Z_P_AI_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "10",
            ) {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let imm5_slice = reader.extract_slice(16usize, 5usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11") {
                    match decode::generated::decode_blocks::decode_ST1D_Z_P_AI_D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10") {
                    match decode::generated::decode_blocks::decode_ST1W_Z_P_AI_D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01") {
                    match decode::generated::decode_blocks::decode_ST1H_Z_P_AI_D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00") {
                    match decode::generated::decode_blocks::decode_ST1B_Z_P_AI_D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "01",
            ) {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11") {
                    match decode::generated::decode_blocks::decode_ST1D_Z_P_BZ_D_64_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10") {
                    match decode::generated::decode_blocks::decode_ST1W_Z_P_BZ_D_64_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01") {
                    match decode::generated::decode_blocks::decode_ST1H_Z_P_BZ_D_64_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00") {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "00",
            ) {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11") {
                    match decode::generated::decode_blocks::decode_ST1D_Z_P_BZ_D_64_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10") {
                    match decode::generated::decode_blocks::decode_ST1W_Z_P_BZ_D_64_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01") {
                    match decode::generated::decode_blocks::decode_ST1H_Z_P_BZ_D_64_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00") {
                    match decode::generated::decode_blocks::decode_ST1B_Z_P_BZ_D_64_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "111",
        )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "1x0xxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "11",
            ) {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let xs_slice = reader.extract_slice(14usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&msz_slice, "10") {
                    match decode::generated::decode_blocks::decode_ST1W_Z_P_BZ_S_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01") {
                    match decode::generated::decode_blocks::decode_ST1H_Z_P_BZ_S_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00") {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "10",
            ) {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let xs_slice = reader.extract_slice(14usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&msz_slice, "10") {
                    match decode::generated::decode_blocks::decode_ST1W_Z_P_BZ_S_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01") {
                    match decode::generated::decode_blocks::decode_ST1H_Z_P_BZ_S_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00") {
                    match decode::generated::decode_blocks::decode_ST1B_Z_P_BZ_S_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "01",
            ) {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let xs_slice = reader.extract_slice(14usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11") {
                    match decode::generated::decode_blocks::decode_ST1D_Z_P_BZ_D_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10") {
                    match decode::generated::decode_blocks::decode_ST1W_Z_P_BZ_D_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01") {
                    match decode::generated::decode_blocks::decode_ST1H_Z_P_BZ_D_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00") {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "00",
            ) {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let xs_slice = reader.extract_slice(14usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11") {
                    match decode::generated::decode_blocks::decode_ST1D_Z_P_BZ_D_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10") {
                    match decode::generated::decode_blocks::decode_ST1W_Z_P_BZ_D_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01") {
                    match decode::generated::decode_blocks::decode_ST1H_Z_P_BZ_D_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00") {
                    match decode::generated::decode_blocks::decode_ST1B_Z_P_BZ_D_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "111",
        )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "0x1xxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(14usize, 1usize)?,
                "0",
            ) {
                instruction = common::types::Instruction::UNPRED;
            } else if !decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(14usize, 1usize)?,
                    "1",
                )
            {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let opc_slice = reader.extract_slice(21usize, 2usize)?;
                let Rm_slice = reader.extract_slice(16usize, 5usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&opc_slice, "11")
                {
                    match decode::generated::decode_blocks::decode_ST4D_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&opc_slice, "10")
                {
                    match decode::generated::decode_blocks::decode_ST3D_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&opc_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_ST2D_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&opc_slice, "11")
                {
                    match decode::generated::decode_blocks::decode_ST4W_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&opc_slice, "10")
                {
                    match decode::generated::decode_blocks::decode_ST3W_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&opc_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_ST2W_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&opc_slice, "11")
                {
                    match decode::generated::decode_blocks::decode_ST4H_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&opc_slice, "10")
                {
                    match decode::generated::decode_blocks::decode_ST3H_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&opc_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_ST2H_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&opc_slice, "11")
                {
                    match decode::generated::decode_blocks::decode_ST4B_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&opc_slice, "10")
                {
                    match decode::generated::decode_blocks::decode_ST3B_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&opc_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_ST2B_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(14usize, 1usize)?,
                    "1",
                )
            {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let Rm_slice = reader.extract_slice(16usize, 5usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11") {
                    match decode::generated::decode_blocks::decode_STNT1D_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10") {
                    match decode::generated::decode_blocks::decode_STNT1W_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01") {
                    match decode::generated::decode_blocks::decode_STNT1H_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00") {
                    match decode::generated::decode_blocks::decode_STNT1B_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "111",
        )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "0x0xxx",
            )
        {
            if !decode::BitReader::match_bits(
                &reader.extract_slice(22usize, 3usize)?,
                "110",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(14usize, 1usize)?,
                    "1",
                )
            {
                let opc_slice = reader.extract_slice(22usize, 3usize)?;
                let o2_slice = reader.extract_slice(21usize, 1usize)?;
                let Rm_slice = reader.extract_slice(16usize, 5usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "111")
                    && decode::BitReader::match_bits(&o2_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_ST1D_Z_P_BR__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "111")
                    && decode::BitReader::match_bits(&o2_slice, "0")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "10x") {
                    match decode::generated::decode_blocks::decode_ST1W_Z_P_BR__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01x") {
                    match decode::generated::decode_blocks::decode_ST1H_Z_P_BR__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "00x") {
                    match decode::generated::decode_blocks::decode_ST1B_Z_P_BR__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(22usize, 3usize)?,
                "111",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(14usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(22usize, 3usize)?,
                "110",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(14usize, 1usize)?,
                    "1",
                )
            {
                let imm9h_slice = reader.extract_slice(16usize, 6usize)?;
                let imm9l_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                match decode::generated::decode_blocks::decode_STR_Z_BI__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(22usize, 3usize)?,
                "110",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(14usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(22usize, 3usize)?,
                "110",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(14usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                let imm9h_slice = reader.extract_slice(16usize, 6usize)?;
                let imm9l_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Pt_slice = reader.extract_slice(0usize, 4usize)?;
                match decode::generated::decode_blocks::decode_STR_P_BI__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(22usize, 3usize)?,
                "10x",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(14usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(22usize, 3usize)?,
                "0xx",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(14usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "110",
        ) {
            if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "x0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "0xx",
                )
            {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let xs_slice = reader.extract_slice(22usize, 1usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let U_slice = reader.extract_slice(14usize, 1usize)?;
                let ff_slice = reader.extract_slice(13usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1D_Z_P_BZ_D_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1D_Z_P_BZ_D_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1W_Z_P_BZ_D_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1W_Z_P_BZ_D_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1SW_Z_P_BZ_D_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1SW_Z_P_BZ_D_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1H_Z_P_BZ_D_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1H_Z_P_BZ_D_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1SH_Z_P_BZ_D_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1SH_Z_P_BZ_D_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1B_Z_P_BZ_D_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1B_Z_P_BZ_D_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1SB_Z_P_BZ_D_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1SB_Z_P_BZ_D_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "10",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "1xx",
                )
            {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let U_slice = reader.extract_slice(14usize, 1usize)?;
                let ff_slice = reader.extract_slice(13usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1D_Z_P_BZ_D_64_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1D_Z_P_BZ_D_64_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1W_Z_P_BZ_D_64_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1W_Z_P_BZ_D_64_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1SW_Z_P_BZ_D_64_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1SW_Z_P_BZ_D_64_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1H_Z_P_BZ_D_64_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1H_Z_P_BZ_D_64_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1SH_Z_P_BZ_D_64_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1SH_Z_P_BZ_D_64_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1B_Z_P_BZ_D_64_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1B_Z_P_BZ_D_64_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1SB_Z_P_BZ_D_64_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1SB_Z_P_BZ_D_64_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "01",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "1xx",
                )
            {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let imm5_slice = reader.extract_slice(16usize, 5usize)?;
                let U_slice = reader.extract_slice(14usize, 1usize)?;
                let ff_slice = reader.extract_slice(13usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1D_Z_P_AI_D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1D_Z_P_AI_D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1W_Z_P_AI_D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1W_Z_P_AI_D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1SW_Z_P_AI_D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1SW_Z_P_AI_D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1H_Z_P_AI_D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1H_Z_P_AI_D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1SH_Z_P_AI_D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1SH_Z_P_AI_D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1B_Z_P_AI_D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1B_Z_P_AI_D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1SB_Z_P_AI_D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1SB_Z_P_AI_D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "111",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "111",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let imm5_slice = reader.extract_slice(16usize, 5usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let prfop_slice = reader.extract_slice(0usize, 4usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11") {
                    match decode::generated::decode_blocks::decode_PRFD_I_P_AI_D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10") {
                    match decode::generated::decode_blocks::decode_PRFW_I_P_AI_D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01") {
                    match decode::generated::decode_blocks::decode_PRFH_I_P_AI_D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00") {
                    match decode::generated::decode_blocks::decode_PRFB_I_P_AI_D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "110",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "10x",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if !decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(21usize, 2usize)?,
                    "x1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "0xx",
                )
            {
                let opc_slice = reader.extract_slice(23usize, 2usize)?;
                let xs_slice = reader.extract_slice(22usize, 1usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let U_slice = reader.extract_slice(14usize, 1usize)?;
                let ff_slice = reader.extract_slice(13usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1D_Z_P_BZ_D_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1D_Z_P_BZ_D_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1W_Z_P_BZ_D_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1W_Z_P_BZ_D_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1SW_Z_P_BZ_D_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1SW_Z_P_BZ_D_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1H_Z_P_BZ_D_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1H_Z_P_BZ_D_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1SH_Z_P_BZ_D_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1SH_Z_P_BZ_D_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if !decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(21usize, 2usize)?,
                    "11",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "1xx",
                )
            {
                let opc_slice = reader.extract_slice(23usize, 2usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let U_slice = reader.extract_slice(14usize, 1usize)?;
                let ff_slice = reader.extract_slice(13usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1D_Z_P_BZ_D_64_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1D_Z_P_BZ_D_64_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1W_Z_P_BZ_D_64_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1W_Z_P_BZ_D_64_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1SW_Z_P_BZ_D_64_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1SW_Z_P_BZ_D_64_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1H_Z_P_BZ_D_64_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1H_Z_P_BZ_D_64_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1SH_Z_P_BZ_D_64_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1SH_Z_P_BZ_D_64_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(21usize, 2usize)?,
                    "x1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "0xx",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                let xs_slice = reader.extract_slice(22usize, 1usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let msz_slice = reader.extract_slice(13usize, 2usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let prfop_slice = reader.extract_slice(0usize, 4usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11") {
                    match decode::generated::decode_blocks::decode_PRFD_I_P_BZ_D_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10") {
                    match decode::generated::decode_blocks::decode_PRFW_I_P_BZ_D_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01") {
                    match decode::generated::decode_blocks::decode_PRFH_I_P_BZ_D_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00") {
                    match decode::generated::decode_blocks::decode_PRFB_I_P_BZ_D_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(21usize, 2usize)?,
                    "11",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(21usize, 2usize)?,
                    "11",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "1xx",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let msz_slice = reader.extract_slice(13usize, 2usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let prfop_slice = reader.extract_slice(0usize, 4usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11") {
                    match decode::generated::decode_blocks::decode_PRFD_I_P_BZ_D_64_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10") {
                    match decode::generated::decode_blocks::decode_PRFW_I_P_BZ_D_64_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01") {
                    match decode::generated::decode_blocks::decode_PRFH_I_P_BZ_D_64_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00") {
                    match decode::generated::decode_blocks::decode_PRFB_I_P_BZ_D_64_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(21usize, 2usize)?,
                    "01",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "0xx",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "101",
        ) {
            if decode::BitReader::match_bits(
                &reader.extract_slice(13usize, 3usize)?,
                "100",
            ) {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(13usize, 3usize)?,
                "011",
            ) {
                let dtype_slice = reader.extract_slice(21usize, 4usize)?;
                let Rm_slice = reader.extract_slice(16usize, 5usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&dtype_slice, "1111") {
                    match decode::generated::decode_blocks::decode_LDFF1D_Z_P_BR_U64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1110") {
                    match decode::generated::decode_blocks::decode_LDFF1SB_Z_P_BR_S16(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1101") {
                    match decode::generated::decode_blocks::decode_LDFF1SB_Z_P_BR_S32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1100") {
                    match decode::generated::decode_blocks::decode_LDFF1SB_Z_P_BR_S64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1011") {
                    match decode::generated::decode_blocks::decode_LDFF1W_Z_P_BR_U64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1010") {
                    match decode::generated::decode_blocks::decode_LDFF1W_Z_P_BR_U32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1001") {
                    match decode::generated::decode_blocks::decode_LDFF1SH_Z_P_BR_S32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1000") {
                    match decode::generated::decode_blocks::decode_LDFF1SH_Z_P_BR_S64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0111") {
                    match decode::generated::decode_blocks::decode_LDFF1H_Z_P_BR_U64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0110") {
                    match decode::generated::decode_blocks::decode_LDFF1H_Z_P_BR_U32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0101") {
                    match decode::generated::decode_blocks::decode_LDFF1H_Z_P_BR_U16(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0100") {
                    match decode::generated::decode_blocks::decode_LDFF1SW_Z_P_BR_S64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0011") {
                    match decode::generated::decode_blocks::decode_LDFF1B_Z_P_BR_U64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0010") {
                    match decode::generated::decode_blocks::decode_LDFF1B_Z_P_BR_U32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0001") {
                    match decode::generated::decode_blocks::decode_LDFF1B_Z_P_BR_U16(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0000") {
                    match decode::generated::decode_blocks::decode_LDFF1B_Z_P_BR_U8(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(13usize, 3usize)?,
                "010",
            ) {
                let dtype_slice = reader.extract_slice(21usize, 4usize)?;
                let Rm_slice = reader.extract_slice(16usize, 5usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&dtype_slice, "1111") {
                    match decode::generated::decode_blocks::decode_LD1D_Z_P_BR_U64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1110") {
                    match decode::generated::decode_blocks::decode_LD1SB_Z_P_BR_S16(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1101") {
                    match decode::generated::decode_blocks::decode_LD1SB_Z_P_BR_S32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1100") {
                    match decode::generated::decode_blocks::decode_LD1SB_Z_P_BR_S64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1011") {
                    match decode::generated::decode_blocks::decode_LD1W_Z_P_BR_U64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1010") {
                    match decode::generated::decode_blocks::decode_LD1W_Z_P_BR_U32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1001") {
                    match decode::generated::decode_blocks::decode_LD1SH_Z_P_BR_S32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1000") {
                    match decode::generated::decode_blocks::decode_LD1SH_Z_P_BR_S64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0111") {
                    match decode::generated::decode_blocks::decode_LD1H_Z_P_BR_U64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0110") {
                    match decode::generated::decode_blocks::decode_LD1H_Z_P_BR_U32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0101") {
                    match decode::generated::decode_blocks::decode_LD1H_Z_P_BR_U16(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0100") {
                    match decode::generated::decode_blocks::decode_LD1SW_Z_P_BR_S64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0011") {
                    match decode::generated::decode_blocks::decode_LD1B_Z_P_BR_U64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0010") {
                    match decode::generated::decode_blocks::decode_LD1B_Z_P_BR_U32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0001") {
                    match decode::generated::decode_blocks::decode_LD1B_Z_P_BR_U16(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0000") {
                    match decode::generated::decode_blocks::decode_LD1B_Z_P_BR_U8(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(13usize, 3usize)?,
                "000",
            ) {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let ssz_slice = reader.extract_slice(21usize, 2usize)?;
                let Rm_slice = reader.extract_slice(16usize, 5usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&ssz_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_LD1ROD_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&ssz_slice, "00")
                {
                    match decode::generated::decode_blocks::decode_LD1RQD_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&ssz_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_LD1ROW_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&ssz_slice, "00")
                {
                    match decode::generated::decode_blocks::decode_LD1RQW_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&ssz_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_LD1ROH_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&ssz_slice, "00")
                {
                    match decode::generated::decode_blocks::decode_LD1RQH_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&ssz_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_LD1ROB_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&ssz_slice, "00")
                {
                    match decode::generated::decode_blocks::decode_LD1RQB_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&ssz_slice, "1x") {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "111",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "101",
                )
            {
                let dtype_slice = reader.extract_slice(21usize, 4usize)?;
                let imm4_slice = reader.extract_slice(16usize, 4usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&dtype_slice, "1111") {
                    match decode::generated::decode_blocks::decode_LDNF1D_Z_P_BI_U64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1110") {
                    match decode::generated::decode_blocks::decode_LDNF1SB_Z_P_BI_S16(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1101") {
                    match decode::generated::decode_blocks::decode_LDNF1SB_Z_P_BI_S32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1100") {
                    match decode::generated::decode_blocks::decode_LDNF1SB_Z_P_BI_S64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1011") {
                    match decode::generated::decode_blocks::decode_LDNF1W_Z_P_BI_U64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1010") {
                    match decode::generated::decode_blocks::decode_LDNF1W_Z_P_BI_U32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1001") {
                    match decode::generated::decode_blocks::decode_LDNF1SH_Z_P_BI_S32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1000") {
                    match decode::generated::decode_blocks::decode_LDNF1SH_Z_P_BI_S64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0111") {
                    match decode::generated::decode_blocks::decode_LDNF1H_Z_P_BI_U64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0110") {
                    match decode::generated::decode_blocks::decode_LDNF1H_Z_P_BI_U32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0101") {
                    match decode::generated::decode_blocks::decode_LDNF1H_Z_P_BI_U16(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0100") {
                    match decode::generated::decode_blocks::decode_LDNF1SW_Z_P_BI_S64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0011") {
                    match decode::generated::decode_blocks::decode_LDNF1B_Z_P_BI_U64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0010") {
                    match decode::generated::decode_blocks::decode_LDNF1B_Z_P_BI_U32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0001") {
                    match decode::generated::decode_blocks::decode_LDNF1B_Z_P_BI_U16(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0000") {
                    match decode::generated::decode_blocks::decode_LDNF1B_Z_P_BI_U8(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "001",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "101",
                )
            {
                let dtype_slice = reader.extract_slice(21usize, 4usize)?;
                let imm4_slice = reader.extract_slice(16usize, 4usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&dtype_slice, "1111") {
                    match decode::generated::decode_blocks::decode_LD1D_Z_P_BI_U64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1110") {
                    match decode::generated::decode_blocks::decode_LD1SB_Z_P_BI_S16(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1101") {
                    match decode::generated::decode_blocks::decode_LD1SB_Z_P_BI_S32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1100") {
                    match decode::generated::decode_blocks::decode_LD1SB_Z_P_BI_S64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1011") {
                    match decode::generated::decode_blocks::decode_LD1W_Z_P_BI_U64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1010") {
                    match decode::generated::decode_blocks::decode_LD1W_Z_P_BI_U32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1001") {
                    match decode::generated::decode_blocks::decode_LD1SH_Z_P_BI_S32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "1000") {
                    match decode::generated::decode_blocks::decode_LD1SH_Z_P_BI_S64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0111") {
                    match decode::generated::decode_blocks::decode_LD1H_Z_P_BI_U64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0110") {
                    match decode::generated::decode_blocks::decode_LD1H_Z_P_BI_U32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0101") {
                    match decode::generated::decode_blocks::decode_LD1H_Z_P_BI_U16(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0100") {
                    match decode::generated::decode_blocks::decode_LD1SW_Z_P_BI_S64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0011") {
                    match decode::generated::decode_blocks::decode_LD1B_Z_P_BI_U64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0010") {
                    match decode::generated::decode_blocks::decode_LD1B_Z_P_BI_U32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0001") {
                    match decode::generated::decode_blocks::decode_LD1B_Z_P_BI_U16(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtype_slice, "0000") {
                    match decode::generated::decode_blocks::decode_LD1B_Z_P_BI_U8(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "001",
                )
            {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let ssz_slice = reader.extract_slice(21usize, 2usize)?;
                let imm4_slice = reader.extract_slice(16usize, 4usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&ssz_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_LD1ROD_Z_P_BI_U64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&ssz_slice, "00")
                {
                    match decode::generated::decode_blocks::decode_LD1RQD_Z_P_BI_U64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&ssz_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_LD1ROW_Z_P_BI_U32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&ssz_slice, "00")
                {
                    match decode::generated::decode_blocks::decode_LD1RQW_Z_P_BI_U32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&ssz_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_LD1ROH_Z_P_BI_U16(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&ssz_slice, "00")
                {
                    match decode::generated::decode_blocks::decode_LD1RQH_Z_P_BI_U16(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&ssz_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_LD1ROB_Z_P_BI_U8(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&ssz_slice, "00")
                {
                    match decode::generated::decode_blocks::decode_LD1RQB_Z_P_BI_U8(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&ssz_slice, "1x") {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if !decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "110",
                )
            {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let opc_slice = reader.extract_slice(21usize, 2usize)?;
                let Rm_slice = reader.extract_slice(16usize, 5usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&opc_slice, "11")
                {
                    match decode::generated::decode_blocks::decode_LD4D_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&opc_slice, "10")
                {
                    match decode::generated::decode_blocks::decode_LD3D_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&opc_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_LD2D_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&opc_slice, "11")
                {
                    match decode::generated::decode_blocks::decode_LD4W_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&opc_slice, "10")
                {
                    match decode::generated::decode_blocks::decode_LD3W_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&opc_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_LD2W_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&opc_slice, "11")
                {
                    match decode::generated::decode_blocks::decode_LD4H_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&opc_slice, "10")
                {
                    match decode::generated::decode_blocks::decode_LD3H_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&opc_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_LD2H_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&opc_slice, "11")
                {
                    match decode::generated::decode_blocks::decode_LD4B_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&opc_slice, "10")
                {
                    match decode::generated::decode_blocks::decode_LD3B_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&opc_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_LD2B_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if !decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(20usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "111",
                )
            {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let opc_slice = reader.extract_slice(21usize, 2usize)?;
                let imm4_slice = reader.extract_slice(16usize, 4usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&opc_slice, "11")
                {
                    match decode::generated::decode_blocks::decode_LD4D_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&opc_slice, "10")
                {
                    match decode::generated::decode_blocks::decode_LD3D_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "11")
                    && decode::BitReader::match_bits(&opc_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_LD2D_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&opc_slice, "11")
                {
                    match decode::generated::decode_blocks::decode_LD4W_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&opc_slice, "10")
                {
                    match decode::generated::decode_blocks::decode_LD3W_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&opc_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_LD2W_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&opc_slice, "11")
                {
                    match decode::generated::decode_blocks::decode_LD4H_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&opc_slice, "10")
                {
                    match decode::generated::decode_blocks::decode_LD3H_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&opc_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_LD2H_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&opc_slice, "11")
                {
                    match decode::generated::decode_blocks::decode_LD4B_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&opc_slice, "10")
                {
                    match decode::generated::decode_blocks::decode_LD3B_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&opc_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_LD2B_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "110",
                )
            {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let Rm_slice = reader.extract_slice(16usize, 5usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11") {
                    match decode::generated::decode_blocks::decode_LDNT1D_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10") {
                    match decode::generated::decode_blocks::decode_LDNT1W_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01") {
                    match decode::generated::decode_blocks::decode_LDNT1H_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00") {
                    match decode::generated::decode_blocks::decode_LDNT1B_Z_P_BR_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(20usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "111",
                )
            {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let imm4_slice = reader.extract_slice(16usize, 4usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11") {
                    match decode::generated::decode_blocks::decode_LDNT1D_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10") {
                    match decode::generated::decode_blocks::decode_LDNT1W_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01") {
                    match decode::generated::decode_blocks::decode_LDNT1H_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00") {
                    match decode::generated::decode_blocks::decode_LDNT1B_Z_P_BI_Contiguous(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "100",
        ) {
            if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "1x",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "1xx",
                )
            {
                let dtypeh_slice = reader.extract_slice(23usize, 2usize)?;
                let imm6_slice = reader.extract_slice(16usize, 6usize)?;
                let dtypel_slice = reader.extract_slice(13usize, 2usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&dtypeh_slice, "11")
                    && decode::BitReader::match_bits(&dtypel_slice, "11")
                {
                    match decode::generated::decode_blocks::decode_LD1RD_Z_P_BI_U64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtypeh_slice, "11")
                    && decode::BitReader::match_bits(&dtypel_slice, "10")
                {
                    match decode::generated::decode_blocks::decode_LD1RSB_Z_P_BI_S16(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtypeh_slice, "11")
                    && decode::BitReader::match_bits(&dtypel_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_LD1RSB_Z_P_BI_S32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtypeh_slice, "11")
                    && decode::BitReader::match_bits(&dtypel_slice, "00")
                {
                    match decode::generated::decode_blocks::decode_LD1RSB_Z_P_BI_S64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtypeh_slice, "10")
                    && decode::BitReader::match_bits(&dtypel_slice, "11")
                {
                    match decode::generated::decode_blocks::decode_LD1RW_Z_P_BI_U64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtypeh_slice, "10")
                    && decode::BitReader::match_bits(&dtypel_slice, "10")
                {
                    match decode::generated::decode_blocks::decode_LD1RW_Z_P_BI_U32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtypeh_slice, "10")
                    && decode::BitReader::match_bits(&dtypel_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_LD1RSH_Z_P_BI_S32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtypeh_slice, "10")
                    && decode::BitReader::match_bits(&dtypel_slice, "00")
                {
                    match decode::generated::decode_blocks::decode_LD1RSH_Z_P_BI_S64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtypeh_slice, "01")
                    && decode::BitReader::match_bits(&dtypel_slice, "11")
                {
                    match decode::generated::decode_blocks::decode_LD1RH_Z_P_BI_U64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtypeh_slice, "01")
                    && decode::BitReader::match_bits(&dtypel_slice, "10")
                {
                    match decode::generated::decode_blocks::decode_LD1RH_Z_P_BI_U32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtypeh_slice, "01")
                    && decode::BitReader::match_bits(&dtypel_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_LD1RH_Z_P_BI_U16(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtypeh_slice, "01")
                    && decode::BitReader::match_bits(&dtypel_slice, "00")
                {
                    match decode::generated::decode_blocks::decode_LD1RSW_Z_P_BI_S64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtypeh_slice, "00")
                    && decode::BitReader::match_bits(&dtypel_slice, "11")
                {
                    match decode::generated::decode_blocks::decode_LD1RB_Z_P_BI_U64(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtypeh_slice, "00")
                    && decode::BitReader::match_bits(&dtypel_slice, "10")
                {
                    match decode::generated::decode_blocks::decode_LD1RB_Z_P_BI_U32(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtypeh_slice, "00")
                    && decode::BitReader::match_bits(&dtypel_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_LD1RB_Z_P_BI_U16(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&dtypeh_slice, "00")
                    && decode::BitReader::match_bits(&dtypel_slice, "00")
                {
                    match decode::generated::decode_blocks::decode_LD1RB_Z_P_BI_U8(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "01",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "1xx",
                )
            {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let imm5_slice = reader.extract_slice(16usize, 5usize)?;
                let U_slice = reader.extract_slice(14usize, 1usize)?;
                let ff_slice = reader.extract_slice(13usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1W_Z_P_AI_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1W_Z_P_AI_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1H_Z_P_AI_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1H_Z_P_AI_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1SH_Z_P_AI_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1SH_Z_P_AI_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1B_Z_P_AI_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1B_Z_P_AI_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1SB_Z_P_AI_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1SB_Z_P_AI_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "11x",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "111",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let imm5_slice = reader.extract_slice(16usize, 5usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let prfop_slice = reader.extract_slice(0usize, 4usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11") {
                    match decode::generated::decode_blocks::decode_PRFD_I_P_AI_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10") {
                    match decode::generated::decode_blocks::decode_PRFW_I_P_AI_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01") {
                    match decode::generated::decode_blocks::decode_PRFH_I_P_AI_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00") {
                    match decode::generated::decode_blocks::decode_PRFB_I_P_AI_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "110",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                let msz_slice = reader.extract_slice(23usize, 2usize)?;
                let Rm_slice = reader.extract_slice(16usize, 5usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let prfop_slice = reader.extract_slice(0usize, 4usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11") {
                    match decode::generated::decode_blocks::decode_PRFD_I_P_BR_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10") {
                    match decode::generated::decode_blocks::decode_PRFW_I_P_BR_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01") {
                    match decode::generated::decode_blocks::decode_PRFH_I_P_BR_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00") {
                    match decode::generated::decode_blocks::decode_PRFB_I_P_BR_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(21usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "10x",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if !decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "11",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(21usize, 2usize)?,
                    "x0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "0xx",
                )
            {
                let opc_slice = reader.extract_slice(23usize, 2usize)?;
                let xs_slice = reader.extract_slice(22usize, 1usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let U_slice = reader.extract_slice(14usize, 1usize)?;
                let ff_slice = reader.extract_slice(13usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1W_Z_P_BZ_S_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1W_Z_P_BZ_S_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1H_Z_P_BZ_S_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1H_Z_P_BZ_S_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1SH_Z_P_BZ_S_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1SH_Z_P_BZ_S_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1B_Z_P_BZ_S_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1B_Z_P_BZ_S_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1SB_Z_P_BZ_S_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1SB_Z_P_BZ_S_x32_unscaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "11",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(21usize, 2usize)?,
                    "1x",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "0xx",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "11",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(21usize, 2usize)?,
                    "1x",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "0xx",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                let imm6_slice = reader.extract_slice(16usize, 6usize)?;
                let msz_slice = reader.extract_slice(13usize, 2usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let prfop_slice = reader.extract_slice(0usize, 4usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11") {
                    match decode::generated::decode_blocks::decode_PRFD_I_P_BI_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10") {
                    match decode::generated::decode_blocks::decode_PRFW_I_P_BI_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01") {
                    match decode::generated::decode_blocks::decode_PRFH_I_P_BI_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00") {
                    match decode::generated::decode_blocks::decode_PRFB_I_P_BI_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "11",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(21usize, 2usize)?,
                    "0x",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "0x1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "11",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(21usize, 2usize)?,
                    "0x",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "010",
                )
            {
                let imm9h_slice = reader.extract_slice(16usize, 6usize)?;
                let imm9l_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                match decode::generated::decode_blocks::decode_LDR_Z_BI__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "11",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(21usize, 2usize)?,
                    "0x",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "11",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(21usize, 2usize)?,
                    "0x",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                let imm9h_slice = reader.extract_slice(16usize, 6usize)?;
                let imm9l_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Pt_slice = reader.extract_slice(0usize, 4usize)?;
                match decode::generated::decode_blocks::decode_LDR_P_BI__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "10",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(21usize, 2usize)?,
                    "x1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "0xx",
                )
            {
                let xs_slice = reader.extract_slice(22usize, 1usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let U_slice = reader.extract_slice(14usize, 1usize)?;
                let ff_slice = reader.extract_slice(13usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1W_Z_P_BZ_S_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1W_Z_P_BZ_S_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&U_slice, "0") {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "01",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(21usize, 2usize)?,
                    "x1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "0xx",
                )
            {
                let xs_slice = reader.extract_slice(22usize, 1usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let U_slice = reader.extract_slice(14usize, 1usize)?;
                let ff_slice = reader.extract_slice(13usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zt_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1H_Z_P_BZ_S_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1H_Z_P_BZ_S_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LDFF1SH_Z_P_BZ_S_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&ff_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_LD1SH_Z_P_BZ_S_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(21usize, 2usize)?,
                    "x1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "0xx",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(21usize, 2usize)?,
                    "x1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 3usize)?,
                    "0xx",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                let xs_slice = reader.extract_slice(22usize, 1usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let msz_slice = reader.extract_slice(13usize, 2usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let prfop_slice = reader.extract_slice(0usize, 4usize)?;
                if decode::BitReader::match_bits(&msz_slice, "11") {
                    match decode::generated::decode_blocks::decode_PRFD_I_P_BZ_S_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "10") {
                    match decode::generated::decode_blocks::decode_PRFW_I_P_BZ_S_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "01") {
                    match decode::generated::decode_blocks::decode_PRFH_I_P_BZ_S_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&msz_slice, "00") {
                    match decode::generated::decode_blocks::decode_PRFB_I_P_BZ_S_x32_scaled(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(15usize, 1usize)?,
                "1",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Za_slice = reader.extract_slice(16usize, 5usize)?;
                let opc_slice = reader.extract_slice(13usize, 2usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zm_slice = reader.extract_slice(5usize, 5usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "11") {
                    match decode::generated::decode_blocks::decode_FNMSB_Z_P_ZZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10") {
                    match decode::generated::decode_blocks::decode_FNMAD_Z_P_ZZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01") {
                    match decode::generated::decode_blocks::decode_FMSB_Z_P_ZZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "00") {
                    match decode::generated::decode_blocks::decode_FMAD_Z_P_ZZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(15usize, 1usize)?,
                "0",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let opc_slice = reader.extract_slice(13usize, 2usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zda_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "11") {
                    match decode::generated::decode_blocks::decode_FNMLS_Z_P_ZZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10") {
                    match decode::generated::decode_blocks::decode_FNMLA_Z_P_ZZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01") {
                    match decode::generated::decode_blocks::decode_FMLS_Z_P_ZZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "00") {
                    match decode::generated::decode_blocks::decode_FMLA_Z_P_ZZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "011xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "001xxx",
            )
        {
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let opc_slice = reader.extract_slice(16usize, 3usize)?;
            let Pg_slice = reader.extract_slice(10usize, 3usize)?;
            let Zm_slice = reader.extract_slice(5usize, 5usize)?;
            let Vdn_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&opc_slice, "1xx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "01x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "001") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "000") {
                match decode::generated::decode_blocks::decode_FADDA_V_P_Z__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "010xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "001xxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(18usize, 1usize)?,
                "1",
            ) {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(18usize, 1usize)?,
                "0",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let eq_slice = reader.extract_slice(17usize, 1usize)?;
                let lt_slice = reader.extract_slice(16usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let ne_slice = reader.extract_slice(4usize, 1usize)?;
                let Pd_slice = reader.extract_slice(0usize, 4usize)?;
                if decode::BitReader::match_bits(&eq_slice, "1")
                    && decode::BitReader::match_bits(&lt_slice, "1")
                    && decode::BitReader::match_bits(&ne_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_FCMNE_P_P_Z0__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&eq_slice, "1")
                    && decode::BitReader::match_bits(&lt_slice, "0")
                    && decode::BitReader::match_bits(&ne_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_FCMEQ_P_P_Z0__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&eq_slice, "1")
                    && decode::BitReader::match_bits(&ne_slice, "1")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&eq_slice, "0")
                    && decode::BitReader::match_bits(&lt_slice, "1")
                    && decode::BitReader::match_bits(&ne_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_FCMLE_P_P_Z0__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&eq_slice, "0")
                    && decode::BitReader::match_bits(&lt_slice, "1")
                    && decode::BitReader::match_bits(&ne_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_FCMLT_P_P_Z0__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&eq_slice, "0")
                    && decode::BitReader::match_bits(&lt_slice, "0")
                    && decode::BitReader::match_bits(&ne_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_FCMGT_P_P_Z0__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&eq_slice, "0")
                    && decode::BitReader::match_bits(&lt_slice, "0")
                    && decode::BitReader::match_bits(&ne_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_FCMGE_P_P_Z0__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "001xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "0011xx",
            )
        {
            if !decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 2usize)?,
                "00",
            ) {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 2usize)?,
                "00",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let opc_slice = reader.extract_slice(16usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "111") {
                    match decode::generated::decode_blocks::decode_FRSQRTE_Z_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "110") {
                    match decode::generated::decode_blocks::decode_FRECPE_Z_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10x") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "0xx") {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "001xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "0010xx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "000xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "001xxx",
            )
        {
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let opc_slice = reader.extract_slice(16usize, 3usize)?;
            let Pg_slice = reader.extract_slice(10usize, 3usize)?;
            let Zn_slice = reader.extract_slice(5usize, 5usize)?;
            let Vd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&opc_slice, "111") {
                match decode::generated::decode_blocks::decode_FMINV_V_P_Z__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "110") {
                match decode::generated::decode_blocks::decode_FMAXV_V_P_Z__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "101") {
                match decode::generated::decode_blocks::decode_FMINNMV_V_P_Z__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "100") {
                match decode::generated::decode_blocks::decode_FMAXNMV_V_P_Z__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "001") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "000") {
                match decode::generated::decode_blocks::decode_FADDV_V_P_Z__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "0xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "101xxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(18usize, 3usize)?,
                "11x",
            ) {
                let opc_slice = reader.extract_slice(22usize, 2usize)?;
                let opc2_slice = reader.extract_slice(17usize, 2usize)?;
                let U_slice = reader.extract_slice(16usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "11")
                    && decode::BitReader::match_bits(&opc2_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_FCVTZU_Z_P_Z_D2X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "11")
                    && decode::BitReader::match_bits(&opc2_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_FCVTZS_Z_P_Z_D2X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "11")
                    && decode::BitReader::match_bits(&opc2_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_FCVTZU_Z_P_Z_S2X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "11")
                    && decode::BitReader::match_bits(&opc2_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_FCVTZS_Z_P_Z_S2X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "11")
                    && decode::BitReader::match_bits(&opc2_slice, "01")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "11")
                    && decode::BitReader::match_bits(&opc2_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_FCVTZU_Z_P_Z_D2W(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "11")
                    && decode::BitReader::match_bits(&opc2_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_FCVTZS_Z_P_Z_D2W(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&opc2_slice, "11")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&opc2_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_FCVTZU_Z_P_Z_S2W(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&opc2_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_FCVTZS_Z_P_Z_S2W(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&opc2_slice, "0x")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&opc2_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_FCVTZU_Z_P_Z_FP162X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&opc2_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_FCVTZS_Z_P_Z_FP162X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&opc2_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_FCVTZU_Z_P_Z_FP162W(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&opc2_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_FCVTZS_Z_P_Z_FP162W(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&opc2_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_FCVTZU_Z_P_Z_FP162H(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&opc2_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_FCVTZS_Z_P_Z_FP162H(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&opc2_slice, "00")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "00") {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(18usize, 3usize)?,
                "10x",
            ) {
                let opc_slice = reader.extract_slice(22usize, 2usize)?;
                let opc2_slice = reader.extract_slice(17usize, 2usize)?;
                let U_slice = reader.extract_slice(16usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "11")
                    && decode::BitReader::match_bits(&opc2_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UCVTF_Z_P_Z_X2D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "11")
                    && decode::BitReader::match_bits(&opc2_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SCVTF_Z_P_Z_X2D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "11")
                    && decode::BitReader::match_bits(&opc2_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UCVTF_Z_P_Z_X2S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "11")
                    && decode::BitReader::match_bits(&opc2_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SCVTF_Z_P_Z_X2S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "11")
                    && decode::BitReader::match_bits(&opc2_slice, "01")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "11")
                    && decode::BitReader::match_bits(&opc2_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UCVTF_Z_P_Z_W2D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "11")
                    && decode::BitReader::match_bits(&opc2_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SCVTF_Z_P_Z_W2D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&opc2_slice, "11")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&opc2_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UCVTF_Z_P_Z_W2S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&opc2_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SCVTF_Z_P_Z_W2S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&opc2_slice, "0x")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&opc2_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UCVTF_Z_P_Z_X2FP16(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&opc2_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SCVTF_Z_P_Z_X2FP16(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&opc2_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UCVTF_Z_P_Z_W2FP16(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&opc2_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SCVTF_Z_P_Z_W2FP16(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&opc2_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UCVTF_Z_P_Z_H2FP16(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&opc2_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SCVTF_Z_P_Z_H2FP16(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&opc2_slice, "00")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "00") {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(18usize, 3usize)?,
                "011",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let opc_slice = reader.extract_slice(16usize, 2usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "1x") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "01") {
                    match decode::generated::decode_blocks::decode_FSQRT_Z_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "00") {
                    match decode::generated::decode_blocks::decode_FRECPX_Z_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(18usize, 3usize)?,
                "010",
            ) {
                let opc_slice = reader.extract_slice(22usize, 2usize)?;
                let opc2_slice = reader.extract_slice(16usize, 2usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "11")
                    && decode::BitReader::match_bits(&opc2_slice, "11")
                {
                    match decode::generated::decode_blocks::decode_FCVT_Z_P_Z_S2D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "11")
                    && decode::BitReader::match_bits(&opc2_slice, "10")
                {
                    match decode::generated::decode_blocks::decode_FCVT_Z_P_Z_D2S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "11")
                    && decode::BitReader::match_bits(&opc2_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_FCVT_Z_P_Z_H2D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "11")
                    && decode::BitReader::match_bits(&opc2_slice, "00")
                {
                    match decode::generated::decode_blocks::decode_FCVT_Z_P_Z_D2H(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&opc2_slice, "11")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&opc2_slice, "10")
                {
                    match decode::generated::decode_blocks::decode_BFCVT_Z_P_Z_S2BF(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&opc2_slice, "01")
                {
                    match decode::generated::decode_blocks::decode_FCVT_Z_P_Z_H2S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&opc2_slice, "00")
                {
                    match decode::generated::decode_blocks::decode_FCVT_Z_P_Z_S2H(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "0x") {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(18usize, 3usize)?,
                "00x",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let opc_slice = reader.extract_slice(16usize, 3usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "111") {
                    match decode::generated::decode_blocks::decode_FRINTI_Z_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "110") {
                    match decode::generated::decode_blocks::decode_FRINTX_Z_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "101") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "100") {
                    match decode::generated::decode_blocks::decode_FRINTA_Z_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "011") {
                    match decode::generated::decode_blocks::decode_FRINTZ_Z_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "010") {
                    match decode::generated::decode_blocks::decode_FRINTM_Z_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "001") {
                    match decode::generated::decode_blocks::decode_FRINTP_Z_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "000") {
                    match decode::generated::decode_blocks::decode_FRINTN_Z_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "0xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "100xxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "11",
            )
                && !decode::BitReader::match_bits(
                    &reader.extract_slice(6usize, 4usize)?,
                    "0000",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "11",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(6usize, 4usize)?,
                    "0000",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let opc_slice = reader.extract_slice(16usize, 3usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let i1_slice = reader.extract_slice(5usize, 1usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "111") {
                    match decode::generated::decode_blocks::decode_FMIN_Z_P_ZS__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "110") {
                    match decode::generated::decode_blocks::decode_FMAX_Z_P_ZS__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "101") {
                    match decode::generated::decode_blocks::decode_FMINNM_Z_P_ZS__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "100") {
                    match decode::generated::decode_blocks::decode_FMAXNM_Z_P_ZS__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "011") {
                    match decode::generated::decode_blocks::decode_FSUBR_Z_P_ZS__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "010") {
                    match decode::generated::decode_blocks::decode_FMUL_Z_P_ZS__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "001") {
                    match decode::generated::decode_blocks::decode_FSUB_Z_P_ZS__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "000") {
                    match decode::generated::decode_blocks::decode_FADD_Z_P_ZS__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "10",
            )
                && !decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 3usize)?,
                    "000",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "10",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 3usize)?,
                    "000",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let imm3_slice = reader.extract_slice(16usize, 3usize)?;
                let Zm_slice = reader.extract_slice(5usize, 5usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                match decode::generated::decode_blocks::decode_FTMAD_Z_ZZI__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "0x",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let opc_slice = reader.extract_slice(16usize, 4usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zm_slice = reader.extract_slice(5usize, 5usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "111x") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "1101") {
                    match decode::generated::decode_blocks::decode_FDIV_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "1100") {
                    match decode::generated::decode_blocks::decode_FDIVR_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "1011") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "1010") {
                    match decode::generated::decode_blocks::decode_FMULX_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "1001") {
                    match decode::generated::decode_blocks::decode_FSCALE_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "1000") {
                    match decode::generated::decode_blocks::decode_FABD_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "0111") {
                    match decode::generated::decode_blocks::decode_FMIN_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "0110") {
                    match decode::generated::decode_blocks::decode_FMAX_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "0101") {
                    match decode::generated::decode_blocks::decode_FMINNM_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "0100") {
                    match decode::generated::decode_blocks::decode_FMAXNM_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "0011") {
                    match decode::generated::decode_blocks::decode_FSUBR_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "0010") {
                    match decode::generated::decode_blocks::decode_FMUL_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "0001") {
                    match decode::generated::decode_blocks::decode_FSUB_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "0000") {
                    match decode::generated::decode_blocks::decode_FADD_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "0xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "000xxx",
            )
        {
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let Zm_slice = reader.extract_slice(16usize, 5usize)?;
            let opc_slice = reader.extract_slice(10usize, 3usize)?;
            let Zn_slice = reader.extract_slice(5usize, 5usize)?;
            let Zd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&opc_slice, "111") {
                match decode::generated::decode_blocks::decode_FRSQRTS_Z_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "110") {
                match decode::generated::decode_blocks::decode_FRECPS_Z_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "10x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "011") {
                match decode::generated::decode_blocks::decode_FTSMUL_Z_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "010") {
                match decode::generated::decode_blocks::decode_FMUL_Z_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "001") {
                match decode::generated::decode_blocks::decode_FSUB_Z_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "000") {
                match decode::generated::decode_blocks::decode_FADD_Z_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "0xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "x1xxxx",
            )
        {
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let Zm_slice = reader.extract_slice(16usize, 5usize)?;
            let op_slice = reader.extract_slice(15usize, 1usize)?;
            let o2_slice = reader.extract_slice(13usize, 1usize)?;
            let Pg_slice = reader.extract_slice(10usize, 3usize)?;
            let Zn_slice = reader.extract_slice(5usize, 5usize)?;
            let o3_slice = reader.extract_slice(4usize, 1usize)?;
            let Pd_slice = reader.extract_slice(0usize, 4usize)?;
            if decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "1")
            {
                match decode::generated::decode_blocks::decode_FACGT_P_P_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "1")
            {
                match decode::generated::decode_blocks::decode_FACGE_P_P_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
            {
                match decode::generated::decode_blocks::decode_FCMUO_P_P_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "1")
            {
                match decode::generated::decode_blocks::decode_FCMNE_P_P_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
            {
                match decode::generated::decode_blocks::decode_FCMEQ_P_P_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "1")
            {
                match decode::generated::decode_blocks::decode_FCMGT_P_P_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
            {
                match decode::generated::decode_blocks::decode_FCMGE_P_P_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "1111xx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "11101x",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "111001",
            )
        {
            let opc_slice = reader.extract_slice(22usize, 2usize)?;
            let Zm_slice = reader.extract_slice(16usize, 5usize)?;
            let Zn_slice = reader.extract_slice(5usize, 5usize)?;
            let Zda_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&opc_slice, "11") {
                match decode::generated::decode_blocks::decode_FMMLA_Z_ZZZ_D(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "10") {
                match decode::generated::decode_blocks::decode_FMMLA_Z_ZZZ_S(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01") {
                match decode::generated::decode_blocks::decode_BFMMLA_Z_ZZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "00") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "111000",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "110xxx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "10x1xx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "10x00x",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 1usize)?,
                "1",
            ) {
                let o2_slice = reader.extract_slice(22usize, 1usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let op_slice = reader.extract_slice(13usize, 1usize)?;
                let T_slice = reader.extract_slice(10usize, 1usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zda_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&o2_slice, "1")
                    && decode::BitReader::match_bits(&op_slice, "1")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&o2_slice, "1")
                    && decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&T_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_BFMLALT_Z_ZZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&o2_slice, "1")
                    && decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&T_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_BFMLALB_Z_ZZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&o2_slice, "0") {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 1usize)?,
                    "1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 1usize)?,
                    "1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 1usize)?,
                    "0",
                )
            {
                let op_slice = reader.extract_slice(22usize, 1usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zda_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&op_slice, "1") {
                    match decode::generated::decode_blocks::decode_BFDOT_Z_ZZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "0") {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "01x1xx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "01x0xx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 1usize)?,
                "1",
            ) {
                let o2_slice = reader.extract_slice(22usize, 1usize)?;
                let i3h_slice = reader.extract_slice(19usize, 2usize)?;
                let Zm_slice = reader.extract_slice(16usize, 3usize)?;
                let op_slice = reader.extract_slice(13usize, 1usize)?;
                let i3l_slice = reader.extract_slice(11usize, 1usize)?;
                let T_slice = reader.extract_slice(10usize, 1usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zda_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&o2_slice, "1")
                    && decode::BitReader::match_bits(&op_slice, "1")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&o2_slice, "1")
                    && decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&T_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_BFMLALT_Z_ZZZi__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&o2_slice, "1")
                    && decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&T_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_BFMLALB_Z_ZZZi__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&o2_slice, "0") {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 1usize)?,
                    "1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 1usize)?,
                    "0",
                )
                && !decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "00",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "00",
                )
            {
                let op_slice = reader.extract_slice(22usize, 1usize)?;
                let i2_slice = reader.extract_slice(19usize, 2usize)?;
                let Zm_slice = reader.extract_slice(16usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zda_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&op_slice, "1") {
                    match decode::generated::decode_blocks::decode_BFDOT_Z_ZZZi__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "0") {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "0011xx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "001001",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "001000",
            )
        {
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let opc_slice = reader.extract_slice(16usize, 5usize)?;
            let Zn_slice = reader.extract_slice(5usize, 5usize)?;
            let Zd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&size_slice, "11") {
                match decode::generated::decode_blocks::decode_FMUL_Z_ZZi_D(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10") {
                match decode::generated::decode_blocks::decode_FMUL_Z_ZZi_S(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "0x") {
                match decode::generated::decode_blocks::decode_FMUL_Z_ZZi_H(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "0001xx",
            )
        {
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let opc_slice = reader.extract_slice(16usize, 5usize)?;
            let rot_slice = reader.extract_slice(10usize, 2usize)?;
            let Zn_slice = reader.extract_slice(5usize, 5usize)?;
            let Zda_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&size_slice, "11") {
                match decode::generated::decode_blocks::decode_FCMLA_Z_ZZZi_S(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10") {
                match decode::generated::decode_blocks::decode_FCMLA_Z_ZZZi_H(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "0x") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "00000x",
            )
        {
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let opc_slice = reader.extract_slice(16usize, 5usize)?;
            let op_slice = reader.extract_slice(10usize, 1usize)?;
            let Zn_slice = reader.extract_slice(5usize, 5usize)?;
            let Zda_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&op_slice, "1")
            {
                match decode::generated::decode_blocks::decode_FMLS_Z_ZZZi_D(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "11")
                && decode::BitReader::match_bits(&op_slice, "0")
            {
                match decode::generated::decode_blocks::decode_FMLA_Z_ZZZi_D(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&op_slice, "1")
            {
                match decode::generated::decode_blocks::decode_FMLS_Z_ZZZi_S(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "10")
                && decode::BitReader::match_bits(&op_slice, "0")
            {
                match decode::generated::decode_blocks::decode_FMLA_Z_ZZZi_S(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&op_slice, "1")
            {
                match decode::generated::decode_blocks::decode_FMLS_Z_ZZZi_H(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&size_slice, "0x")
                && decode::BitReader::match_bits(&op_slice, "0")
            {
                match decode::generated::decode_blocks::decode_FMLA_Z_ZZZi_H(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "x0x01x",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "01xxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "1xxxxx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "0010x",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "11xxxx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "0010x",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "101xxx",
            )
        {
            let opc_slice = reader.extract_slice(22usize, 2usize)?;
            let opc2_slice = reader.extract_slice(16usize, 2usize)?;
            let Pg_slice = reader.extract_slice(10usize, 3usize)?;
            let Zn_slice = reader.extract_slice(5usize, 5usize)?;
            let Zd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&opc_slice, "11") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&opc2_slice, "11")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&opc2_slice, "10")
            {
                match decode::generated::decode_blocks::decode_BFCVTNT_Z_P_Z_S2BF(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "10")
                && decode::BitReader::match_bits(&opc2_slice, "0x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "0x") {
                instruction = common::types::Instruction::UNALLOC;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "0010x",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "100xxx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "00001",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "1xxxxx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "00000",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "11xxxx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "00000",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "101xxx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "00000",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "100xxx",
            )
        {
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let rot_slice = reader.extract_slice(16usize, 1usize)?;
            let Pg_slice = reader.extract_slice(10usize, 3usize)?;
            let Zm_slice = reader.extract_slice(5usize, 5usize)?;
            let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
            match decode::generated::decode_blocks::decode_FCADD_Z_P_ZZ__(reader) {
                Ok(instr) => instruction = instr,
                Err(AArch64LifterError::UndefinedInstruction) => {
                    instruction = common::types::Instruction::UNDEF;
                }
                Err(e) => return Err(e),
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "00x1x",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "1xxxxx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "011",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "0xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "0xxxxx",
            )
        {
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let Zm_slice = reader.extract_slice(16usize, 5usize)?;
            let rot_slice = reader.extract_slice(13usize, 2usize)?;
            let Pg_slice = reader.extract_slice(10usize, 3usize)?;
            let Zn_slice = reader.extract_slice(5usize, 5usize)?;
            let Zda_slice = reader.extract_slice(0usize, 5usize)?;
            match decode::generated::decode_blocks::decode_FCMLA_Z_P_ZZZ__(reader) {
                Ok(instr) => instruction = instr,
                Err(AArch64LifterError::UndefinedInstruction) => {
                    instruction = common::types::Instruction::UNDEF;
                }
                Err(e) => return Err(e),
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "010",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "010",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "0xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "11xxxx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "010",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "0xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "10xxxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 4usize)?,
                "1xxx",
            ) {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 4usize)?,
                "0111",
            ) {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 4usize)?,
                "0110",
            ) {
                let uns_slice = reader.extract_slice(22usize, 2usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&uns_slice, "11") {
                    match decode::generated::decode_blocks::decode_UMMLA_Z_ZZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&uns_slice, "10") {
                    match decode::generated::decode_blocks::decode_USMMLA_Z_ZZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&uns_slice, "01") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&uns_slice, "00") {
                    match decode::generated::decode_blocks::decode_SMMLA_Z_ZZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 4usize)?,
                "010x",
            ) {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 4usize)?,
                "00xx",
            ) {
                instruction = common::types::Instruction::UNPRED;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "010",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "0xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "0xxxxx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "010",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
        {
            if !decode::BitReader::match_bits(
                &reader.extract_slice(13usize, 3usize)?,
                "000",
            ) {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(13usize, 3usize)?,
                "000",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 2usize)?,
                    "11",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let opc_slice = reader.extract_slice(16usize, 5usize)?;
                let U_slice = reader.extract_slice(10usize, 1usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zda_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&size_slice, "11") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&size_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_SUDOT_Z_ZZZi_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_USDOT_Z_ZZZi_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "0x") {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(13usize, 3usize)?,
                "000",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 2usize)?,
                    "10",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(13usize, 3usize)?,
                "000",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 2usize)?,
                    "01",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(13usize, 3usize)?,
                "000",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 2usize)?,
                    "00",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let opc_slice = reader.extract_slice(16usize, 5usize)?;
                let U_slice = reader.extract_slice(10usize, 1usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zda_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&size_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UDOT_Z_ZZZi_D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "11")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SDOT_Z_ZZZi_D(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UDOT_Z_ZZZi_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SDOT_Z_ZZZi_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "0x") {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "010",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "0xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "1xxxxx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "010",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "0xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "0xxxxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(14usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "111",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 1usize)?,
                    "1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(14usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "111",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 1usize)?,
                    "0",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zda_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&size_slice, "11") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&size_slice, "10") {
                    match decode::generated::decode_blocks::decode_USDOT_Z_ZZZ_S(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "0x") {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(14usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "110",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(14usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "10x",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(14usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "0xx",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(14usize, 1usize)?,
                "0",
            )
                && !decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "000",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(14usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "000",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let U_slice = reader.extract_slice(10usize, 1usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zda_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&U_slice, "1") {
                    match decode::generated::decode_blocks::decode_UDOT_Z_ZZZ__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&U_slice, "0") {
                    match decode::generated::decode_blocks::decode_SDOT_Z_ZZZ__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "001",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "11xxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "10xxxx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "001",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "101xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "101xxx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "001",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "101xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "1001xx",
            )
        {
            if !decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 2usize)?,
                "00",
            ) {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 2usize)?,
                "00",
            )
                && !decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 3usize)?,
                    "000",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 3usize)?,
                    "000",
                )
                && !decode::BitReader::match_bits(
                    &reader.extract_slice(0usize, 5usize)?,
                    "00000",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(18usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 2usize)?,
                    "00",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 3usize)?,
                    "000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(5usize, 4usize)?,
                    "xxx1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(0usize, 5usize)?,
                    "00000",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(18usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 2usize)?,
                    "00",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 3usize)?,
                    "000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(5usize, 4usize)?,
                    "xx1x",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(0usize, 5usize)?,
                    "00000",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(18usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 2usize)?,
                    "00",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 3usize)?,
                    "000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(5usize, 4usize)?,
                    "x1xx",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(0usize, 5usize)?,
                    "00000",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(18usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 2usize)?,
                    "00",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 3usize)?,
                    "000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(5usize, 4usize)?,
                    "1xxx",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(0usize, 5usize)?,
                    "00000",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(18usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 2usize)?,
                    "00",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 3usize)?,
                    "000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(5usize, 4usize)?,
                    "0000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(0usize, 5usize)?,
                    "00000",
                )
            {
                let opc_slice = reader.extract_slice(22usize, 2usize)?;
                if decode::BitReader::match_bits(&opc_slice, "1x") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "01") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "00") {
                    match decode::generated::decode_blocks::decode_SETFFR_F__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(18usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 2usize)?,
                    "00",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 3usize)?,
                    "000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(0usize, 5usize)?,
                    "00000",
                )
            {
                let opc_slice = reader.extract_slice(22usize, 2usize)?;
                let Pn_slice = reader.extract_slice(5usize, 4usize)?;
                if decode::BitReader::match_bits(&opc_slice, "1x") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "01") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "00") {
                    match decode::generated::decode_blocks::decode_WRFFR_F_P__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "001",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "101xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "1000xx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(18usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 1usize)?,
                    "1",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let op_slice = reader.extract_slice(17usize, 1usize)?;
                let D_slice = reader.extract_slice(16usize, 1usize)?;
                let opc2_slice = reader.extract_slice(9usize, 2usize)?;
                let Pm_slice = reader.extract_slice(5usize, 4usize)?;
                let Rdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&op_slice, "1") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&opc2_slice, "00")
                {
                    match decode::generated::decode_blocks::decode_DECP_R_P_R__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&opc2_slice, "00")
                {
                    match decode::generated::decode_blocks::decode_INCP_R_P_R__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&opc2_slice, "1x")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&opc2_slice, "01")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(18usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 1usize)?,
                    "0",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let op_slice = reader.extract_slice(17usize, 1usize)?;
                let D_slice = reader.extract_slice(16usize, 1usize)?;
                let opc2_slice = reader.extract_slice(9usize, 2usize)?;
                let Pm_slice = reader.extract_slice(5usize, 4usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&op_slice, "1") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&opc2_slice, "00")
                {
                    match decode::generated::decode_blocks::decode_DECP_Z_P_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&opc2_slice, "00")
                {
                    match decode::generated::decode_blocks::decode_INCP_Z_P_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&opc2_slice, "1x")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&opc2_slice, "01")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(18usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 1usize)?,
                    "1",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let D_slice = reader.extract_slice(17usize, 1usize)?;
                let U_slice = reader.extract_slice(16usize, 1usize)?;
                let sf_slice = reader.extract_slice(10usize, 1usize)?;
                let op_slice = reader.extract_slice(9usize, 1usize)?;
                let Pm_slice = reader.extract_slice(5usize, 4usize)?;
                let Rdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&sf_slice, "1")
                    && decode::BitReader::match_bits(&op_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_UQDECP_R_P_R_X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&sf_slice, "0")
                    && decode::BitReader::match_bits(&op_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_UQDECP_R_P_R_UW(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&sf_slice, "1")
                    && decode::BitReader::match_bits(&op_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQDECP_R_P_R_X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&sf_slice, "0")
                    && decode::BitReader::match_bits(&op_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQDECP_R_P_R_SX(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&sf_slice, "1")
                    && decode::BitReader::match_bits(&op_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_UQINCP_R_P_R_X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&sf_slice, "0")
                    && decode::BitReader::match_bits(&op_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_UQINCP_R_P_R_UW(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&sf_slice, "1")
                    && decode::BitReader::match_bits(&op_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQINCP_R_P_R_X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&sf_slice, "0")
                    && decode::BitReader::match_bits(&op_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQINCP_R_P_R_SX(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "1") {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(18usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 1usize)?,
                    "0",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let D_slice = reader.extract_slice(17usize, 1usize)?;
                let U_slice = reader.extract_slice(16usize, 1usize)?;
                let opc_slice = reader.extract_slice(9usize, 2usize)?;
                let Pm_slice = reader.extract_slice(5usize, 4usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&opc_slice, "00")
                {
                    match decode::generated::decode_blocks::decode_UQDECP_Z_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&opc_slice, "00")
                {
                    match decode::generated::decode_blocks::decode_SQDECP_Z_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&opc_slice, "00")
                {
                    match decode::generated::decode_blocks::decode_UQINCP_Z_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&opc_slice, "00")
                {
                    match decode::generated::decode_blocks::decode_SQINCP_Z_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "1x") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "01") {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "001",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "100xx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "10xxxx",
            )
        {
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let opc_slice = reader.extract_slice(16usize, 3usize)?;
            let Pg_slice = reader.extract_slice(10usize, 4usize)?;
            let o2_slice = reader.extract_slice(9usize, 1usize)?;
            let Pn_slice = reader.extract_slice(5usize, 4usize)?;
            let Rd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&opc_slice, "1xx") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "01x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "001") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "000")
                && decode::BitReader::match_bits(&o2_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "000")
                && decode::BitReader::match_bits(&o2_slice, "0")
            {
                match decode::generated::decode_blocks::decode_CNTP_R_P_P__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "001",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "11xxxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "11",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "1",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let opc_slice = reader.extract_slice(17usize, 2usize)?;
                let o2_slice = reader.extract_slice(13usize, 1usize)?;
                let imm8_slice = reader.extract_slice(5usize, 8usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "1x") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "01") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "00")
                    && decode::BitReader::match_bits(&o2_slice, "1")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "00")
                    && decode::BitReader::match_bits(&o2_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_FDUP_Z_I__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "11",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "0",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let opc_slice = reader.extract_slice(17usize, 2usize)?;
                let sh_slice = reader.extract_slice(13usize, 1usize)?;
                let imm8_slice = reader.extract_slice(5usize, 8usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "1x") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "01") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "00") {
                    match decode::generated::decode_blocks::decode_DUP_Z_I__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "10",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let opc_slice = reader.extract_slice(16usize, 3usize)?;
                let o2_slice = reader.extract_slice(13usize, 1usize)?;
                let imm8_slice = reader.extract_slice(5usize, 8usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "1xx") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "01x") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "001") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "000")
                    && decode::BitReader::match_bits(&o2_slice, "1")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "000")
                    && decode::BitReader::match_bits(&o2_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_MUL_Z_ZI__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "01",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let opc_slice = reader.extract_slice(16usize, 3usize)?;
                let o2_slice = reader.extract_slice(13usize, 1usize)?;
                let imm8_slice = reader.extract_slice(5usize, 8usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "1xx") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "011")
                    && decode::BitReader::match_bits(&o2_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_UMIN_Z_ZI__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "010")
                    && decode::BitReader::match_bits(&o2_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SMIN_Z_ZI__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "001")
                    && decode::BitReader::match_bits(&o2_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_UMAX_Z_ZI__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "000")
                    && decode::BitReader::match_bits(&o2_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SMAX_Z_ZI__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "0xx")
                    && decode::BitReader::match_bits(&o2_slice, "1")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "00",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let opc_slice = reader.extract_slice(16usize, 3usize)?;
                let sh_slice = reader.extract_slice(13usize, 1usize)?;
                let imm8_slice = reader.extract_slice(5usize, 8usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "111") {
                    match decode::generated::decode_blocks::decode_UQSUB_Z_ZI__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "110") {
                    match decode::generated::decode_blocks::decode_SQSUB_Z_ZI__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "101") {
                    match decode::generated::decode_blocks::decode_UQADD_Z_ZI__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "100") {
                    match decode::generated::decode_blocks::decode_SQADD_Z_ZI__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "011") {
                    match decode::generated::decode_blocks::decode_SUBR_Z_ZI__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "010") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "001") {
                    match decode::generated::decode_blocks::decode_SUB_Z_ZI__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "000") {
                    match decode::generated::decode_blocks::decode_ADD_Z_ZI__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "001",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "01xxxx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "001",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "00xxxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(13usize, 1usize)?,
                "1",
            )
                && !decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 3usize)?,
                    "000",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(13usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 3usize)?,
                    "000",
                )
                && !decode::BitReader::match_bits(
                    &reader.extract_slice(0usize, 4usize)?,
                    "0000",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(13usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 3usize)?,
                    "000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(0usize, 4usize)?,
                    "0000",
                )
            {
                let op_slice = reader.extract_slice(23usize, 1usize)?;
                let sz_slice = reader.extract_slice(22usize, 1usize)?;
                let Rm_slice = reader.extract_slice(16usize, 5usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let ne_slice = reader.extract_slice(4usize, 1usize)?;
                if decode::BitReader::match_bits(&op_slice, "1")
                    && decode::BitReader::match_bits(&ne_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_CTERMNE_RR__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "1")
                    && decode::BitReader::match_bits(&ne_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_CTERMEQ_RR__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "0") {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(13usize, 1usize)?,
                "0",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Rm_slice = reader.extract_slice(16usize, 5usize)?;
                let sf_slice = reader.extract_slice(12usize, 1usize)?;
                let U_slice = reader.extract_slice(11usize, 1usize)?;
                let lt_slice = reader.extract_slice(10usize, 1usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let eq_slice = reader.extract_slice(4usize, 1usize)?;
                let Pd_slice = reader.extract_slice(0usize, 4usize)?;
                if decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&lt_slice, "1")
                    && decode::BitReader::match_bits(&eq_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_WHILELS_P_P_RR__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&lt_slice, "1")
                    && decode::BitReader::match_bits(&eq_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_WHILELO_P_P_RR__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&lt_slice, "1")
                    && decode::BitReader::match_bits(&eq_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_WHILELE_P_P_RR__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&lt_slice, "1")
                    && decode::BitReader::match_bits(&eq_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_WHILELT_P_P_RR__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&lt_slice, "0") {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "001",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "01xxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "11xxxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(4usize, 1usize)?,
                "1",
            ) {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 4usize)?,
                "1x1x",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 4usize)?,
                "110x",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 4usize)?,
                "100x",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "xx1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 4usize)?,
                "100x",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "110",
                )
                && !decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 2usize)?,
                    "00",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 4usize)?,
                "100x",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "100",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 2usize)?,
                    "11",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 4usize)?,
                "100x",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "100",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 2usize)?,
                    "0x",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let S_slice = reader.extract_slice(16usize, 1usize)?;
                let pattern_slice = reader.extract_slice(5usize, 5usize)?;
                let Pd_slice = reader.extract_slice(0usize, 4usize)?;
                if decode::BitReader::match_bits(&S_slice, "1") {
                    match decode::generated::decode_blocks::decode_PTRUES_P_S__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&S_slice, "0") {
                    match decode::generated::decode_blocks::decode_PTRUE_P_S__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 4usize)?,
                "100x",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "010",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 4usize)?,
                "1001",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "110",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 2usize)?,
                    "00",
                )
                && !decode::BitReader::match_bits(
                    &reader.extract_slice(5usize, 4usize)?,
                    "0000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 4usize)?,
                "1001",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "110",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 2usize)?,
                    "00",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(5usize, 4usize)?,
                    "0000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                let op_slice = reader.extract_slice(23usize, 1usize)?;
                let S_slice = reader.extract_slice(22usize, 1usize)?;
                let Pd_slice = reader.extract_slice(0usize, 4usize)?;
                if decode::BitReader::match_bits(&op_slice, "1") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&S_slice, "1")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&S_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_RDFFR_P_F__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 4usize)?,
                "1001",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "100",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 2usize)?,
                    "10",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 4usize)?,
                "1001",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 2usize)?,
                    "11",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 4usize)?,
                "1001",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 2usize)?,
                    "10",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Pg_slice = reader.extract_slice(5usize, 4usize)?;
                let Pdn_slice = reader.extract_slice(0usize, 4usize)?;
                match decode::generated::decode_blocks::decode_PNEXT_P_P_P__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 4usize)?,
                "1001",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 2usize)?,
                    "0x",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 4usize)?,
                "1000",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "110",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 2usize)?,
                    "00",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                let op_slice = reader.extract_slice(23usize, 1usize)?;
                let S_slice = reader.extract_slice(22usize, 1usize)?;
                let Pg_slice = reader.extract_slice(5usize, 4usize)?;
                let Pd_slice = reader.extract_slice(0usize, 4usize)?;
                if decode::BitReader::match_bits(&op_slice, "1") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&S_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_RDFFRS_P_P_F__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&S_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_RDFFR_P_P_F__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 4usize)?,
                "1000",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "100",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 2usize)?,
                    "10",
                )
                && !decode::BitReader::match_bits(
                    &reader.extract_slice(5usize, 4usize)?,
                    "0000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 4usize)?,
                "1000",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "100",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 2usize)?,
                    "10",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(5usize, 4usize)?,
                    "0000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                let op_slice = reader.extract_slice(23usize, 1usize)?;
                let S_slice = reader.extract_slice(22usize, 1usize)?;
                let Pd_slice = reader.extract_slice(0usize, 4usize)?;
                if decode::BitReader::match_bits(&op_slice, "1") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&S_slice, "1")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&S_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_PFALSE_P__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 4usize)?,
                "1000",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "000",
                )
                && !decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 2usize)?,
                    "00",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 4usize)?,
                "1000",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 2usize)?,
                    "00",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                let op_slice = reader.extract_slice(23usize, 1usize)?;
                let S_slice = reader.extract_slice(22usize, 1usize)?;
                let Pg_slice = reader.extract_slice(5usize, 4usize)?;
                let Pdn_slice = reader.extract_slice(0usize, 4usize)?;
                if decode::BitReader::match_bits(&op_slice, "1") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&S_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_PFIRST_P_P_P__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&S_slice, "0")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 4usize)?,
                "0xxx",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 2usize)?,
                    "x1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 4usize)?,
                "0xx1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 2usize)?,
                    "x0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 4usize)?,
                "0x10",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 2usize)?,
                    "x0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 4usize)?,
                "0100",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 2usize)?,
                    "x0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 4usize)?,
                "0000",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 2usize)?,
                    "x0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                let op_slice = reader.extract_slice(23usize, 1usize)?;
                let S_slice = reader.extract_slice(22usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 4usize)?;
                let Pn_slice = reader.extract_slice(5usize, 4usize)?;
                let opc2_slice = reader.extract_slice(0usize, 4usize)?;
                if decode::BitReader::match_bits(&op_slice, "1") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&S_slice, "1")
                    && decode::BitReader::match_bits(&opc2_slice, "1xxx")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&S_slice, "1")
                    && decode::BitReader::match_bits(&opc2_slice, "01xx")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&S_slice, "1")
                    && decode::BitReader::match_bits(&opc2_slice, "001x")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&S_slice, "1")
                    && decode::BitReader::match_bits(&opc2_slice, "0001")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&S_slice, "1")
                    && decode::BitReader::match_bits(&opc2_slice, "0000")
                {
                    match decode::generated::decode_blocks::decode_PTEST__P_P__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&S_slice, "0")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "001",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "01xxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "01xxxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 4usize)?,
                "0000",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 1usize)?,
                    "0",
                )
            {
                let B_slice = reader.extract_slice(23usize, 1usize)?;
                let S_slice = reader.extract_slice(22usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 4usize)?;
                let Pn_slice = reader.extract_slice(5usize, 4usize)?;
                let M_slice = reader.extract_slice(4usize, 1usize)?;
                let Pd_slice = reader.extract_slice(0usize, 4usize)?;
                if decode::BitReader::match_bits(&B_slice, "1")
                    && decode::BitReader::match_bits(&S_slice, "1")
                    && decode::BitReader::match_bits(&M_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_BRKBS_P_P_P_Z(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&B_slice, "1")
                    && decode::BitReader::match_bits(&S_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_BRKB_P_P_P__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&B_slice, "0")
                    && decode::BitReader::match_bits(&S_slice, "1")
                    && decode::BitReader::match_bits(&M_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_BRKAS_P_P_P_Z(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&B_slice, "0")
                    && decode::BitReader::match_bits(&S_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_BRKA_P_P_P__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&S_slice, "1")
                    && decode::BitReader::match_bits(&M_slice, "1")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 1usize)?,
                "1",
            )
                && !decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 4usize)?,
                    "0000",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 4usize)?,
                    "0000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 1usize)?,
                    "1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 4usize)?,
                    "xxx1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 4usize)?,
                    "xx1x",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 4usize)?,
                    "x1xx",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 4usize)?,
                    "x000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 1usize)?,
                    "1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 4usize)?,
                    "1000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 4usize)?,
                    "1000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                let S_slice = reader.extract_slice(22usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 4usize)?;
                let Pn_slice = reader.extract_slice(5usize, 4usize)?;
                let Pdm_slice = reader.extract_slice(0usize, 4usize)?;
                if decode::BitReader::match_bits(&S_slice, "1") {
                    match decode::generated::decode_blocks::decode_BRKNS_P_P_PP__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&S_slice, "0") {
                    match decode::generated::decode_blocks::decode_BRKN_P_P_PP__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "001",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "00xxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "11xxxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(9usize, 1usize)?,
                "1",
            ) {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(9usize, 1usize)?,
                "0",
            ) {
                let op_slice = reader.extract_slice(23usize, 1usize)?;
                let S_slice = reader.extract_slice(22usize, 1usize)?;
                let Pm_slice = reader.extract_slice(16usize, 4usize)?;
                let Pg_slice = reader.extract_slice(10usize, 4usize)?;
                let Pn_slice = reader.extract_slice(5usize, 4usize)?;
                let B_slice = reader.extract_slice(4usize, 1usize)?;
                let Pd_slice = reader.extract_slice(0usize, 4usize)?;
                if decode::BitReader::match_bits(&op_slice, "1") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&S_slice, "1")
                    && decode::BitReader::match_bits(&B_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_BRKPBS_P_P_PP__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&S_slice, "1")
                    && decode::BitReader::match_bits(&B_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_BRKPAS_P_P_PP__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&S_slice, "0")
                    && decode::BitReader::match_bits(&B_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_BRKPB_P_P_PP__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&S_slice, "0")
                    && decode::BitReader::match_bits(&B_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_BRKPA_P_P_PP__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "001",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "00xxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "01xxxx",
            )
        {
            let op_slice = reader.extract_slice(23usize, 1usize)?;
            let S_slice = reader.extract_slice(22usize, 1usize)?;
            let Pm_slice = reader.extract_slice(16usize, 4usize)?;
            let Pg_slice = reader.extract_slice(10usize, 4usize)?;
            let o2_slice = reader.extract_slice(9usize, 1usize)?;
            let Pn_slice = reader.extract_slice(5usize, 4usize)?;
            let o3_slice = reader.extract_slice(4usize, 1usize)?;
            let Pd_slice = reader.extract_slice(0usize, 4usize)?;
            if decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "1")
            {
                match decode::generated::decode_blocks::decode_NANDS_P_P_PP_Z(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
            {
                match decode::generated::decode_blocks::decode_NORS_P_P_PP_Z(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "1")
            {
                match decode::generated::decode_blocks::decode_ORNS_P_P_PP_Z(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
            {
                match decode::generated::decode_blocks::decode_ORRS_P_P_PP_Z(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "1")
            {
                match decode::generated::decode_blocks::decode_NAND_P_P_PP_Z(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
            {
                match decode::generated::decode_blocks::decode_NOR_P_P_PP_Z(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "1")
            {
                match decode::generated::decode_blocks::decode_ORN_P_P_PP_Z(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
            {
                match decode::generated::decode_blocks::decode_ORR_P_P_PP_Z(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
            {
                match decode::generated::decode_blocks::decode_EORS_P_P_PP_Z(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "1")
            {
                match decode::generated::decode_blocks::decode_BICS_P_P_PP_Z(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
            {
                match decode::generated::decode_blocks::decode_ANDS_P_P_PP_Z(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "1")
            {
                match decode::generated::decode_blocks::decode_SEL_P_P_PP__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&o3_slice, "0")
            {
                match decode::generated::decode_blocks::decode_EOR_P_P_PP_Z(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "1")
            {
                match decode::generated::decode_blocks::decode_BIC_P_P_PP_Z(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&S_slice, "0")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&o3_slice, "0")
            {
                match decode::generated::decode_blocks::decode_AND_P_P_PP_Z(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "001",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "0xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "x0xxxx",
            )
        {
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let imm5_slice = reader.extract_slice(16usize, 5usize)?;
            let op_slice = reader.extract_slice(15usize, 1usize)?;
            let o2_slice = reader.extract_slice(13usize, 1usize)?;
            let Pg_slice = reader.extract_slice(10usize, 3usize)?;
            let Zn_slice = reader.extract_slice(5usize, 5usize)?;
            let ne_slice = reader.extract_slice(4usize, 1usize)?;
            let Pd_slice = reader.extract_slice(0usize, 4usize)?;
            if decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "1")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&ne_slice, "1")
            {
                match decode::generated::decode_blocks::decode_CMPNE_P_P_ZI__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "1")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&ne_slice, "0")
            {
                match decode::generated::decode_blocks::decode_CMPEQ_P_P_ZI__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&ne_slice, "1")
            {
                match decode::generated::decode_blocks::decode_CMPLE_P_P_ZI__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&o2_slice, "1")
                && decode::BitReader::match_bits(&ne_slice, "0")
            {
                match decode::generated::decode_blocks::decode_CMPLT_P_P_ZI__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&ne_slice, "1")
            {
                match decode::generated::decode_blocks::decode_CMPGT_P_P_ZI__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&o2_slice, "0")
                && decode::BitReader::match_bits(&ne_slice, "0")
            {
                match decode::generated::decode_blocks::decode_CMPGE_P_P_ZI__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "001",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
        {
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let imm7_slice = reader.extract_slice(14usize, 7usize)?;
            let lt_slice = reader.extract_slice(13usize, 1usize)?;
            let Pg_slice = reader.extract_slice(10usize, 3usize)?;
            let Zn_slice = reader.extract_slice(5usize, 5usize)?;
            let ne_slice = reader.extract_slice(4usize, 1usize)?;
            let Pd_slice = reader.extract_slice(0usize, 4usize)?;
            if decode::BitReader::match_bits(&lt_slice, "1")
                && decode::BitReader::match_bits(&ne_slice, "1")
            {
                match decode::generated::decode_blocks::decode_CMPLS_P_P_ZI__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&lt_slice, "1")
                && decode::BitReader::match_bits(&ne_slice, "0")
            {
                match decode::generated::decode_blocks::decode_CMPLO_P_P_ZI__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&lt_slice, "0")
                && decode::BitReader::match_bits(&ne_slice, "1")
            {
                match decode::generated::decode_blocks::decode_CMPHI_P_P_ZI__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&lt_slice, "0")
                && decode::BitReader::match_bits(&ne_slice, "0")
            {
                match decode::generated::decode_blocks::decode_CMPHS_P_P_ZI__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "001",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "0xxxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(14usize, 1usize)?,
                "1",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let U_slice = reader.extract_slice(15usize, 1usize)?;
                let lt_slice = reader.extract_slice(13usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let ne_slice = reader.extract_slice(4usize, 1usize)?;
                let Pd_slice = reader.extract_slice(0usize, 4usize)?;
                if decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&lt_slice, "1")
                    && decode::BitReader::match_bits(&ne_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_CMPLS_P_P_ZW__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&lt_slice, "1")
                    && decode::BitReader::match_bits(&ne_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_CMPLO_P_P_ZW__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&lt_slice, "0")
                    && decode::BitReader::match_bits(&ne_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_CMPHI_P_P_ZW__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&lt_slice, "0")
                    && decode::BitReader::match_bits(&ne_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_CMPHS_P_P_ZW__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&lt_slice, "1")
                    && decode::BitReader::match_bits(&ne_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_CMPLE_P_P_ZW__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&lt_slice, "1")
                    && decode::BitReader::match_bits(&ne_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_CMPLT_P_P_ZW__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&lt_slice, "0")
                    && decode::BitReader::match_bits(&ne_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_CMPGT_P_P_ZW__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&lt_slice, "0")
                    && decode::BitReader::match_bits(&ne_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_CMPGE_P_P_ZW__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(14usize, 1usize)?,
                "0",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let op_slice = reader.extract_slice(15usize, 1usize)?;
                let o2_slice = reader.extract_slice(13usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let ne_slice = reader.extract_slice(4usize, 1usize)?;
                let Pd_slice = reader.extract_slice(0usize, 4usize)?;
                if decode::BitReader::match_bits(&op_slice, "1")
                    && decode::BitReader::match_bits(&o2_slice, "1")
                    && decode::BitReader::match_bits(&ne_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_CMPNE_P_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "1")
                    && decode::BitReader::match_bits(&o2_slice, "1")
                    && decode::BitReader::match_bits(&ne_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_CMPEQ_P_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "1")
                    && decode::BitReader::match_bits(&o2_slice, "0")
                    && decode::BitReader::match_bits(&ne_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_CMPGT_P_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "1")
                    && decode::BitReader::match_bits(&o2_slice, "0")
                    && decode::BitReader::match_bits(&ne_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_CMPGE_P_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&o2_slice, "1")
                    && decode::BitReader::match_bits(&ne_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_CMPNE_P_P_ZW__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&o2_slice, "1")
                    && decode::BitReader::match_bits(&ne_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_CMPEQ_P_P_ZW__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&o2_slice, "0")
                    && decode::BitReader::match_bits(&ne_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_CMPHI_P_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&o2_slice, "0")
                    && decode::BitReader::match_bits(&ne_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_CMPHS_P_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "11")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "000xxx",
            )
        {
            let op_slice = reader.extract_slice(22usize, 1usize)?;
            let Zm_slice = reader.extract_slice(16usize, 5usize)?;
            let opc2_slice = reader.extract_slice(10usize, 3usize)?;
            let Zn_slice = reader.extract_slice(5usize, 5usize)?;
            let Zd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&op_slice, "1") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&opc2_slice, "111")
            {
                match decode::generated::decode_blocks::decode_TRN2_Z_ZZ_Q(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&opc2_slice, "110")
            {
                match decode::generated::decode_blocks::decode_TRN1_Z_ZZ_Q(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&opc2_slice, "10x")
            {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&opc2_slice, "011")
            {
                match decode::generated::decode_blocks::decode_UZP2_Z_ZZ_Q(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&opc2_slice, "010")
            {
                match decode::generated::decode_blocks::decode_UZP1_Z_ZZ_Q(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&opc2_slice, "001")
            {
                match decode::generated::decode_blocks::decode_ZIP2_Z_ZZ_Q(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&op_slice, "0")
                && decode::BitReader::match_bits(&opc2_slice, "000")
            {
                match decode::generated::decode_blocks::decode_ZIP1_Z_ZZ_Q(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "10")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "000xxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(22usize, 1usize)?,
                "1",
            ) {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(22usize, 1usize)?,
                "0",
            ) {
                let imm8h_slice = reader.extract_slice(16usize, 5usize)?;
                let imm8l_slice = reader.extract_slice(10usize, 3usize)?;
                let Zm_slice = reader.extract_slice(5usize, 5usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                match decode::generated::decode_blocks::decode_EXT_Z_ZI_Des(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "11xxxx",
            )
        {
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let Zm_slice = reader.extract_slice(16usize, 5usize)?;
            let Pg_slice = reader.extract_slice(10usize, 4usize)?;
            let Zn_slice = reader.extract_slice(5usize, 5usize)?;
            let Zd_slice = reader.extract_slice(0usize, 5usize)?;
            match decode::generated::decode_blocks::decode_SEL_Z_P_ZZ__(reader) {
                Ok(instr) => instruction = instr,
                Err(AArch64LifterError::UndefinedInstruction) => {
                    instruction = common::types::Instruction::UNDEF;
                }
                Err(e) => return Err(e),
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "10xxxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "1",
            )
                && !decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 3usize)?,
                    "000",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 3usize)?,
                    "000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 1usize)?,
                    "1",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let B_slice = reader.extract_slice(16usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zm_slice = reader.extract_slice(5usize, 5usize)?;
                let Rdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&B_slice, "1") {
                    match decode::generated::decode_blocks::decode_CLASTB_R_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&B_slice, "0") {
                    match decode::generated::decode_blocks::decode_CLASTA_R_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 3usize)?,
                    "000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 3usize)?,
                    "x01",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 1usize)?,
                    "1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 3usize)?,
                    "111",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 3usize)?,
                    "111",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 3usize)?,
                    "110",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 3usize)?,
                    "110",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 1usize)?,
                    "1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 3usize)?,
                    "110",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 1usize)?,
                    "0",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zm_slice = reader.extract_slice(5usize, 5usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                match decode::generated::decode_blocks::decode_SPLICE_Z_P_ZZ_Des(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 3usize)?,
                    "101",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 1usize)?,
                    "0",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let B_slice = reader.extract_slice(16usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zm_slice = reader.extract_slice(5usize, 5usize)?;
                let Vdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&B_slice, "1") {
                    match decode::generated::decode_blocks::decode_CLASTB_V_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&B_slice, "0") {
                    match decode::generated::decode_blocks::decode_CLASTA_V_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 3usize)?,
                    "100",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 1usize)?,
                    "0",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let B_slice = reader.extract_slice(16usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zm_slice = reader.extract_slice(5usize, 5usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&B_slice, "1") {
                    match decode::generated::decode_blocks::decode_CLASTB_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&B_slice, "0") {
                    match decode::generated::decode_blocks::decode_CLASTA_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 3usize)?,
                    "100",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 1usize)?,
                    "1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 3usize)?,
                    "100",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 1usize)?,
                    "1",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                match decode::generated::decode_blocks::decode_CPY_Z_P_R__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 3usize)?,
                    "01x",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 1usize)?,
                    "1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 3usize)?,
                    "01x",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 1usize)?,
                    "0",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let opc_slice = reader.extract_slice(16usize, 2usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "11") {
                    match decode::generated::decode_blocks::decode_RBIT_Z_P_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10") {
                    match decode::generated::decode_blocks::decode_REVW_Z_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01") {
                    match decode::generated::decode_blocks::decode_REVH_Z_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "00") {
                    match decode::generated::decode_blocks::decode_REVB_Z_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 3usize)?,
                    "001",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 1usize)?,
                    "0",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let B_slice = reader.extract_slice(16usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Vd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&B_slice, "1") {
                    match decode::generated::decode_blocks::decode_LASTB_V_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&B_slice, "0") {
                    match decode::generated::decode_blocks::decode_LASTA_V_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 3usize)?,
                    "000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 1usize)?,
                    "1",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let B_slice = reader.extract_slice(16usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Rd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&B_slice, "1") {
                    match decode::generated::decode_blocks::decode_LASTB_R_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&B_slice, "0") {
                    match decode::generated::decode_blocks::decode_LASTA_R_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 3usize)?,
                    "000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 1usize)?,
                    "0",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                match decode::generated::decode_blocks::decode_COMPACT_Z_P_Z__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 3usize)?,
                    "000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(13usize, 1usize)?,
                    "0",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Vn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                match decode::generated::decode_blocks::decode_CPY_Z_P_V__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "011xxx",
            )
        {
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let Zm_slice = reader.extract_slice(16usize, 5usize)?;
            let opc_slice = reader.extract_slice(10usize, 3usize)?;
            let Zn_slice = reader.extract_slice(5usize, 5usize)?;
            let Zd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&opc_slice, "11x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "101") {
                match decode::generated::decode_blocks::decode_TRN2_Z_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "100") {
                match decode::generated::decode_blocks::decode_TRN1_Z_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "011") {
                match decode::generated::decode_blocks::decode_UZP2_Z_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "010") {
                match decode::generated::decode_blocks::decode_UZP1_Z_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "001") {
                match decode::generated::decode_blocks::decode_ZIP2_Z_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "000") {
                match decode::generated::decode_blocks::decode_ZIP1_Z_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "010xxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(4usize, 1usize)?,
                "1",
            ) {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 5usize)?,
                "11xxx",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 5usize)?,
                "10x1x",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 5usize)?,
                "10x0x",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 4usize)?,
                    "xxx1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 5usize)?,
                "10x0x",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 4usize)?,
                    "xx10",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 5usize)?,
                "10x0x",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 4usize)?,
                    "x100",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 5usize)?,
                "10x0x",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 4usize)?,
                    "1000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 5usize)?,
                "10101",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 4usize)?,
                    "0000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 5usize)?,
                "10100",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 4usize)?,
                    "0000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Pn_slice = reader.extract_slice(5usize, 4usize)?;
                let Pd_slice = reader.extract_slice(0usize, 4usize)?;
                match decode::generated::decode_blocks::decode_REV_P_P__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 5usize)?,
                "0xxxx",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 4usize)?,
                    "xxx1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 5usize)?,
                "0xxxx",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 4usize)?,
                    "xxx0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Pm_slice = reader.extract_slice(16usize, 4usize)?;
                let opc_slice = reader.extract_slice(11usize, 2usize)?;
                let H_slice = reader.extract_slice(10usize, 1usize)?;
                let Pn_slice = reader.extract_slice(5usize, 4usize)?;
                let Pd_slice = reader.extract_slice(0usize, 4usize)?;
                if decode::BitReader::match_bits(&opc_slice, "11") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&H_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_TRN2_P_PP__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&H_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_TRN1_P_PP__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&H_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UZP2_P_PP__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&H_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_UZP1_P_PP__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "00")
                    && decode::BitReader::match_bits(&H_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_ZIP2_P_PP__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "00")
                    && decode::BitReader::match_bits(&H_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_ZIP1_P_PP__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(22usize, 2usize)?,
                "11",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 5usize)?,
                    "1000x",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 4usize)?,
                    "0000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(22usize, 2usize)?,
                "10",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 5usize)?,
                    "1000x",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 4usize)?,
                    "0000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(22usize, 2usize)?,
                "01",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 5usize)?,
                    "1000x",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 4usize)?,
                    "0000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(22usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 5usize)?,
                    "1000x",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(9usize, 4usize)?,
                    "0000",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(4usize, 1usize)?,
                    "0",
                )
            {
                let H_slice = reader.extract_slice(16usize, 1usize)?;
                let Pn_slice = reader.extract_slice(5usize, 4usize)?;
                let Pd_slice = reader.extract_slice(0usize, 4usize)?;
                if decode::BitReader::match_bits(&H_slice, "1") {
                    match decode::generated::decode_blocks::decode_PUNPKHI_P_P__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&H_slice, "0") {
                    match decode::generated::decode_blocks::decode_PUNPKLO_P_P__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "001xxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(12usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "00",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                match decode::generated::decode_blocks::decode_TBL_Z_ZZ_1(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(12usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "00",
                )
            {
                let imm2_slice = reader.extract_slice(22usize, 2usize)?;
                let tsz_slice = reader.extract_slice(16usize, 5usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                match decode::generated::decode_blocks::decode_DUP_Z_Zi__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "1x",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(12usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "1x",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "11",
            )
                && !decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 2usize)?,
                    "00",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "01",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "11",
            )
                && !decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 2usize)?,
                    "00",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(12usize, 1usize)?,
                    "1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "1x",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "11",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 2usize)?,
                    "0x",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "01",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "11",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 2usize)?,
                    "0x",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(12usize, 1usize)?,
                    "1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "1x",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "11",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 2usize)?,
                    "00",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(12usize, 1usize)?,
                    "1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "x1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "11",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 2usize)?,
                    "00",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(12usize, 1usize)?,
                    "1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "10",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                match decode::generated::decode_blocks::decode_REV_Z_Z__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "11",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 2usize)?,
                    "00",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(12usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "01",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "10",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 2usize)?,
                    "1x",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "01",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "10",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 2usize)?,
                    "1x",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(12usize, 1usize)?,
                    "1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "1x",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "10",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 2usize)?,
                    "11",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "01",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "10",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 2usize)?,
                    "11",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(12usize, 1usize)?,
                    "1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "1x",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "10",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 2usize)?,
                    "10",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(12usize, 1usize)?,
                    "1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "x1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "10",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 2usize)?,
                    "10",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(12usize, 1usize)?,
                    "1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "10",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Vm_slice = reader.extract_slice(5usize, 5usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                match decode::generated::decode_blocks::decode_INSR_Z_V__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "10",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 2usize)?,
                    "10",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(12usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "01",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "10",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 2usize)?,
                    "0x",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(12usize, 1usize)?,
                    "1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "x1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "10",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 2usize)?,
                    "0x",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(12usize, 1usize)?,
                    "1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "10",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let U_slice = reader.extract_slice(17usize, 1usize)?;
                let H_slice = reader.extract_slice(16usize, 1usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&H_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UUNPKHI_Z_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&U_slice, "1")
                    && decode::BitReader::match_bits(&H_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_UUNPKLO_Z_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&H_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_SUNPKHI_Z_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&U_slice, "0")
                    && decode::BitReader::match_bits(&H_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SUNPKLO_Z_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "10",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 2usize)?,
                    "0x",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(12usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "01",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "01",
            )
                && !decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "00",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(12usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "1x",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "01",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(12usize, 1usize)?,
                    "1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "1x",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 2usize)?,
                    "x1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "01",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 2usize)?,
                    "x1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(12usize, 1usize)?,
                    "1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "1x",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 2usize)?,
                    "x0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(12usize, 1usize)?,
                    "1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "x1",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 2usize)?,
                    "x0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(12usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "01",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 2usize)?,
                    "10",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(12usize, 1usize)?,
                    "1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "10",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Rm_slice = reader.extract_slice(5usize, 5usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                match decode::generated::decode_blocks::decode_INSR_Z_R__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "00",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(17usize, 2usize)?,
                    "00",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(16usize, 1usize)?,
                    "0",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(12usize, 1usize)?,
                    "1",
                )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "10",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                match decode::generated::decode_blocks::decode_DUP_Z_R__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "01xxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(13usize, 3usize)?,
                "111",
            ) {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(13usize, 3usize)?,
                "110",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Pg_slice = reader.extract_slice(16usize, 4usize)?;
                let imm8_slice = reader.extract_slice(5usize, 8usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                match decode::generated::decode_blocks::decode_FCPY_Z_P_I__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(13usize, 3usize)?,
                "10x",
            ) {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(13usize, 3usize)?,
                "0xx",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Pg_slice = reader.extract_slice(16usize, 4usize)?;
                let M_slice = reader.extract_slice(14usize, 1usize)?;
                let sh_slice = reader.extract_slice(13usize, 1usize)?;
                let imm8_slice = reader.extract_slice(5usize, 8usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&M_slice, "1") {
                    match decode::generated::decode_blocks::decode_CPY_Z_P_I__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&M_slice, "0") {
                    match decode::generated::decode_blocks::decode_CPY_Z_O_I__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "1x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "00xxx",
            )
        {
            if !decode::BitReader::match_bits(
                &reader.extract_slice(18usize, 2usize)?,
                "00",
            ) {
                instruction = common::types::Instruction::UNPRED;
            } else if !decode::BitReader::match_bits(
                &reader.extract_slice(22usize, 2usize)?,
                "11",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(18usize, 2usize)?,
                    "00",
                )
            {
                let opc_slice = reader.extract_slice(22usize, 2usize)?;
                let imm13_slice = reader.extract_slice(5usize, 13usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "10") {
                    match decode::generated::decode_blocks::decode_AND_Z_ZI__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01") {
                    match decode::generated::decode_blocks::decode_EOR_Z_ZI__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "00") {
                    match decode::generated::decode_blocks::decode_ORR_Z_ZI__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(22usize, 2usize)?,
                "11",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(18usize, 2usize)?,
                    "00",
                )
            {
                let imm13_slice = reader.extract_slice(5usize, 13usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                match decode::generated::decode_blocks::decode_DUPM_Z_I__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "11xxxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(11usize, 3usize)?,
                "11x",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let sf_slice = reader.extract_slice(20usize, 1usize)?;
                let imm4_slice = reader.extract_slice(16usize, 4usize)?;
                let D_slice = reader.extract_slice(11usize, 1usize)?;
                let U_slice = reader.extract_slice(10usize, 1usize)?;
                let pattern_slice = reader.extract_slice(5usize, 5usize)?;
                let Rdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&size_slice, "11")
                    && decode::BitReader::match_bits(&sf_slice, "1")
                    && decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UQDECD_R_RS_X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "11")
                    && decode::BitReader::match_bits(&sf_slice, "1")
                    && decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQDECD_R_RS_X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "11")
                    && decode::BitReader::match_bits(&sf_slice, "1")
                    && decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UQINCD_R_RS_X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "11")
                    && decode::BitReader::match_bits(&sf_slice, "1")
                    && decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQINCD_R_RS_X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "11")
                    && decode::BitReader::match_bits(&sf_slice, "0")
                    && decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UQDECD_R_RS_UW(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "11")
                    && decode::BitReader::match_bits(&sf_slice, "0")
                    && decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQDECD_R_RS_SX(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "11")
                    && decode::BitReader::match_bits(&sf_slice, "0")
                    && decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UQINCD_R_RS_UW(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "11")
                    && decode::BitReader::match_bits(&sf_slice, "0")
                    && decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQINCD_R_RS_SX(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "10")
                    && decode::BitReader::match_bits(&sf_slice, "1")
                    && decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UQDECW_R_RS_X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "10")
                    && decode::BitReader::match_bits(&sf_slice, "1")
                    && decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQDECW_R_RS_X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "10")
                    && decode::BitReader::match_bits(&sf_slice, "1")
                    && decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UQINCW_R_RS_X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "10")
                    && decode::BitReader::match_bits(&sf_slice, "1")
                    && decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQINCW_R_RS_X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "10")
                    && decode::BitReader::match_bits(&sf_slice, "0")
                    && decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UQDECW_R_RS_UW(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "10")
                    && decode::BitReader::match_bits(&sf_slice, "0")
                    && decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQDECW_R_RS_SX(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "10")
                    && decode::BitReader::match_bits(&sf_slice, "0")
                    && decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UQINCW_R_RS_UW(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "10")
                    && decode::BitReader::match_bits(&sf_slice, "0")
                    && decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQINCW_R_RS_SX(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "01")
                    && decode::BitReader::match_bits(&sf_slice, "1")
                    && decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UQDECH_R_RS_X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "01")
                    && decode::BitReader::match_bits(&sf_slice, "1")
                    && decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQDECH_R_RS_X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "01")
                    && decode::BitReader::match_bits(&sf_slice, "1")
                    && decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UQINCH_R_RS_X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "01")
                    && decode::BitReader::match_bits(&sf_slice, "1")
                    && decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQINCH_R_RS_X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "01")
                    && decode::BitReader::match_bits(&sf_slice, "0")
                    && decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UQDECH_R_RS_UW(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "01")
                    && decode::BitReader::match_bits(&sf_slice, "0")
                    && decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQDECH_R_RS_SX(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "01")
                    && decode::BitReader::match_bits(&sf_slice, "0")
                    && decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UQINCH_R_RS_UW(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "01")
                    && decode::BitReader::match_bits(&sf_slice, "0")
                    && decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQINCH_R_RS_SX(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "00")
                    && decode::BitReader::match_bits(&sf_slice, "1")
                    && decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UQDECB_R_RS_X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "00")
                    && decode::BitReader::match_bits(&sf_slice, "1")
                    && decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQDECB_R_RS_X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "00")
                    && decode::BitReader::match_bits(&sf_slice, "1")
                    && decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UQINCB_R_RS_X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "00")
                    && decode::BitReader::match_bits(&sf_slice, "1")
                    && decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQINCB_R_RS_X(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "00")
                    && decode::BitReader::match_bits(&sf_slice, "0")
                    && decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UQDECB_R_RS_UW(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "00")
                    && decode::BitReader::match_bits(&sf_slice, "0")
                    && decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQDECB_R_RS_SX(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "00")
                    && decode::BitReader::match_bits(&sf_slice, "0")
                    && decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UQINCB_R_RS_UW(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "00")
                    && decode::BitReader::match_bits(&sf_slice, "0")
                    && decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQINCB_R_RS_SX(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(11usize, 3usize)?,
                "01x",
            ) {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "x01",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "100",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let imm4_slice = reader.extract_slice(16usize, 4usize)?;
                let D_slice = reader.extract_slice(10usize, 1usize)?;
                let pattern_slice = reader.extract_slice(5usize, 5usize)?;
                let Rdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&size_slice, "11")
                    && decode::BitReader::match_bits(&D_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_DECD_R_RS__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "11")
                    && decode::BitReader::match_bits(&D_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_INCD_R_RS__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "10")
                    && decode::BitReader::match_bits(&D_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_DECW_R_RS__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "10")
                    && decode::BitReader::match_bits(&D_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_INCW_R_RS__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "01")
                    && decode::BitReader::match_bits(&D_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_DECH_R_RS__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "01")
                    && decode::BitReader::match_bits(&D_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_INCH_R_RS__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "00")
                    && decode::BitReader::match_bits(&D_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_DECB_R_RS__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "00")
                    && decode::BitReader::match_bits(&D_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_INCB_R_RS__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "000",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let imm4_slice = reader.extract_slice(16usize, 4usize)?;
                let D_slice = reader.extract_slice(10usize, 1usize)?;
                let pattern_slice = reader.extract_slice(5usize, 5usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&size_slice, "11")
                    && decode::BitReader::match_bits(&D_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_DECD_Z_ZS__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "11")
                    && decode::BitReader::match_bits(&D_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_INCD_Z_ZS__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "10")
                    && decode::BitReader::match_bits(&D_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_DECW_Z_ZS__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "10")
                    && decode::BitReader::match_bits(&D_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_INCW_Z_ZS__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "01")
                    && decode::BitReader::match_bits(&D_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_DECH_Z_ZS__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "01")
                    && decode::BitReader::match_bits(&D_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_INCH_Z_ZS__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "00") {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "101",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "100",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let imm4_slice = reader.extract_slice(16usize, 4usize)?;
                let op_slice = reader.extract_slice(10usize, 1usize)?;
                let pattern_slice = reader.extract_slice(5usize, 5usize)?;
                let Rd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&size_slice, "11")
                    && decode::BitReader::match_bits(&op_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_CNTD_R_S__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "10")
                    && decode::BitReader::match_bits(&op_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_CNTW_R_S__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "01")
                    && decode::BitReader::match_bits(&op_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_CNTH_R_S__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "00")
                    && decode::BitReader::match_bits(&op_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_CNTB_R_S__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "1") {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(20usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 3usize)?,
                    "00x",
                )
            {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let imm4_slice = reader.extract_slice(16usize, 4usize)?;
                let D_slice = reader.extract_slice(11usize, 1usize)?;
                let U_slice = reader.extract_slice(10usize, 1usize)?;
                let pattern_slice = reader.extract_slice(5usize, 5usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&size_slice, "11")
                    && decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UQDECD_Z_ZS__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "11")
                    && decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQDECD_Z_ZS__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "11")
                    && decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UQINCD_Z_ZS__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "11")
                    && decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQINCD_Z_ZS__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "10")
                    && decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UQDECW_Z_ZS__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "10")
                    && decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQDECW_Z_ZS__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "10")
                    && decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UQINCW_Z_ZS__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "10")
                    && decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQINCW_Z_ZS__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "01")
                    && decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UQDECH_Z_ZS__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "01")
                    && decode::BitReader::match_bits(&D_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQDECH_Z_ZS__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "01")
                    && decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UQINCH_Z_ZS__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "01")
                    && decode::BitReader::match_bits(&D_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SQINCH_Z_ZS__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&size_slice, "00") {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "1011xx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 2usize)?,
                "11",
            ) {
                let opc_slice = reader.extract_slice(22usize, 2usize)?;
                let opc2_slice = reader.extract_slice(16usize, 5usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "1x") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "01") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "00")
                    && decode::BitReader::match_bits(&opc2_slice, "1xxxx")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "00")
                    && decode::BitReader::match_bits(&opc2_slice, "01xxx")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "00")
                    && decode::BitReader::match_bits(&opc2_slice, "001xx")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "00")
                    && decode::BitReader::match_bits(&opc2_slice, "0001x")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "00")
                    && decode::BitReader::match_bits(&opc2_slice, "00001")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "00")
                    && decode::BitReader::match_bits(&opc2_slice, "00000")
                {
                    match decode::generated::decode_blocks::decode_MOVPRFX_Z_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 2usize)?,
                "10",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let opc_slice = reader.extract_slice(16usize, 5usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "1xxxx") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "01xxx") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "001xx") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "0001x") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "00001") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "00000") {
                    match decode::generated::decode_blocks::decode_FEXPA_Z_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 2usize)?,
                "0x",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let op_slice = reader.extract_slice(10usize, 1usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&op_slice, "1") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&op_slice, "0") {
                    match decode::generated::decode_blocks::decode_FTSSEL_Z_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "1010xx",
            )
        {
            let opc_slice = reader.extract_slice(22usize, 2usize)?;
            let Zm_slice = reader.extract_slice(16usize, 5usize)?;
            let msz_slice = reader.extract_slice(10usize, 2usize)?;
            let Zn_slice = reader.extract_slice(5usize, 5usize)?;
            let Zd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&opc_slice, "1x") {
                match decode::generated::decode_blocks::decode_ADR_Z_AZ_SD_same_scaled(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01") {
                match decode::generated::decode_blocks::decode_ADR_Z_AZ_D_u32_scaled(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "00") {
                match decode::generated::decode_blocks::decode_ADR_Z_AZ_D_s32_scaled(
                    reader,
                ) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "100xxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(12usize, 1usize)?,
                "1",
            ) {
                let tszh_slice = reader.extract_slice(22usize, 2usize)?;
                let tszl_slice = reader.extract_slice(19usize, 2usize)?;
                let imm3_slice = reader.extract_slice(16usize, 3usize)?;
                let opc_slice = reader.extract_slice(10usize, 2usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "11") {
                    match decode::generated::decode_blocks::decode_LSL_Z_ZI__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "01") {
                    match decode::generated::decode_blocks::decode_LSR_Z_ZI__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "00") {
                    match decode::generated::decode_blocks::decode_ASR_Z_ZI__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(12usize, 1usize)?,
                "0",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let opc_slice = reader.extract_slice(10usize, 2usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "11") {
                    match decode::generated::decode_blocks::decode_LSL_Z_ZW__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "01") {
                    match decode::generated::decode_blocks::decode_LSR_Z_ZW__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "00") {
                    match decode::generated::decode_blocks::decode_ASR_Z_ZW__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "011xxx",
            )
        {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "0101xx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(11usize, 1usize)?,
                "1",
            ) {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 1usize)?,
                    "0",
                )
            {
                let op_slice = reader.extract_slice(22usize, 1usize)?;
                let opc2_slice = reader.extract_slice(16usize, 5usize)?;
                let imm6_slice = reader.extract_slice(5usize, 6usize)?;
                let Rd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&op_slice, "1") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&opc2_slice, "11111")
                {
                    match decode::generated::decode_blocks::decode_RDVL_R_I__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&opc2_slice, "11110")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&opc2_slice, "1110x")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&opc2_slice, "110xx")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&opc2_slice, "10xxx")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&op_slice, "0")
                    && decode::BitReader::match_bits(&opc2_slice, "0xxxx")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(23usize, 1usize)?,
                "0",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(11usize, 1usize)?,
                    "0",
                )
            {
                let op_slice = reader.extract_slice(22usize, 1usize)?;
                let Rn_slice = reader.extract_slice(16usize, 5usize)?;
                let imm6_slice = reader.extract_slice(5usize, 6usize)?;
                let Rd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&op_slice, "1") {
                    match decode::generated::decode_blocks::decode_ADDPL_R_RI__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "0") {
                    match decode::generated::decode_blocks::decode_ADDVL_R_RI__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "0100xx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 2usize)?,
                "11",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Rm_slice = reader.extract_slice(16usize, 5usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                match decode::generated::decode_blocks::decode_INDEX_Z_RR__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 2usize)?,
                "10",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Rm_slice = reader.extract_slice(16usize, 5usize)?;
                let imm5_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                match decode::generated::decode_blocks::decode_INDEX_Z_IR__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 2usize)?,
                "01",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let imm5_slice = reader.extract_slice(16usize, 5usize)?;
                let Rn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                match decode::generated::decode_blocks::decode_INDEX_Z_RI__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 2usize)?,
                "00",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let imm5b_slice = reader.extract_slice(16usize, 5usize)?;
                let imm5_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                match decode::generated::decode_blocks::decode_INDEX_Z_II__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "001xxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(12usize, 1usize)?,
                "1",
            )
                && !decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "00",
                )
            {
                instruction = common::types::Instruction::UNPRED;
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(12usize, 1usize)?,
                "1",
            )
                && decode::BitReader::match_bits(
                    &reader.extract_slice(10usize, 2usize)?,
                    "00",
                )
            {
                let opc_slice = reader.extract_slice(22usize, 2usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "11") {
                    match decode::generated::decode_blocks::decode_BIC_Z_ZZ__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10") {
                    match decode::generated::decode_blocks::decode_EOR_Z_ZZ__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01") {
                    match decode::generated::decode_blocks::decode_ORR_Z_ZZ__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "00") {
                    match decode::generated::decode_blocks::decode_AND_Z_ZZ__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(12usize, 1usize)?,
                "0",
            ) {
                instruction = common::types::Instruction::UNPRED;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "1xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "000xxx",
            )
        {
            let size_slice = reader.extract_slice(22usize, 2usize)?;
            let Zm_slice = reader.extract_slice(16usize, 5usize)?;
            let opc_slice = reader.extract_slice(10usize, 3usize)?;
            let Zn_slice = reader.extract_slice(5usize, 5usize)?;
            let Zd_slice = reader.extract_slice(0usize, 5usize)?;
            if decode::BitReader::match_bits(&opc_slice, "111") {
                match decode::generated::decode_blocks::decode_UQSUB_Z_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "110") {
                match decode::generated::decode_blocks::decode_SQSUB_Z_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "101") {
                match decode::generated::decode_blocks::decode_UQADD_Z_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "100") {
                match decode::generated::decode_blocks::decode_SQADD_Z_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "01x") {
                instruction = common::types::Instruction::UNALLOC;
            } else if decode::BitReader::match_bits(&opc_slice, "001") {
                match decode::generated::decode_blocks::decode_SUB_Z_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else if decode::BitReader::match_bits(&opc_slice, "000") {
                match decode::generated::decode_blocks::decode_ADD_Z_ZZ__(reader) {
                    Ok(instr) => instruction = instr,
                    Err(AArch64LifterError::UndefinedInstruction) => {
                        instruction = common::types::Instruction::UNDEF;
                    }
                    Err(e) => return Err(e),
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "0xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "101xxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "11",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let opc_slice = reader.extract_slice(16usize, 3usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "111") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "110") {
                    match decode::generated::decode_blocks::decode_NOT_Z_P_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "101") {
                    match decode::generated::decode_blocks::decode_FNEG_Z_P_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "100") {
                    match decode::generated::decode_blocks::decode_FABS_Z_P_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "011") {
                    match decode::generated::decode_blocks::decode_CNOT_Z_P_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "010") {
                    match decode::generated::decode_blocks::decode_CNT_Z_P_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "001") {
                    match decode::generated::decode_blocks::decode_CLZ_Z_P_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "000") {
                    match decode::generated::decode_blocks::decode_CLS_Z_P_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "10",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let opc_slice = reader.extract_slice(16usize, 3usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "111") {
                    match decode::generated::decode_blocks::decode_NEG_Z_P_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "110") {
                    match decode::generated::decode_blocks::decode_ABS_Z_P_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "101") {
                    match decode::generated::decode_blocks::decode_UXTW_Z_P_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "100") {
                    match decode::generated::decode_blocks::decode_SXTW_Z_P_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "011") {
                    match decode::generated::decode_blocks::decode_UXTH_Z_P_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "010") {
                    match decode::generated::decode_blocks::decode_SXTH_Z_P_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "001") {
                    match decode::generated::decode_blocks::decode_UXTB_Z_P_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "000") {
                    match decode::generated::decode_blocks::decode_SXTB_Z_P_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "0x",
            ) {
                instruction = common::types::Instruction::UNPRED;
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "0xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "100xxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "11",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let R_slice = reader.extract_slice(18usize, 1usize)?;
                let L_slice = reader.extract_slice(17usize, 1usize)?;
                let U_slice = reader.extract_slice(16usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zm_slice = reader.extract_slice(5usize, 5usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&R_slice, "1") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&R_slice, "0")
                    && decode::BitReader::match_bits(&L_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LSL_Z_P_ZW__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&R_slice, "0")
                    && decode::BitReader::match_bits(&L_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&R_slice, "0")
                    && decode::BitReader::match_bits(&L_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LSR_Z_P_ZW__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&R_slice, "0")
                    && decode::BitReader::match_bits(&L_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_ASR_Z_P_ZW__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "10",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let R_slice = reader.extract_slice(18usize, 1usize)?;
                let L_slice = reader.extract_slice(17usize, 1usize)?;
                let U_slice = reader.extract_slice(16usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zm_slice = reader.extract_slice(5usize, 5usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&R_slice, "1")
                    && decode::BitReader::match_bits(&L_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LSLR_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&R_slice, "1")
                    && decode::BitReader::match_bits(&L_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LSRR_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&R_slice, "1")
                    && decode::BitReader::match_bits(&L_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_ASRR_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&R_slice, "0")
                    && decode::BitReader::match_bits(&L_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LSL_Z_P_ZZ__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&R_slice, "0")
                    && decode::BitReader::match_bits(&L_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LSR_Z_P_ZZ__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&R_slice, "0")
                    && decode::BitReader::match_bits(&L_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_ASR_Z_P_ZZ__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&L_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "0x",
            ) {
                let tszh_slice = reader.extract_slice(22usize, 2usize)?;
                let opc_slice = reader.extract_slice(18usize, 2usize)?;
                let L_slice = reader.extract_slice(17usize, 1usize)?;
                let U_slice = reader.extract_slice(16usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let tszl_slice = reader.extract_slice(8usize, 2usize)?;
                let imm3_slice = reader.extract_slice(5usize, 3usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "1x") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&L_slice, "1")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&L_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&L_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_ASRD_Z_P_ZI__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "00")
                    && decode::BitReader::match_bits(&L_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LSL_Z_P_ZI__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "00")
                    && decode::BitReader::match_bits(&L_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "00")
                    && decode::BitReader::match_bits(&L_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_LSR_Z_P_ZI__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "00")
                    && decode::BitReader::match_bits(&L_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_ASR_Z_P_ZI__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "0xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "001xxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "11",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let opc_slice = reader.extract_slice(16usize, 3usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Vd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "1xx") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "011") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "010") {
                    match decode::generated::decode_blocks::decode_ANDV_R_P_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "001") {
                    match decode::generated::decode_blocks::decode_EORV_R_P_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "000") {
                    match decode::generated::decode_blocks::decode_ORV_R_P_Z__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "10",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let opc_slice = reader.extract_slice(17usize, 2usize)?;
                let M_slice = reader.extract_slice(16usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "1x") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "01") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "00") {
                    match decode::generated::decode_blocks::decode_MOVPRFX_Z_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "01",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let opc_slice = reader.extract_slice(17usize, 2usize)?;
                let U_slice = reader.extract_slice(16usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Vd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "1x") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UMINV_R_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SMINV_R_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UMAXV_R_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SMAXV_R_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(19usize, 2usize)?,
                "00",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let opc_slice = reader.extract_slice(17usize, 2usize)?;
                let U_slice = reader.extract_slice(16usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Vd_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "1x") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "01") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UADDV_R_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SADDV_R_P_Z__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "0xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "000xxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(18usize, 3usize)?,
                "11x",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let opc_slice = reader.extract_slice(16usize, 3usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zm_slice = reader.extract_slice(5usize, 5usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "1xx") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "011") {
                    match decode::generated::decode_blocks::decode_BIC_Z_P_ZZ__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "010") {
                    match decode::generated::decode_blocks::decode_AND_Z_P_ZZ__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "001") {
                    match decode::generated::decode_blocks::decode_EOR_Z_P_ZZ__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "000") {
                    match decode::generated::decode_blocks::decode_ORR_Z_P_ZZ__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(18usize, 3usize)?,
                "101",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let R_slice = reader.extract_slice(17usize, 1usize)?;
                let U_slice = reader.extract_slice(16usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zm_slice = reader.extract_slice(5usize, 5usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&R_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UDIVR_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&R_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SDIVR_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&R_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UDIV_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&R_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SDIV_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(18usize, 3usize)?,
                "100",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let H_slice = reader.extract_slice(17usize, 1usize)?;
                let U_slice = reader.extract_slice(16usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zm_slice = reader.extract_slice(5usize, 5usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&H_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UMULH_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&H_slice, "1")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SMULH_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&H_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&H_slice, "0")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_MUL_Z_P_ZZ__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(18usize, 3usize)?,
                "01x",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let opc_slice = reader.extract_slice(17usize, 2usize)?;
                let U_slice = reader.extract_slice(16usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zm_slice = reader.extract_slice(5usize, 5usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "11") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UABD_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "10")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SABD_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UMIN_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "01")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SMIN_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "1")
                {
                    match decode::generated::decode_blocks::decode_UMAX_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "00")
                    && decode::BitReader::match_bits(&U_slice, "0")
                {
                    match decode::generated::decode_blocks::decode_SMAX_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(18usize, 3usize)?,
                "00x",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let opc_slice = reader.extract_slice(16usize, 3usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zm_slice = reader.extract_slice(5usize, 5usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&opc_slice, "1xx") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "011") {
                    match decode::generated::decode_blocks::decode_SUBR_Z_P_ZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "010") {
                    instruction = common::types::Instruction::UNALLOC;
                } else if decode::BitReader::match_bits(&opc_slice, "001") {
                    match decode::generated::decode_blocks::decode_SUB_Z_P_ZZ__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&opc_slice, "000") {
                    match decode::generated::decode_blocks::decode_ADD_Z_P_ZZ__(reader) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        ) && decode::BitReader::match_bits(&reader.extract_slice(23usize, 2usize)?, "0x")
            && decode::BitReader::match_bits(
                &reader.extract_slice(17usize, 5usize)?,
                "0xxxx",
            )
            && decode::BitReader::match_bits(
                &reader.extract_slice(10usize, 6usize)?,
                "x1xxxx",
            )
        {
            if decode::BitReader::match_bits(
                &reader.extract_slice(15usize, 1usize)?,
                "1",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let op_slice = reader.extract_slice(13usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Za_slice = reader.extract_slice(5usize, 5usize)?;
                let Zdn_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&op_slice, "1") {
                    match decode::generated::decode_blocks::decode_MSB_Z_P_ZZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "0") {
                    match decode::generated::decode_blocks::decode_MAD_Z_P_ZZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else if decode::BitReader::match_bits(
                &reader.extract_slice(15usize, 1usize)?,
                "0",
            ) {
                let size_slice = reader.extract_slice(22usize, 2usize)?;
                let Zm_slice = reader.extract_slice(16usize, 5usize)?;
                let op_slice = reader.extract_slice(13usize, 1usize)?;
                let Pg_slice = reader.extract_slice(10usize, 3usize)?;
                let Zn_slice = reader.extract_slice(5usize, 5usize)?;
                let Zda_slice = reader.extract_slice(0usize, 5usize)?;
                if decode::BitReader::match_bits(&op_slice, "1") {
                    match decode::generated::decode_blocks::decode_MLS_Z_P_ZZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else if decode::BitReader::match_bits(&op_slice, "0") {
                    match decode::generated::decode_blocks::decode_MLA_Z_P_ZZZ__(
                        reader,
                    ) {
                        Ok(instr) => instruction = instr,
                        Err(AArch64LifterError::UndefinedInstruction) => {
                            instruction = common::types::Instruction::UNDEF;
                        }
                        Err(e) => return Err(e),
                    }
                } else {
                    return Ok(common::types::Instruction::UNDEF);
                }
            } else {
                return Ok(common::types::Instruction::UNDEF);
            }
        } else {
            return Ok(common::types::Instruction::UNDEF);
        }
    } else if decode::BitReader::match_bits(
        &reader.extract_slice(24usize, 5usize)?,
        "00011",
    ) {
        instruction = common::types::Instruction::UNPRED;
    } else if decode::BitReader::match_bits(
        &reader.extract_slice(24usize, 5usize)?,
        "0000x",
    ) {
        if !decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        ) {
            instruction = common::types::Instruction::UNPRED;
        } else if !decode::BitReader::match_bits(
            &reader.extract_slice(16usize, 9usize)?,
            "000000000",
        ) {
            instruction = common::types::Instruction::UNPRED;
        } else if decode::BitReader::match_bits(
            &reader.extract_slice(29usize, 3usize)?,
            "000",
        )
            && decode::BitReader::match_bits(
                &reader.extract_slice(16usize, 9usize)?,
                "000000000",
            )
        {
            let imm16_slice = reader.extract_slice(0usize, 16usize)?;
            match decode::generated::decode_blocks::decode_aarch64_udf(reader) {
                Ok(instr) => instruction = instr,
                Err(AArch64LifterError::UndefinedInstruction) => {
                    instruction = common::types::Instruction::UNDEF;
                }
                Err(e) => return Err(e),
            }
        } else {
            return Ok(common::types::Instruction::UNDEF);
        }
    } else {
        return Ok(common::types::Instruction::UNDEF);
    }
    Ok(instruction)
}
