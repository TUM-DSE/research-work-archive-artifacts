tests:
- name: add_1
  bytes: [0x21, 0x00, 0x00, 0x8b]
  directives: |
    check: entry: // entry block; no preds!
    nextln:   v0 = i64.read_reg "x1"
    nextln:   v1 = i64.read_reg "x0"
    nextln:   v2 = i64.unsigned_from_bits v0
    nextln:   v3 = i64.unsigned_from_bits v1
    nextln:   v4 = int.add v2, v3
    nextln:   v5 = int.add v4, 0x0
    nextln:   v6 = i64.signed_from_bits v0
    nextln:   v7 = i64.signed_from_bits v1
    nextln:   v8 = int.add v6, v7
    nextln:   v9 = int.add v8, 0x0
    nextln:   v10 = i64.to_bits v5
    nextln:   v11 = i64.lshr v10, 0x3f
    nextln:   v12 = i1.trunc.i64 v11
    nextln:   v13 = bool.icmp.i64.eq v10, 0x0
    nextln:   jumpif v13, addr_0_block_0, addr_0_block_1
    check: addr_0_block_0: // preds: entry
    nextln:   jump addr_0_block_2(0x1)
    check: addr_0_block_1: // preds: entry
    nextln:   jump addr_0_block_2(0x0)
    check: addr_0_block_2(v14: i1): // preds: addr_0_block_0 addr_0_block_1
    nextln:   v15 = i64.unsigned_from_bits v10
    nextln:   v16 = bool.icmp.int.eq v15, v5
    nextln:   jumpif v16, addr_0_block_3, addr_0_block_4
    check: addr_0_block_3: // preds: addr_0_block_2
    nextln:   jump addr_0_block_5(0x0)
    check: addr_0_block_4: // preds: addr_0_block_2
    nextln:   jump addr_0_block_5(0x1)
    check: addr_0_block_5(v17: i1): // preds: addr_0_block_3 addr_0_block_4
    nextln:   v18 = i64.signed_from_bits v10
    nextln:   v19 = bool.icmp.int.eq v18, v9
    nextln:   jumpif v19, addr_0_block_6, addr_0_block_7
    check: addr_0_block_6: // preds: addr_0_block_5
    nextln:   jump addr_0_block_8(0x0)
    check: addr_0_block_7: // preds: addr_0_block_5
    nextln:   jump addr_0_block_8(0x1)
    check: addr_0_block_8(v20: i1): // preds: addr_0_block_6 addr_0_block_7
    nextln:   v21 = i2.zext.i1 v12
    nextln:   v22 = i2.lshl v21, 0x1
    nextln:   v23 = i2.zext.i1 v14
    nextln:   v24 = i2.or v22, v23
    nextln:   v25 = i3.zext.i2 v24
    nextln:   v26 = i3.lshl v25, 0x1
    nextln:   v27 = i3.zext.i1 v17
    nextln:   v28 = i3.or v26, v27
    nextln:   v29 = i4.zext.i3 v28
    nextln:   v30 = i4.lshl v29, 0x1
    nextln:   v31 = i4.zext.i1 v20
    nextln:   v32 = i4.or v30, v31
    nextln:   write_reg.i64 v10, "x1"
- name: add_2
  bytes: [0x21, 0x00, 0x00, 0x0b]
  directives: |
    check: entry: // entry block; no preds!
    nextln:   v0 = i64.read_reg "x1"
    nextln:   v1 = i32.trunc.i64 v0
    nextln:   v2 = i64.read_reg "x0"
    nextln:   v3 = i32.trunc.i64 v2
    nextln:   v4 = i32.unsigned_from_bits v1
    nextln:   v5 = i32.unsigned_from_bits v3
    nextln:   v6 = int.add v4, v5
    nextln:   v7 = int.add v6, 0x0
    nextln:   v8 = i32.signed_from_bits v1
    nextln:   v9 = i32.signed_from_bits v3
    nextln:   v10 = int.add v8, v9
    nextln:   v11 = int.add v10, 0x0
    nextln:   v12 = i32.to_bits v7
    nextln:   v13 = i32.lshr v12, 0x1f
    nextln:   v14 = i1.trunc.i32 v13
    nextln:   v15 = bool.icmp.i32.eq v12, 0x0
    nextln:   jumpif v15, addr_0_block_0, addr_0_block_1
    check: addr_0_block_0: // preds: entry
    nextln:   jump addr_0_block_2(0x1)
    check: addr_0_block_1: // preds: entry
    nextln:   jump addr_0_block_2(0x0)
    check: addr_0_block_2(v16: i1): // preds: addr_0_block_0 addr_0_block_1
    nextln:   v17 = i32.unsigned_from_bits v12
    nextln:   v18 = bool.icmp.int.eq v17, v7
    nextln:   jumpif v18, addr_0_block_3, addr_0_block_4
    check: addr_0_block_3: // preds: addr_0_block_2
    nextln:   jump addr_0_block_5(0x0)
    check: addr_0_block_4: // preds: addr_0_block_2
    nextln:   jump addr_0_block_5(0x1)
    check: addr_0_block_5(v19: i1): // preds: addr_0_block_3 addr_0_block_4
    nextln:   v20 = i32.signed_from_bits v12
    nextln:   v21 = bool.icmp.int.eq v20, v11
    nextln:   jumpif v21, addr_0_block_6, addr_0_block_7
    check: addr_0_block_6: // preds: addr_0_block_5
    nextln:   jump addr_0_block_8(0x0)
    check: addr_0_block_7: // preds: addr_0_block_5
    nextln:   jump addr_0_block_8(0x1)
    check: addr_0_block_8(v22: i1): // preds: addr_0_block_6 addr_0_block_7
    nextln:   v23 = i2.zext.i1 v14
    nextln:   v24 = i2.lshl v23, 0x1
    nextln:   v25 = i2.zext.i1 v16
    nextln:   v26 = i2.or v24, v25
    nextln:   v27 = i3.zext.i2 v26
    nextln:   v28 = i3.lshl v27, 0x1
    nextln:   v29 = i3.zext.i1 v19
    nextln:   v30 = i3.or v28, v29
    nextln:   v31 = i4.zext.i3 v30
    nextln:   v32 = i4.lshl v31, 0x1
    nextln:   v33 = i4.zext.i1 v22
    nextln:   v34 = i4.or v32, v33
    nextln:   v35 = i64.zext.i32 0x0
    nextln:   v36 = i64.lshl v35, 0x20
    nextln:   v37 = i64.zext.i32 v12
    nextln:   v38 = i64.or v36, v37
    nextln:   write_reg.i64 v38, "x1"
- name: add_3
  bytes: [0x02, 0xc0, 0x21, 0x0b]
  directives: |
    check: entry: // entry block; no preds!
    nextln:   v0 = i64.read_reg "x0"
    nextln:   v1 = i32.trunc.i64 v0
    nextln:   v2 = i64.read_reg "x1"
    nextln:   v3 = i32.trunc.i64 v2
    nextln:   v4 = i32.lshr v3, 0x1f
    nextln:   v5 = i1.trunc.i32 v4
    nextln:   v6 = i32.unsigned_from_bits v1
    nextln:   v7 = i32.unsigned_from_bits v3
    nextln:   v8 = int.add v6, v7
    nextln:   v9 = int.add v8, 0x0
    nextln:   v10 = i32.signed_from_bits v1
    nextln:   v11 = i32.signed_from_bits v3
    nextln:   v12 = int.add v10, v11
    nextln:   v13 = int.add v12, 0x0
    nextln:   v14 = i32.to_bits v9
    nextln:   v15 = i32.lshr v14, 0x1f
    nextln:   v16 = i1.trunc.i32 v15
    nextln:   v17 = bool.icmp.i32.eq v14, 0x0
    nextln:   jumpif v17, addr_0_block_0, addr_0_block_1
    check: addr_0_block_0: // preds: entry
    nextln:   jump addr_0_block_2(0x1)
    check: addr_0_block_1: // preds: entry
    nextln:   jump addr_0_block_2(0x0)
    check: addr_0_block_2(v18: i1): // preds: addr_0_block_0 addr_0_block_1
    nextln:   v19 = i32.unsigned_from_bits v14
    nextln:   v20 = bool.icmp.int.eq v19, v9
    nextln:   jumpif v20, addr_0_block_3, addr_0_block_4
    check: addr_0_block_3: // preds: addr_0_block_2
    nextln:   jump addr_0_block_5(0x0)
    check: addr_0_block_4: // preds: addr_0_block_2
    nextln:   jump addr_0_block_5(0x1)
    check: addr_0_block_5(v21: i1): // preds: addr_0_block_3 addr_0_block_4
    nextln:   v22 = i32.signed_from_bits v14
    nextln:   v23 = bool.icmp.int.eq v22, v13
    nextln:   jumpif v23, addr_0_block_6, addr_0_block_7
    check: addr_0_block_6: // preds: addr_0_block_5
    nextln:   jump addr_0_block_8(0x0)
    check: addr_0_block_7: // preds: addr_0_block_5
    nextln:   jump addr_0_block_8(0x1)
    check: addr_0_block_8(v24: i1): // preds: addr_0_block_6 addr_0_block_7
    nextln:   v25 = i2.zext.i1 v16
    nextln:   v26 = i2.lshl v25, 0x1
    nextln:   v27 = i2.zext.i1 v18
    nextln:   v28 = i2.or v26, v27
    nextln:   v29 = i3.zext.i2 v28
    nextln:   v30 = i3.lshl v29, 0x1
    nextln:   v31 = i3.zext.i1 v21
    nextln:   v32 = i3.or v30, v31
    nextln:   v33 = i4.zext.i3 v32
    nextln:   v34 = i4.lshl v33, 0x1
    nextln:   v35 = i4.zext.i1 v24
    nextln:   v36 = i4.or v34, v35
    nextln:   v37 = i64.zext.i32 0x0
    nextln:   v38 = i64.lshl v37, 0x20
    nextln:   v39 = i64.zext.i32 v14
    nextln:   v40 = i64.or v38, v39
    nextln:   write_reg.i64 v40, "x2"
