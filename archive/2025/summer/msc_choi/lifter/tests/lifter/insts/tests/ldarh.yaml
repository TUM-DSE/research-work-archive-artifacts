tests:
- name: ldarh_1
  bytes: [0xe1, 0xff, 0xdf, 0x48]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "sp"
      nextln:   v1 = i64.unsigned_from_bits v0
      nextln:   v2 = int.modulo v1, 0x10
      nextln:   v3 = int.sub v1, v2
      nextln:   v4 = i64.to_bits v3
      nextln:   v5 = bool.icmp.i64.ne v0, v4
      nextln:   v6 = i64.read_reg "sp"
      nextln:   v7 = i64.unsigned_from_bits v6
      nextln:   v8 = int.modulo v7, 0x2
      nextln:   v9 = int.sub v7, v8
      nextln:   v10 = i64.to_bits v9
      nextln:   v11 = bool.icmp.i64.eq v6, v10
      nextln:   v12 = bool.bitwise_not v11
      nextln:   v13 = bool.and 0x1, v12
      nextln:   jumpif v13, addr_0_block_0, addr_0_block_1
      check: addr_0_block_0: // preds: entry
      nextln:   jump addr_0_block_2(0x0)
      check: addr_0_block_1: // preds: entry
      nextln:   jump addr_0_block_2(0x0)
      check: addr_0_block_2(v14: bool): // preds: addr_0_block_0 addr_0_block_1
      nextln:   v15 = bool.bitwise_not v11
      nextln:   jumpif v15, addr_0_block_3, addr_0_block_75
      check: addr_0_block_3: // preds: addr_0_block_2
      nextln:   v16 = i64.unsigned_from_bits v6
      nextln:   v17 = int.modulo v16, 0x1
      nextln:   v18 = int.sub v16, v17
      nextln:   v19 = i64.to_bits v18
      nextln:   v20 = bool.icmp.i64.eq v6, v19
      nextln:   v21 = i64.lshr v6, 0x30
      nextln:   v22 = i16.trunc.i64 v21
      nextln:   v23 = bool.icmp.i16.eq v22, 0x0
      nextln:   v24 = bool.bitwise_not v23
      nextln:   jumpif v24, addr_0_block_4, addr_0_block_5
      nextln:   jump addr_0_block_110(v192, v193, v349)
      check: addr_0_block_4: // no preds!
      nextln:   jump addr_0_block_6(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_7(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_5: // no preds!
      nextln:   jump addr_0_block_6(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_6(v355: i52, v356: int, v357: bool, v358: bool): // preds: addr_0_block_5
      nextln:   v359 = i52.trunc.i64 v6
      nextln:   jump addr_0_block_7(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v359, 0x1, 0x0)
      check: addr_0_block_7(v45: i3, v46: i1, v47: i1, v48: i1, v49: i1, v50: i4, v51: i1, v52: bool, v53: int, v54: int, v55: bool, v56: bool, v57: i8, v58: i8, v59: i52, v60: i1, v61: bool, v62: bool, v63: int, v64: i1, v65: bool, v66: i4, v67: i2, v68: i4, v69: i8, v70: i8, v71: i2, v72: i2, v73: bool, v74: i2, v75: i2, v76: bool, v77: bool, v78: bool, v79: bool, v80: i52, v81: i1, v82: i64, v83: i1, v84: i8, v85: i8, v86: i52, v87: i1, v88: bool, v89: bool, v90: int, v91: i1, v92: bool, v93: i4, v94: i2, v95: i4, v96: i8, v97: i8, v98: i2, v99: i2, v100: bool, v101: i2, v102: i2, v103: bool, v104: bool, v105: bool, v106: bool, v107: i52, v108: i1, v109: i64): // preds: addr_0_block_4 addr_0_block_6
      nextln:   v110 = bool.icmp.i8.ne v84, 0x0
      nextln:   v111 = bool.bitwise_not v110
      nextln:   v112 = bool.bitwise_not v11
      nextln:   v113 = bool.and v112, 0x1
      nextln:   v114 = bool.or v113, 0x0
      nextln:   v115 = bool.icmp.i8.ne v84, 0x0
      nextln:   v116 = bool.bitwise_not v115
      nextln:   v117 = bool.and v114, v116
      nextln:   v118 = bool.icmp.i8.eq v96, 0x1
      nextln:   v119 = bool.and v117, v118
      nextln:   jumpif v119, addr_0_block_8, addr_0_block_9
      check: addr_0_block_8: // preds: addr_0_block_7
      nextln:   jump addr_0_block_10
      check: addr_0_block_9: // preds: addr_0_block_7
      nextln:   jump addr_0_block_10
      check: addr_0_block_10: // preds: addr_0_block_8 addr_0_block_9
      nextln:   v120 = bool.icmp.i8.ne v84, 0x0
      nextln:   v121 = bool.bitwise_not v120
      nextln:   v122 = bool.icmp.i8.ne v84, 0x0
      nextln:   v123 = bool.bitwise_not v122
      nextln:   v124 = bool.icmp.i8.eq v96, 0x1
      nextln:   v125 = bool.and v123, v124
      nextln:   jumpif v55, addr_0_block_11, addr_0_block_12
      check: addr_0_block_11: // preds: addr_0_block_10
      nextln:   v126 = bool.icmp.i8.eq v84, 0x0
      nextln:   jump addr_0_block_13(0x1)
      check: addr_0_block_12: // preds: addr_0_block_10
      nextln:   jump addr_0_block_13(0x0)
      check: addr_0_block_13(v127: bool): // preds: addr_0_block_11 addr_0_block_12
      nextln:   v128 = bool.icmp.i8.eq v84, 0x0
      nextln:   v129 = bool.and v56, v128
      nextln:   jumpif v129, addr_0_block_14, addr_0_block_15
      check: addr_0_block_14: // preds: addr_0_block_13
      nextln:   jump addr_0_block_16(0x0, 0x0)
      check: addr_0_block_15: // preds: addr_0_block_13
      nextln:   jump addr_0_block_16(0x0, 0x0)
      check: addr_0_block_16(v130: bool, v131: bool): // preds: addr_0_block_14 addr_0_block_15
      nextln:   v132 = bool.or v127, v130
      nextln:   jumpif v132, addr_0_block_17, addr_0_block_30
      check: addr_0_block_17: // preds: addr_0_block_16
      nextln:   v133 = i52.unsigned_from_bits v80
      nextln:   v134 = int.modulo v133, 0x8
      nextln:   v135 = int.sub v133, v134
      nextln:   v136 = i52.to_bits v135
      nextln:   v137 = bool.icmp.i52.eq v80, v136
      nextln:   v138 = i64.load v80
      nextln:   jumpif v127, addr_0_block_18, addr_0_block_19
      nextln:   jump addr_0_block_31(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v138, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, 0x0, 0x0)
      check: addr_0_block_18: // no preds!
      nextln:   jump addr_0_block_20
      check: addr_0_block_19: // no preds!
      nextln:   jump addr_0_block_20
      check: addr_0_block_20: // preds: addr_0_block_18 addr_0_block_19
      nextln:   jumpif v130, addr_0_block_21, addr_0_block_22
      check: addr_0_block_21: // preds: addr_0_block_20
      nextln:   jump addr_0_block_23
      check: addr_0_block_22: // preds: addr_0_block_20
      nextln:   jump addr_0_block_23
      check: addr_0_block_23: // preds: addr_0_block_21 addr_0_block_22
      nextln:   v360 = i52.unsigned_from_bits v80
      nextln:   v361 = int.modulo v360, 0x8
      nextln:   v362 = int.sub v360, v361
      nextln:   v363 = i52.to_bits v362
      nextln:   v364 = bool.icmp.i52.eq v80, v363
      nextln:   v365 = bool.icmp.i52.eq v80, 0x13000000
      nextln:   jumpif v365, addr_0_block_24, addr_0_block_28
      check: addr_0_block_24: // preds: addr_0_block_23
      nextln:   v366 = i64.unsigned_from_bits v138
      nextln:   v367 = bool.icmp.int.eq v366, 0x4
      nextln:   jumpif v367, addr_0_block_25, addr_0_block_26
      nextln:   jump addr_0_block_29
      check: addr_0_block_25: // no preds!
      nextln:   jump addr_0_block_27
      check: addr_0_block_26: // no preds!
      nextln:   v368 = i8.trunc.i64 v138
      nextln:   v369 = i8.unsigned_from_bits v368
      nextln:   jump addr_0_block_27
      check: addr_0_block_27: // preds: addr_0_block_25 addr_0_block_26
      check: addr_0_block_28: // preds: addr_0_block_23
      nextln:   store.i64 v138, v80
      nextln:   jump addr_0_block_29
      check: addr_0_block_29: // preds: addr_0_block_24 addr_0_block_28
      check: addr_0_block_30: // preds: addr_0_block_16
      nextln:   jump addr_0_block_31(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_31(v139: i8, v140: i1, v141: i16, v142: i8, v143: bool, v144: bool, v145: bool, v146: int, v147: i64, v148: i8, v149: i8, v150: i52, v151: i1, v152: bool, v153: bool, v154: int, v155: i1, v156: bool, v157: i4, v158: i2, v159: i4, v160: i8, v161: i8, v162: i2, v163: i2, v164: bool, v165: i2, v166: i2, v167: bool, v168: bool, v169: bool, v170: bool, v171: i52, v172: i1, v173: i64, v174: i2, v175: bool): // preds: addr_0_block_17 addr_0_block_30
      nextln:   v176 = bool.icmp.i8.ne v84, 0x0
      nextln:   v177 = bool.bitwise_not v176
      nextln:   v178 = bool.and v177, 0x1
      nextln:   v179 = bool.icmp.i8.ne v84, 0x0
      nextln:   v180 = bool.bitwise_not v179
      nextln:   v181 = bool.and 0x1, v180
      nextln:   jumpif v181, addr_0_block_32, addr_0_block_33
      check: addr_0_block_32: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_33: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_34: // preds: addr_0_block_32 addr_0_block_33
      nextln:   v182 = bool.icmp.i8.ne v84, 0x0
      nextln:   jumpif v182, addr_0_block_35, addr_0_block_36
      check: addr_0_block_35: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37
      check: addr_0_block_36: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37
      check: addr_0_block_37: // preds: addr_0_block_35 addr_0_block_36
      nextln:   v183 = i52.unsigned_from_bits v107
      nextln:   v184 = int.modulo v183, 0x1
      nextln:   v185 = int.sub v183, v184
      nextln:   v186 = i52.to_bits v185
      nextln:   v187 = bool.icmp.i52.eq v107, v186
      nextln:   v188 = i8.load v107
      nextln:   v189 = i8.lshl v188, 0x0
      nextln:   v190 = i16.or 0x0, v189
      nextln:   v191 = bool.bitwise_not v11
      nextln:   jumpif v191, addr_0_block_38, addr_0_block_39
      check: addr_0_block_38: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(v11, 0xc)
      check: addr_0_block_39: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(v11, 0x0)
      check: addr_0_block_40(v192: i64, v193: i8): // preds: addr_0_block_38 addr_0_block_39
      nextln:   v194 = i64.wrapping_add v6, 0x1
      nextln:   v195 = i64.unsigned_from_bits v194
      nextln:   v196 = int.modulo v195, 0x1
      nextln:   v197 = int.sub v195, v196
      nextln:   v198 = i64.to_bits v197
      nextln:   v199 = bool.icmp.i64.eq v194, v198
      nextln:   v200 = i64.lshr v194, 0x30
      nextln:   v201 = i16.trunc.i64 v200
      nextln:   v202 = bool.icmp.i16.eq v201, 0x0
      nextln:   v203 = bool.bitwise_not v202
      nextln:   jumpif v203, addr_0_block_41, addr_0_block_42
      check: addr_0_block_41: // preds: addr_0_block_40
      nextln:   jump addr_0_block_43(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_44(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_42: // preds: addr_0_block_40
      nextln:   jump addr_0_block_43(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_43(v350: i52, v351: int, v352: bool, v353: bool): // preds: addr_0_block_42
      nextln:   v354 = i52.trunc.i64 v194
      nextln:   jump addr_0_block_44(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v354, 0x1, 0x0)
      check: addr_0_block_44(v204: i3, v205: i1, v206: i1, v207: i1, v208: i1, v209: i4, v210: i1, v211: bool, v212: int, v213: int, v214: bool, v215: bool, v216: i8, v217: i8, v218: i52, v219: i1, v220: bool, v221: bool, v222: int, v223: i1, v224: bool, v225: i4, v226: i2, v227: i4, v228: i8, v229: i8, v230: i2, v231: i2, v232: bool, v233: i2, v234: i2, v235: bool, v236: bool, v237: bool, v238: bool, v239: i52, v240: i1, v241: i64, v242: i1, v243: i8, v244: i8, v245: i52, v246: i1, v247: bool, v248: bool, v249: int, v250: i1, v251: bool, v252: i4, v253: i2, v254: i4, v255: i8, v256: i8, v257: i2, v258: i2, v259: bool, v260: i2, v261: i2, v262: bool, v263: bool, v264: bool, v265: bool, v266: i52, v267: i1, v268: i64): // preds: addr_0_block_41 addr_0_block_43
      nextln:   v269 = bool.icmp.i8.ne v243, 0x0
      nextln:   v270 = bool.bitwise_not v269
      nextln:   v271 = bool.bitwise_not v11
      nextln:   v272 = bool.and v271, 0x1
      nextln:   v273 = bool.or v272, 0x0
      nextln:   v274 = bool.icmp.i8.ne v243, 0x0
      nextln:   v275 = bool.bitwise_not v274
      nextln:   v276 = bool.and v273, v275
      nextln:   v277 = bool.icmp.i8.eq v255, 0x1
      nextln:   v278 = bool.and v276, v277
      nextln:   jumpif v278, addr_0_block_45, addr_0_block_46
      check: addr_0_block_45: // preds: addr_0_block_44
      nextln:   jump addr_0_block_47
      check: addr_0_block_46: // preds: addr_0_block_44
      nextln:   jump addr_0_block_47
      check: addr_0_block_47: // preds: addr_0_block_45 addr_0_block_46
      nextln:   v279 = bool.icmp.i8.ne v243, 0x0
      nextln:   v280 = bool.bitwise_not v279
      nextln:   v281 = bool.icmp.i8.ne v243, 0x0
      nextln:   v282 = bool.bitwise_not v281
      nextln:   v283 = bool.icmp.i8.eq v255, 0x1
      nextln:   v284 = bool.and v282, v283
      nextln:   jumpif v214, addr_0_block_48, addr_0_block_49
      check: addr_0_block_48: // preds: addr_0_block_47
      nextln:   v285 = bool.icmp.i8.eq v243, 0x0
      nextln:   jump addr_0_block_50(0x1)
      check: addr_0_block_49: // preds: addr_0_block_47
      nextln:   jump addr_0_block_50(0x0)
      check: addr_0_block_50(v286: bool): // preds: addr_0_block_48 addr_0_block_49
      nextln:   v287 = bool.icmp.i8.eq v243, 0x0
      nextln:   v288 = bool.and v215, v287
      nextln:   jumpif v288, addr_0_block_51, addr_0_block_52
      check: addr_0_block_51: // preds: addr_0_block_50
      nextln:   jump addr_0_block_53(0x0, 0x0)
      check: addr_0_block_52: // preds: addr_0_block_50
      nextln:   jump addr_0_block_53(0x0, 0x0)
      check: addr_0_block_53(v289: bool, v290: bool): // preds: addr_0_block_51 addr_0_block_52
      nextln:   v291 = bool.or v286, v289
      nextln:   jumpif v291, addr_0_block_54, addr_0_block_67
      check: addr_0_block_54: // preds: addr_0_block_53
      nextln:   v292 = i52.unsigned_from_bits v239
      nextln:   v293 = int.modulo v292, 0x8
      nextln:   v294 = int.sub v292, v293
      nextln:   v295 = i52.to_bits v294
      nextln:   v296 = bool.icmp.i52.eq v239, v295
      nextln:   v297 = i64.load v239
      nextln:   jumpif v286, addr_0_block_55, addr_0_block_56
      nextln:   jump addr_0_block_68(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v297, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, 0x0, 0x0)
      check: addr_0_block_55: // no preds!
      nextln:   jump addr_0_block_57
      check: addr_0_block_56: // no preds!
      nextln:   jump addr_0_block_57
      check: addr_0_block_57: // preds: addr_0_block_55 addr_0_block_56
      nextln:   jumpif v289, addr_0_block_58, addr_0_block_59
      check: addr_0_block_58: // preds: addr_0_block_57
      nextln:   jump addr_0_block_60
      check: addr_0_block_59: // preds: addr_0_block_57
      nextln:   jump addr_0_block_60
      check: addr_0_block_60: // preds: addr_0_block_58 addr_0_block_59
      nextln:   v370 = i52.unsigned_from_bits v239
      nextln:   v371 = int.modulo v370, 0x8
      nextln:   v372 = int.sub v370, v371
      nextln:   v373 = i52.to_bits v372
      nextln:   v374 = bool.icmp.i52.eq v239, v373
      nextln:   v375 = bool.icmp.i52.eq v239, 0x13000000
      nextln:   jumpif v375, addr_0_block_61, addr_0_block_65
      check: addr_0_block_61: // preds: addr_0_block_60
      nextln:   v376 = i64.unsigned_from_bits v297
      nextln:   v377 = bool.icmp.int.eq v376, 0x4
      nextln:   jumpif v377, addr_0_block_62, addr_0_block_63
      nextln:   jump addr_0_block_66
      check: addr_0_block_62: // no preds!
      nextln:   jump addr_0_block_64
      check: addr_0_block_63: // no preds!
      nextln:   v378 = i8.trunc.i64 v297
      nextln:   v379 = i8.unsigned_from_bits v378
      nextln:   jump addr_0_block_64
      check: addr_0_block_64: // preds: addr_0_block_62 addr_0_block_63
      check: addr_0_block_65: // preds: addr_0_block_60
      nextln:   store.i64 v297, v239
      nextln:   jump addr_0_block_66
      check: addr_0_block_66: // preds: addr_0_block_61 addr_0_block_65
      check: addr_0_block_67: // preds: addr_0_block_53
      nextln:   jump addr_0_block_68(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_68(v298: i8, v299: i1, v300: i16, v301: i8, v302: bool, v303: bool, v304: bool, v305: int, v306: i64, v307: i8, v308: i8, v309: i52, v310: i1, v311: bool, v312: bool, v313: int, v314: i1, v315: bool, v316: i4, v317: i2, v318: i4, v319: i8, v320: i8, v321: i2, v322: i2, v323: bool, v324: i2, v325: i2, v326: bool, v327: bool, v328: bool, v329: bool, v330: i52, v331: i1, v332: i64, v333: i2, v334: bool): // preds: addr_0_block_54 addr_0_block_67
      nextln:   v335 = bool.icmp.i8.ne v243, 0x0
      nextln:   v336 = bool.bitwise_not v335
      nextln:   v337 = bool.and v336, 0x1
      nextln:   v338 = bool.icmp.i8.ne v243, 0x0
      nextln:   v339 = bool.bitwise_not v338
      nextln:   v340 = bool.and 0x1, v339
      nextln:   jumpif v340, addr_0_block_69, addr_0_block_70
      check: addr_0_block_69: // preds: addr_0_block_68
      nextln:   jump addr_0_block_71
      check: addr_0_block_70: // preds: addr_0_block_68
      nextln:   jump addr_0_block_71
      check: addr_0_block_71: // preds: addr_0_block_69 addr_0_block_70
      nextln:   v341 = bool.icmp.i8.ne v243, 0x0
      nextln:   jumpif v341, addr_0_block_72, addr_0_block_73
      check: addr_0_block_72: // preds: addr_0_block_71
      nextln:   jump addr_0_block_74
      check: addr_0_block_73: // preds: addr_0_block_71
      nextln:   jump addr_0_block_74
      check: addr_0_block_74: // preds: addr_0_block_72 addr_0_block_73
      nextln:   v342 = i52.unsigned_from_bits v266
      nextln:   v343 = int.modulo v342, 0x1
      nextln:   v344 = int.sub v342, v343
      nextln:   v345 = i52.to_bits v344
      nextln:   v346 = bool.icmp.i52.eq v266, v345
      nextln:   v347 = i8.load v266
      nextln:   v348 = i8.lshl v347, 0x8
      nextln:   v349 = i16.or 0x0, v348
      check: addr_0_block_75: // preds: addr_0_block_2
      nextln:   v36 = i64.unsigned_from_bits v6
      nextln:   v37 = int.modulo v36, 0x2
      nextln:   v38 = int.sub v36, v37
      nextln:   v39 = i64.to_bits v38
      nextln:   v40 = bool.icmp.i64.eq v6, v39
      nextln:   v41 = i64.lshr v6, 0x30
      nextln:   v42 = i16.trunc.i64 v41
      nextln:   v43 = bool.icmp.i16.eq v42, 0x0
      nextln:   v44 = bool.bitwise_not v43
      nextln:   jumpif v44, addr_0_block_76, addr_0_block_77
      nextln:   jump addr_0_block_110(v11, 0x0, v523)
      check: addr_0_block_76: // no preds!
      nextln:   jump addr_0_block_78(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_79(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_77: // no preds!
      nextln:   jump addr_0_block_78(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_78(v524: i52, v525: int, v526: bool, v527: bool): // preds: addr_0_block_77
      nextln:   v528 = i52.trunc.i64 v6
      nextln:   jump addr_0_block_79(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v528, 0x1, 0x0)
      check: addr_0_block_79(v380: i3, v381: i1, v382: i1, v383: i1, v384: i1, v385: i4, v386: i1, v387: bool, v388: int, v389: int, v390: bool, v391: bool, v392: i8, v393: i8, v394: i52, v395: i1, v396: bool, v397: bool, v398: int, v399: i1, v400: bool, v401: i4, v402: i2, v403: i4, v404: i8, v405: i8, v406: i2, v407: i2, v408: bool, v409: i2, v410: i2, v411: bool, v412: bool, v413: bool, v414: bool, v415: i52, v416: i1, v417: i64, v418: i1, v419: i8, v420: i8, v421: i52, v422: i1, v423: bool, v424: bool, v425: int, v426: i1, v427: bool, v428: i4, v429: i2, v430: i4, v431: i8, v432: i8, v433: i2, v434: i2, v435: bool, v436: i2, v437: i2, v438: bool, v439: bool, v440: bool, v441: bool, v442: i52, v443: i1, v444: i64): // preds: addr_0_block_76 addr_0_block_78
      nextln:   v445 = bool.icmp.i8.ne v419, 0x0
      nextln:   v446 = bool.bitwise_not v445
      nextln:   v447 = bool.bitwise_not v11
      nextln:   v448 = bool.and v447, 0x1
      nextln:   v449 = bool.or v448, 0x0
      nextln:   v450 = bool.icmp.i8.ne v419, 0x0
      nextln:   v451 = bool.bitwise_not v450
      nextln:   v452 = bool.and v449, v451
      nextln:   v453 = bool.icmp.i8.eq v431, 0x1
      nextln:   v454 = bool.and v452, v453
      nextln:   jumpif v454, addr_0_block_80, addr_0_block_81
      check: addr_0_block_80: // preds: addr_0_block_79
      nextln:   jump addr_0_block_82
      check: addr_0_block_81: // preds: addr_0_block_79
      nextln:   jump addr_0_block_82
      check: addr_0_block_82: // preds: addr_0_block_80 addr_0_block_81
      nextln:   v455 = bool.icmp.i8.ne v419, 0x0
      nextln:   v456 = bool.bitwise_not v455
      nextln:   v457 = bool.icmp.i8.ne v419, 0x0
      nextln:   v458 = bool.bitwise_not v457
      nextln:   v459 = bool.icmp.i8.eq v431, 0x1
      nextln:   v460 = bool.and v458, v459
      nextln:   jumpif v390, addr_0_block_83, addr_0_block_84
      check: addr_0_block_83: // preds: addr_0_block_82
      nextln:   v461 = bool.icmp.i8.eq v419, 0x0
      nextln:   jump addr_0_block_85(0x1)
      check: addr_0_block_84: // preds: addr_0_block_82
      nextln:   jump addr_0_block_85(0x0)
      check: addr_0_block_85(v462: bool): // preds: addr_0_block_83 addr_0_block_84
      nextln:   v463 = bool.icmp.i8.eq v419, 0x0
      nextln:   v464 = bool.and v391, v463
      nextln:   jumpif v464, addr_0_block_86, addr_0_block_87
      check: addr_0_block_86: // preds: addr_0_block_85
      nextln:   jump addr_0_block_88(0x0, 0x0)
      check: addr_0_block_87: // preds: addr_0_block_85
      nextln:   jump addr_0_block_88(0x0, 0x0)
      check: addr_0_block_88(v465: bool, v466: bool): // preds: addr_0_block_86 addr_0_block_87
      nextln:   v467 = bool.or v462, v465
      nextln:   jumpif v467, addr_0_block_89, addr_0_block_102
      check: addr_0_block_89: // preds: addr_0_block_88
      nextln:   v468 = i52.unsigned_from_bits v415
      nextln:   v469 = int.modulo v468, 0x8
      nextln:   v470 = int.sub v468, v469
      nextln:   v471 = i52.to_bits v470
      nextln:   v472 = bool.icmp.i52.eq v415, v471
      nextln:   v473 = i64.load v415
      nextln:   jumpif v462, addr_0_block_90, addr_0_block_91
      nextln:   jump addr_0_block_103(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v473, v392, v393, v394, v395, v396, v397, v398, v399, v400, v401, v402, v403, v404, v405, v406, v407, v408, v409, v410, v411, v412, v413, v414, v415, v416, v417, 0x0, 0x0)
      check: addr_0_block_90: // no preds!
      nextln:   jump addr_0_block_92
      check: addr_0_block_91: // no preds!
      nextln:   jump addr_0_block_92
      check: addr_0_block_92: // preds: addr_0_block_90 addr_0_block_91
      nextln:   jumpif v465, addr_0_block_93, addr_0_block_94
      check: addr_0_block_93: // preds: addr_0_block_92
      nextln:   jump addr_0_block_95
      check: addr_0_block_94: // preds: addr_0_block_92
      nextln:   jump addr_0_block_95
      check: addr_0_block_95: // preds: addr_0_block_93 addr_0_block_94
      nextln:   v529 = i52.unsigned_from_bits v415
      nextln:   v530 = int.modulo v529, 0x8
      nextln:   v531 = int.sub v529, v530
      nextln:   v532 = i52.to_bits v531
      nextln:   v533 = bool.icmp.i52.eq v415, v532
      nextln:   v534 = bool.icmp.i52.eq v415, 0x13000000
      nextln:   jumpif v534, addr_0_block_96, addr_0_block_100
      check: addr_0_block_96: // preds: addr_0_block_95
      nextln:   v535 = i64.unsigned_from_bits v473
      nextln:   v536 = bool.icmp.int.eq v535, 0x4
      nextln:   jumpif v536, addr_0_block_97, addr_0_block_98
      nextln:   jump addr_0_block_101
      check: addr_0_block_97: // no preds!
      nextln:   jump addr_0_block_99
      check: addr_0_block_98: // no preds!
      nextln:   v537 = i8.trunc.i64 v473
      nextln:   v538 = i8.unsigned_from_bits v537
      nextln:   jump addr_0_block_99
      check: addr_0_block_99: // preds: addr_0_block_97 addr_0_block_98
      check: addr_0_block_100: // preds: addr_0_block_95
      nextln:   store.i64 v473, v415
      nextln:   jump addr_0_block_101
      check: addr_0_block_101: // preds: addr_0_block_96 addr_0_block_100
      check: addr_0_block_102: // preds: addr_0_block_88
      nextln:   jump addr_0_block_103(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_103(v474: i8, v475: i1, v476: i16, v477: i8, v478: bool, v479: bool, v480: bool, v481: int, v482: i64, v483: i8, v484: i8, v485: i52, v486: i1, v487: bool, v488: bool, v489: int, v490: i1, v491: bool, v492: i4, v493: i2, v494: i4, v495: i8, v496: i8, v497: i2, v498: i2, v499: bool, v500: i2, v501: i2, v502: bool, v503: bool, v504: bool, v505: bool, v506: i52, v507: i1, v508: i64, v509: i2, v510: bool): // preds: addr_0_block_89 addr_0_block_102
      nextln:   v511 = bool.icmp.i8.ne v419, 0x0
      nextln:   v512 = bool.bitwise_not v511
      nextln:   v513 = bool.and v512, 0x1
      nextln:   v514 = bool.icmp.i8.ne v419, 0x0
      nextln:   v515 = bool.bitwise_not v514
      nextln:   v516 = bool.and 0x1, v515
      nextln:   jumpif v516, addr_0_block_104, addr_0_block_105
      check: addr_0_block_104: // preds: addr_0_block_103
      nextln:   jump addr_0_block_106
      check: addr_0_block_105: // preds: addr_0_block_103
      nextln:   jump addr_0_block_106
      check: addr_0_block_106: // preds: addr_0_block_104 addr_0_block_105
      nextln:   v517 = bool.icmp.i8.ne v419, 0x0
      nextln:   jumpif v517, addr_0_block_107, addr_0_block_108
      check: addr_0_block_107: // preds: addr_0_block_106
      nextln:   jump addr_0_block_109
      check: addr_0_block_108: // preds: addr_0_block_106
      nextln:   jump addr_0_block_109
      check: addr_0_block_109: // preds: addr_0_block_107 addr_0_block_108
      nextln:   v518 = i52.unsigned_from_bits v442
      nextln:   v519 = int.modulo v518, 0x2
      nextln:   v520 = int.sub v518, v519
      nextln:   v521 = i52.to_bits v520
      nextln:   v522 = bool.icmp.i52.eq v442, v521
      nextln:   v523 = i16.load v442
      check: addr_0_block_110(v25: i64, v26: i8, v27: i16): // preds: addr_0_block_3 addr_0_block_75
      nextln:   v28 = i32.zext.i16 0x0
      nextln:   v29 = i32.lshl v28, 0x10
      nextln:   v30 = i32.zext.i16 v27
      nextln:   v31 = i32.or v29, v30
      nextln:   v32 = i64.zext.i32 0x0
      nextln:   v33 = i64.lshl v32, 0x20
      nextln:   v34 = i64.zext.i32 v31
      nextln:   v35 = i64.or v33, v34
      nextln:   write_reg.i64 v35, "x1"
- name: ldarh_2
  bytes: [0x21, 0xfc, 0xdf, 0x48]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x1"
      nextln:   v1 = i64.unsigned_from_bits v0
      nextln:   v2 = int.modulo v1, 0x2
      nextln:   v3 = int.sub v1, v2
      nextln:   v4 = i64.to_bits v3
      nextln:   v5 = bool.icmp.i64.eq v0, v4
      nextln:   v6 = bool.bitwise_not v5
      nextln:   v7 = bool.and 0x1, v6
      nextln:   jumpif v7, addr_0_block_0, addr_0_block_1
      check: addr_0_block_0: // preds: entry
      nextln:   jump addr_0_block_2(0x0)
      check: addr_0_block_1: // preds: entry
      nextln:   jump addr_0_block_2(0x0)
      check: addr_0_block_2(v8: bool): // preds: addr_0_block_0 addr_0_block_1
      nextln:   v9 = bool.bitwise_not v5
      nextln:   jumpif v9, addr_0_block_3, addr_0_block_75
      check: addr_0_block_3: // preds: addr_0_block_2
      nextln:   v10 = i64.unsigned_from_bits v0
      nextln:   v11 = int.modulo v10, 0x1
      nextln:   v12 = int.sub v10, v11
      nextln:   v13 = i64.to_bits v12
      nextln:   v14 = bool.icmp.i64.eq v0, v13
      nextln:   v15 = i64.lshr v0, 0x30
      nextln:   v16 = i16.trunc.i64 v15
      nextln:   v17 = bool.icmp.i16.eq v16, 0x0
      nextln:   v18 = bool.bitwise_not v17
      nextln:   jumpif v18, addr_0_block_4, addr_0_block_5
      nextln:   jump addr_0_block_110(v186, v187, v343)
      check: addr_0_block_4: // no preds!
      nextln:   jump addr_0_block_6(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_7(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_5: // no preds!
      nextln:   jump addr_0_block_6(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_6(v349: i52, v350: int, v351: bool, v352: bool): // preds: addr_0_block_5
      nextln:   v353 = i52.trunc.i64 v0
      nextln:   jump addr_0_block_7(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v353, 0x1, 0x0)
      check: addr_0_block_7(v39: i3, v40: i1, v41: i1, v42: i1, v43: i1, v44: i4, v45: i1, v46: bool, v47: int, v48: int, v49: bool, v50: bool, v51: i8, v52: i8, v53: i52, v54: i1, v55: bool, v56: bool, v57: int, v58: i1, v59: bool, v60: i4, v61: i2, v62: i4, v63: i8, v64: i8, v65: i2, v66: i2, v67: bool, v68: i2, v69: i2, v70: bool, v71: bool, v72: bool, v73: bool, v74: i52, v75: i1, v76: i64, v77: i1, v78: i8, v79: i8, v80: i52, v81: i1, v82: bool, v83: bool, v84: int, v85: i1, v86: bool, v87: i4, v88: i2, v89: i4, v90: i8, v91: i8, v92: i2, v93: i2, v94: bool, v95: i2, v96: i2, v97: bool, v98: bool, v99: bool, v100: bool, v101: i52, v102: i1, v103: i64): // preds: addr_0_block_4 addr_0_block_6
      nextln:   v104 = bool.icmp.i8.ne v78, 0x0
      nextln:   v105 = bool.bitwise_not v104
      nextln:   v106 = bool.bitwise_not v5
      nextln:   v107 = bool.and v106, 0x1
      nextln:   v108 = bool.or v107, 0x0
      nextln:   v109 = bool.icmp.i8.ne v78, 0x0
      nextln:   v110 = bool.bitwise_not v109
      nextln:   v111 = bool.and v108, v110
      nextln:   v112 = bool.icmp.i8.eq v90, 0x1
      nextln:   v113 = bool.and v111, v112
      nextln:   jumpif v113, addr_0_block_8, addr_0_block_9
      check: addr_0_block_8: // preds: addr_0_block_7
      nextln:   jump addr_0_block_10
      check: addr_0_block_9: // preds: addr_0_block_7
      nextln:   jump addr_0_block_10
      check: addr_0_block_10: // preds: addr_0_block_8 addr_0_block_9
      nextln:   v114 = bool.icmp.i8.ne v78, 0x0
      nextln:   v115 = bool.bitwise_not v114
      nextln:   v116 = bool.icmp.i8.ne v78, 0x0
      nextln:   v117 = bool.bitwise_not v116
      nextln:   v118 = bool.icmp.i8.eq v90, 0x1
      nextln:   v119 = bool.and v117, v118
      nextln:   jumpif v49, addr_0_block_11, addr_0_block_12
      check: addr_0_block_11: // preds: addr_0_block_10
      nextln:   v120 = bool.icmp.i8.eq v78, 0x0
      nextln:   jump addr_0_block_13(0x1)
      check: addr_0_block_12: // preds: addr_0_block_10
      nextln:   jump addr_0_block_13(0x0)
      check: addr_0_block_13(v121: bool): // preds: addr_0_block_11 addr_0_block_12
      nextln:   v122 = bool.icmp.i8.eq v78, 0x0
      nextln:   v123 = bool.and v50, v122
      nextln:   jumpif v123, addr_0_block_14, addr_0_block_15
      check: addr_0_block_14: // preds: addr_0_block_13
      nextln:   jump addr_0_block_16(0x0, 0x0)
      check: addr_0_block_15: // preds: addr_0_block_13
      nextln:   jump addr_0_block_16(0x0, 0x0)
      check: addr_0_block_16(v124: bool, v125: bool): // preds: addr_0_block_14 addr_0_block_15
      nextln:   v126 = bool.or v121, v124
      nextln:   jumpif v126, addr_0_block_17, addr_0_block_30
      check: addr_0_block_17: // preds: addr_0_block_16
      nextln:   v127 = i52.unsigned_from_bits v74
      nextln:   v128 = int.modulo v127, 0x8
      nextln:   v129 = int.sub v127, v128
      nextln:   v130 = i52.to_bits v129
      nextln:   v131 = bool.icmp.i52.eq v74, v130
      nextln:   v132 = i64.load v74
      nextln:   jumpif v121, addr_0_block_18, addr_0_block_19
      nextln:   jump addr_0_block_31(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v132, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, 0x0, 0x0)
      check: addr_0_block_18: // no preds!
      nextln:   jump addr_0_block_20
      check: addr_0_block_19: // no preds!
      nextln:   jump addr_0_block_20
      check: addr_0_block_20: // preds: addr_0_block_18 addr_0_block_19
      nextln:   jumpif v124, addr_0_block_21, addr_0_block_22
      check: addr_0_block_21: // preds: addr_0_block_20
      nextln:   jump addr_0_block_23
      check: addr_0_block_22: // preds: addr_0_block_20
      nextln:   jump addr_0_block_23
      check: addr_0_block_23: // preds: addr_0_block_21 addr_0_block_22
      nextln:   v354 = i52.unsigned_from_bits v74
      nextln:   v355 = int.modulo v354, 0x8
      nextln:   v356 = int.sub v354, v355
      nextln:   v357 = i52.to_bits v356
      nextln:   v358 = bool.icmp.i52.eq v74, v357
      nextln:   v359 = bool.icmp.i52.eq v74, 0x13000000
      nextln:   jumpif v359, addr_0_block_24, addr_0_block_28
      check: addr_0_block_24: // preds: addr_0_block_23
      nextln:   v360 = i64.unsigned_from_bits v132
      nextln:   v361 = bool.icmp.int.eq v360, 0x4
      nextln:   jumpif v361, addr_0_block_25, addr_0_block_26
      nextln:   jump addr_0_block_29
      check: addr_0_block_25: // no preds!
      nextln:   jump addr_0_block_27
      check: addr_0_block_26: // no preds!
      nextln:   v362 = i8.trunc.i64 v132
      nextln:   v363 = i8.unsigned_from_bits v362
      nextln:   jump addr_0_block_27
      check: addr_0_block_27: // preds: addr_0_block_25 addr_0_block_26
      check: addr_0_block_28: // preds: addr_0_block_23
      nextln:   store.i64 v132, v74
      nextln:   jump addr_0_block_29
      check: addr_0_block_29: // preds: addr_0_block_24 addr_0_block_28
      check: addr_0_block_30: // preds: addr_0_block_16
      nextln:   jump addr_0_block_31(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_31(v133: i8, v134: i1, v135: i16, v136: i8, v137: bool, v138: bool, v139: bool, v140: int, v141: i64, v142: i8, v143: i8, v144: i52, v145: i1, v146: bool, v147: bool, v148: int, v149: i1, v150: bool, v151: i4, v152: i2, v153: i4, v154: i8, v155: i8, v156: i2, v157: i2, v158: bool, v159: i2, v160: i2, v161: bool, v162: bool, v163: bool, v164: bool, v165: i52, v166: i1, v167: i64, v168: i2, v169: bool): // preds: addr_0_block_17 addr_0_block_30
      nextln:   v170 = bool.icmp.i8.ne v78, 0x0
      nextln:   v171 = bool.bitwise_not v170
      nextln:   v172 = bool.and v171, 0x1
      nextln:   v173 = bool.icmp.i8.ne v78, 0x0
      nextln:   v174 = bool.bitwise_not v173
      nextln:   v175 = bool.and 0x1, v174
      nextln:   jumpif v175, addr_0_block_32, addr_0_block_33
      check: addr_0_block_32: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_33: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_34: // preds: addr_0_block_32 addr_0_block_33
      nextln:   v176 = bool.icmp.i8.ne v78, 0x0
      nextln:   jumpif v176, addr_0_block_35, addr_0_block_36
      check: addr_0_block_35: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37
      check: addr_0_block_36: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37
      check: addr_0_block_37: // preds: addr_0_block_35 addr_0_block_36
      nextln:   v177 = i52.unsigned_from_bits v101
      nextln:   v178 = int.modulo v177, 0x1
      nextln:   v179 = int.sub v177, v178
      nextln:   v180 = i52.to_bits v179
      nextln:   v181 = bool.icmp.i52.eq v101, v180
      nextln:   v182 = i8.load v101
      nextln:   v183 = i8.lshl v182, 0x0
      nextln:   v184 = i16.or 0x0, v183
      nextln:   v185 = bool.bitwise_not v5
      nextln:   jumpif v185, addr_0_block_38, addr_0_block_39
      check: addr_0_block_38: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(v5, 0xc)
      check: addr_0_block_39: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(v5, 0x0)
      check: addr_0_block_40(v186: i64, v187: i8): // preds: addr_0_block_38 addr_0_block_39
      nextln:   v188 = i64.wrapping_add v0, 0x1
      nextln:   v189 = i64.unsigned_from_bits v188
      nextln:   v190 = int.modulo v189, 0x1
      nextln:   v191 = int.sub v189, v190
      nextln:   v192 = i64.to_bits v191
      nextln:   v193 = bool.icmp.i64.eq v188, v192
      nextln:   v194 = i64.lshr v188, 0x30
      nextln:   v195 = i16.trunc.i64 v194
      nextln:   v196 = bool.icmp.i16.eq v195, 0x0
      nextln:   v197 = bool.bitwise_not v196
      nextln:   jumpif v197, addr_0_block_41, addr_0_block_42
      check: addr_0_block_41: // preds: addr_0_block_40
      nextln:   jump addr_0_block_43(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_44(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_42: // preds: addr_0_block_40
      nextln:   jump addr_0_block_43(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_43(v344: i52, v345: int, v346: bool, v347: bool): // preds: addr_0_block_42
      nextln:   v348 = i52.trunc.i64 v188
      nextln:   jump addr_0_block_44(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v348, 0x1, 0x0)
      check: addr_0_block_44(v198: i3, v199: i1, v200: i1, v201: i1, v202: i1, v203: i4, v204: i1, v205: bool, v206: int, v207: int, v208: bool, v209: bool, v210: i8, v211: i8, v212: i52, v213: i1, v214: bool, v215: bool, v216: int, v217: i1, v218: bool, v219: i4, v220: i2, v221: i4, v222: i8, v223: i8, v224: i2, v225: i2, v226: bool, v227: i2, v228: i2, v229: bool, v230: bool, v231: bool, v232: bool, v233: i52, v234: i1, v235: i64, v236: i1, v237: i8, v238: i8, v239: i52, v240: i1, v241: bool, v242: bool, v243: int, v244: i1, v245: bool, v246: i4, v247: i2, v248: i4, v249: i8, v250: i8, v251: i2, v252: i2, v253: bool, v254: i2, v255: i2, v256: bool, v257: bool, v258: bool, v259: bool, v260: i52, v261: i1, v262: i64): // preds: addr_0_block_41 addr_0_block_43
      nextln:   v263 = bool.icmp.i8.ne v237, 0x0
      nextln:   v264 = bool.bitwise_not v263
      nextln:   v265 = bool.bitwise_not v5
      nextln:   v266 = bool.and v265, 0x1
      nextln:   v267 = bool.or v266, 0x0
      nextln:   v268 = bool.icmp.i8.ne v237, 0x0
      nextln:   v269 = bool.bitwise_not v268
      nextln:   v270 = bool.and v267, v269
      nextln:   v271 = bool.icmp.i8.eq v249, 0x1
      nextln:   v272 = bool.and v270, v271
      nextln:   jumpif v272, addr_0_block_45, addr_0_block_46
      check: addr_0_block_45: // preds: addr_0_block_44
      nextln:   jump addr_0_block_47
      check: addr_0_block_46: // preds: addr_0_block_44
      nextln:   jump addr_0_block_47
      check: addr_0_block_47: // preds: addr_0_block_45 addr_0_block_46
      nextln:   v273 = bool.icmp.i8.ne v237, 0x0
      nextln:   v274 = bool.bitwise_not v273
      nextln:   v275 = bool.icmp.i8.ne v237, 0x0
      nextln:   v276 = bool.bitwise_not v275
      nextln:   v277 = bool.icmp.i8.eq v249, 0x1
      nextln:   v278 = bool.and v276, v277
      nextln:   jumpif v208, addr_0_block_48, addr_0_block_49
      check: addr_0_block_48: // preds: addr_0_block_47
      nextln:   v279 = bool.icmp.i8.eq v237, 0x0
      nextln:   jump addr_0_block_50(0x1)
      check: addr_0_block_49: // preds: addr_0_block_47
      nextln:   jump addr_0_block_50(0x0)
      check: addr_0_block_50(v280: bool): // preds: addr_0_block_48 addr_0_block_49
      nextln:   v281 = bool.icmp.i8.eq v237, 0x0
      nextln:   v282 = bool.and v209, v281
      nextln:   jumpif v282, addr_0_block_51, addr_0_block_52
      check: addr_0_block_51: // preds: addr_0_block_50
      nextln:   jump addr_0_block_53(0x0, 0x0)
      check: addr_0_block_52: // preds: addr_0_block_50
      nextln:   jump addr_0_block_53(0x0, 0x0)
      check: addr_0_block_53(v283: bool, v284: bool): // preds: addr_0_block_51 addr_0_block_52
      nextln:   v285 = bool.or v280, v283
      nextln:   jumpif v285, addr_0_block_54, addr_0_block_67
      check: addr_0_block_54: // preds: addr_0_block_53
      nextln:   v286 = i52.unsigned_from_bits v233
      nextln:   v287 = int.modulo v286, 0x8
      nextln:   v288 = int.sub v286, v287
      nextln:   v289 = i52.to_bits v288
      nextln:   v290 = bool.icmp.i52.eq v233, v289
      nextln:   v291 = i64.load v233
      nextln:   jumpif v280, addr_0_block_55, addr_0_block_56
      nextln:   jump addr_0_block_68(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v291, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, 0x0, 0x0)
      check: addr_0_block_55: // no preds!
      nextln:   jump addr_0_block_57
      check: addr_0_block_56: // no preds!
      nextln:   jump addr_0_block_57
      check: addr_0_block_57: // preds: addr_0_block_55 addr_0_block_56
      nextln:   jumpif v283, addr_0_block_58, addr_0_block_59
      check: addr_0_block_58: // preds: addr_0_block_57
      nextln:   jump addr_0_block_60
      check: addr_0_block_59: // preds: addr_0_block_57
      nextln:   jump addr_0_block_60
      check: addr_0_block_60: // preds: addr_0_block_58 addr_0_block_59
      nextln:   v364 = i52.unsigned_from_bits v233
      nextln:   v365 = int.modulo v364, 0x8
      nextln:   v366 = int.sub v364, v365
      nextln:   v367 = i52.to_bits v366
      nextln:   v368 = bool.icmp.i52.eq v233, v367
      nextln:   v369 = bool.icmp.i52.eq v233, 0x13000000
      nextln:   jumpif v369, addr_0_block_61, addr_0_block_65
      check: addr_0_block_61: // preds: addr_0_block_60
      nextln:   v370 = i64.unsigned_from_bits v291
      nextln:   v371 = bool.icmp.int.eq v370, 0x4
      nextln:   jumpif v371, addr_0_block_62, addr_0_block_63
      nextln:   jump addr_0_block_66
      check: addr_0_block_62: // no preds!
      nextln:   jump addr_0_block_64
      check: addr_0_block_63: // no preds!
      nextln:   v372 = i8.trunc.i64 v291
      nextln:   v373 = i8.unsigned_from_bits v372
      nextln:   jump addr_0_block_64
      check: addr_0_block_64: // preds: addr_0_block_62 addr_0_block_63
      check: addr_0_block_65: // preds: addr_0_block_60
      nextln:   store.i64 v291, v233
      nextln:   jump addr_0_block_66
      check: addr_0_block_66: // preds: addr_0_block_61 addr_0_block_65
      check: addr_0_block_67: // preds: addr_0_block_53
      nextln:   jump addr_0_block_68(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_68(v292: i8, v293: i1, v294: i16, v295: i8, v296: bool, v297: bool, v298: bool, v299: int, v300: i64, v301: i8, v302: i8, v303: i52, v304: i1, v305: bool, v306: bool, v307: int, v308: i1, v309: bool, v310: i4, v311: i2, v312: i4, v313: i8, v314: i8, v315: i2, v316: i2, v317: bool, v318: i2, v319: i2, v320: bool, v321: bool, v322: bool, v323: bool, v324: i52, v325: i1, v326: i64, v327: i2, v328: bool): // preds: addr_0_block_54 addr_0_block_67
      nextln:   v329 = bool.icmp.i8.ne v237, 0x0
      nextln:   v330 = bool.bitwise_not v329
      nextln:   v331 = bool.and v330, 0x1
      nextln:   v332 = bool.icmp.i8.ne v237, 0x0
      nextln:   v333 = bool.bitwise_not v332
      nextln:   v334 = bool.and 0x1, v333
      nextln:   jumpif v334, addr_0_block_69, addr_0_block_70
      check: addr_0_block_69: // preds: addr_0_block_68
      nextln:   jump addr_0_block_71
      check: addr_0_block_70: // preds: addr_0_block_68
      nextln:   jump addr_0_block_71
      check: addr_0_block_71: // preds: addr_0_block_69 addr_0_block_70
      nextln:   v335 = bool.icmp.i8.ne v237, 0x0
      nextln:   jumpif v335, addr_0_block_72, addr_0_block_73
      check: addr_0_block_72: // preds: addr_0_block_71
      nextln:   jump addr_0_block_74
      check: addr_0_block_73: // preds: addr_0_block_71
      nextln:   jump addr_0_block_74
      check: addr_0_block_74: // preds: addr_0_block_72 addr_0_block_73
      nextln:   v336 = i52.unsigned_from_bits v260
      nextln:   v337 = int.modulo v336, 0x1
      nextln:   v338 = int.sub v336, v337
      nextln:   v339 = i52.to_bits v338
      nextln:   v340 = bool.icmp.i52.eq v260, v339
      nextln:   v341 = i8.load v260
      nextln:   v342 = i8.lshl v341, 0x8
      nextln:   v343 = i16.or 0x0, v342
      check: addr_0_block_75: // preds: addr_0_block_2
      nextln:   v30 = i64.unsigned_from_bits v0
      nextln:   v31 = int.modulo v30, 0x2
      nextln:   v32 = int.sub v30, v31
      nextln:   v33 = i64.to_bits v32
      nextln:   v34 = bool.icmp.i64.eq v0, v33
      nextln:   v35 = i64.lshr v0, 0x30
      nextln:   v36 = i16.trunc.i64 v35
      nextln:   v37 = bool.icmp.i16.eq v36, 0x0
      nextln:   v38 = bool.bitwise_not v37
      nextln:   jumpif v38, addr_0_block_76, addr_0_block_77
      nextln:   jump addr_0_block_110(v5, 0x0, v517)
      check: addr_0_block_76: // no preds!
      nextln:   jump addr_0_block_78(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_79(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_77: // no preds!
      nextln:   jump addr_0_block_78(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_78(v518: i52, v519: int, v520: bool, v521: bool): // preds: addr_0_block_77
      nextln:   v522 = i52.trunc.i64 v0
      nextln:   jump addr_0_block_79(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v522, 0x1, 0x0)
      check: addr_0_block_79(v374: i3, v375: i1, v376: i1, v377: i1, v378: i1, v379: i4, v380: i1, v381: bool, v382: int, v383: int, v384: bool, v385: bool, v386: i8, v387: i8, v388: i52, v389: i1, v390: bool, v391: bool, v392: int, v393: i1, v394: bool, v395: i4, v396: i2, v397: i4, v398: i8, v399: i8, v400: i2, v401: i2, v402: bool, v403: i2, v404: i2, v405: bool, v406: bool, v407: bool, v408: bool, v409: i52, v410: i1, v411: i64, v412: i1, v413: i8, v414: i8, v415: i52, v416: i1, v417: bool, v418: bool, v419: int, v420: i1, v421: bool, v422: i4, v423: i2, v424: i4, v425: i8, v426: i8, v427: i2, v428: i2, v429: bool, v430: i2, v431: i2, v432: bool, v433: bool, v434: bool, v435: bool, v436: i52, v437: i1, v438: i64): // preds: addr_0_block_76 addr_0_block_78
      nextln:   v439 = bool.icmp.i8.ne v413, 0x0
      nextln:   v440 = bool.bitwise_not v439
      nextln:   v441 = bool.bitwise_not v5
      nextln:   v442 = bool.and v441, 0x1
      nextln:   v443 = bool.or v442, 0x0
      nextln:   v444 = bool.icmp.i8.ne v413, 0x0
      nextln:   v445 = bool.bitwise_not v444
      nextln:   v446 = bool.and v443, v445
      nextln:   v447 = bool.icmp.i8.eq v425, 0x1
      nextln:   v448 = bool.and v446, v447
      nextln:   jumpif v448, addr_0_block_80, addr_0_block_81
      check: addr_0_block_80: // preds: addr_0_block_79
      nextln:   jump addr_0_block_82
      check: addr_0_block_81: // preds: addr_0_block_79
      nextln:   jump addr_0_block_82
      check: addr_0_block_82: // preds: addr_0_block_80 addr_0_block_81
      nextln:   v449 = bool.icmp.i8.ne v413, 0x0
      nextln:   v450 = bool.bitwise_not v449
      nextln:   v451 = bool.icmp.i8.ne v413, 0x0
      nextln:   v452 = bool.bitwise_not v451
      nextln:   v453 = bool.icmp.i8.eq v425, 0x1
      nextln:   v454 = bool.and v452, v453
      nextln:   jumpif v384, addr_0_block_83, addr_0_block_84
      check: addr_0_block_83: // preds: addr_0_block_82
      nextln:   v455 = bool.icmp.i8.eq v413, 0x0
      nextln:   jump addr_0_block_85(0x1)
      check: addr_0_block_84: // preds: addr_0_block_82
      nextln:   jump addr_0_block_85(0x0)
      check: addr_0_block_85(v456: bool): // preds: addr_0_block_83 addr_0_block_84
      nextln:   v457 = bool.icmp.i8.eq v413, 0x0
      nextln:   v458 = bool.and v385, v457
      nextln:   jumpif v458, addr_0_block_86, addr_0_block_87
      check: addr_0_block_86: // preds: addr_0_block_85
      nextln:   jump addr_0_block_88(0x0, 0x0)
      check: addr_0_block_87: // preds: addr_0_block_85
      nextln:   jump addr_0_block_88(0x0, 0x0)
      check: addr_0_block_88(v459: bool, v460: bool): // preds: addr_0_block_86 addr_0_block_87
      nextln:   v461 = bool.or v456, v459
      nextln:   jumpif v461, addr_0_block_89, addr_0_block_102
      check: addr_0_block_89: // preds: addr_0_block_88
      nextln:   v462 = i52.unsigned_from_bits v409
      nextln:   v463 = int.modulo v462, 0x8
      nextln:   v464 = int.sub v462, v463
      nextln:   v465 = i52.to_bits v464
      nextln:   v466 = bool.icmp.i52.eq v409, v465
      nextln:   v467 = i64.load v409
      nextln:   jumpif v456, addr_0_block_90, addr_0_block_91
      nextln:   jump addr_0_block_103(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v467, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, v397, v398, v399, v400, v401, v402, v403, v404, v405, v406, v407, v408, v409, v410, v411, 0x0, 0x0)
      check: addr_0_block_90: // no preds!
      nextln:   jump addr_0_block_92
      check: addr_0_block_91: // no preds!
      nextln:   jump addr_0_block_92
      check: addr_0_block_92: // preds: addr_0_block_90 addr_0_block_91
      nextln:   jumpif v459, addr_0_block_93, addr_0_block_94
      check: addr_0_block_93: // preds: addr_0_block_92
      nextln:   jump addr_0_block_95
      check: addr_0_block_94: // preds: addr_0_block_92
      nextln:   jump addr_0_block_95
      check: addr_0_block_95: // preds: addr_0_block_93 addr_0_block_94
      nextln:   v523 = i52.unsigned_from_bits v409
      nextln:   v524 = int.modulo v523, 0x8
      nextln:   v525 = int.sub v523, v524
      nextln:   v526 = i52.to_bits v525
      nextln:   v527 = bool.icmp.i52.eq v409, v526
      nextln:   v528 = bool.icmp.i52.eq v409, 0x13000000
      nextln:   jumpif v528, addr_0_block_96, addr_0_block_100
      check: addr_0_block_96: // preds: addr_0_block_95
      nextln:   v529 = i64.unsigned_from_bits v467
      nextln:   v530 = bool.icmp.int.eq v529, 0x4
      nextln:   jumpif v530, addr_0_block_97, addr_0_block_98
      nextln:   jump addr_0_block_101
      check: addr_0_block_97: // no preds!
      nextln:   jump addr_0_block_99
      check: addr_0_block_98: // no preds!
      nextln:   v531 = i8.trunc.i64 v467
      nextln:   v532 = i8.unsigned_from_bits v531
      nextln:   jump addr_0_block_99
      check: addr_0_block_99: // preds: addr_0_block_97 addr_0_block_98
      check: addr_0_block_100: // preds: addr_0_block_95
      nextln:   store.i64 v467, v409
      nextln:   jump addr_0_block_101
      check: addr_0_block_101: // preds: addr_0_block_96 addr_0_block_100
      check: addr_0_block_102: // preds: addr_0_block_88
      nextln:   jump addr_0_block_103(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_103(v468: i8, v469: i1, v470: i16, v471: i8, v472: bool, v473: bool, v474: bool, v475: int, v476: i64, v477: i8, v478: i8, v479: i52, v480: i1, v481: bool, v482: bool, v483: int, v484: i1, v485: bool, v486: i4, v487: i2, v488: i4, v489: i8, v490: i8, v491: i2, v492: i2, v493: bool, v494: i2, v495: i2, v496: bool, v497: bool, v498: bool, v499: bool, v500: i52, v501: i1, v502: i64, v503: i2, v504: bool): // preds: addr_0_block_89 addr_0_block_102
      nextln:   v505 = bool.icmp.i8.ne v413, 0x0
      nextln:   v506 = bool.bitwise_not v505
      nextln:   v507 = bool.and v506, 0x1
      nextln:   v508 = bool.icmp.i8.ne v413, 0x0
      nextln:   v509 = bool.bitwise_not v508
      nextln:   v510 = bool.and 0x1, v509
      nextln:   jumpif v510, addr_0_block_104, addr_0_block_105
      check: addr_0_block_104: // preds: addr_0_block_103
      nextln:   jump addr_0_block_106
      check: addr_0_block_105: // preds: addr_0_block_103
      nextln:   jump addr_0_block_106
      check: addr_0_block_106: // preds: addr_0_block_104 addr_0_block_105
      nextln:   v511 = bool.icmp.i8.ne v413, 0x0
      nextln:   jumpif v511, addr_0_block_107, addr_0_block_108
      check: addr_0_block_107: // preds: addr_0_block_106
      nextln:   jump addr_0_block_109
      check: addr_0_block_108: // preds: addr_0_block_106
      nextln:   jump addr_0_block_109
      check: addr_0_block_109: // preds: addr_0_block_107 addr_0_block_108
      nextln:   v512 = i52.unsigned_from_bits v436
      nextln:   v513 = int.modulo v512, 0x2
      nextln:   v514 = int.sub v512, v513
      nextln:   v515 = i52.to_bits v514
      nextln:   v516 = bool.icmp.i52.eq v436, v515
      nextln:   v517 = i16.load v436
      check: addr_0_block_110(v19: i64, v20: i8, v21: i16): // preds: addr_0_block_3 addr_0_block_75
      nextln:   v22 = i32.zext.i16 0x0
      nextln:   v23 = i32.lshl v22, 0x10
      nextln:   v24 = i32.zext.i16 v21
      nextln:   v25 = i32.or v23, v24
      nextln:   v26 = i64.zext.i32 0x0
      nextln:   v27 = i64.lshl v26, 0x20
      nextln:   v28 = i64.zext.i32 v25
      nextln:   v29 = i64.or v27, v28
      nextln:   write_reg.i64 v29, "x1"
