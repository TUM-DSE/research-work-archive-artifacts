tests:
- name: ldarb_1
  bytes: [0xe1, 0xff, 0xdf, 0x08]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "sp"
      nextln:   v1 = i64.unsigned_from_bits v0
      nextln:   v2 = int.modulo v1, 0x10
      nextln:   v3 = int.sub v1, v2
      nextln:   v4 = i64.to_bits v3
      nextln:   v5 = bool.icmp.i64.ne v0, v4
      nextln:   v6 = i64.read_reg "sp"
      nextln:   v7 = i64.unsigned_from_bits v6
      nextln:   v8 = int.modulo v7, 0x1
      nextln:   v9 = int.sub v7, v8
      nextln:   v10 = i64.to_bits v9
      nextln:   v11 = bool.icmp.i64.eq v6, v10
      nextln:   v12 = bool.bitwise_not v11
      nextln:   v13 = bool.and 0x1, v12
      nextln:   jumpif v13, addr_0_block_0, addr_0_block_1
      check: addr_0_block_0: // preds: entry
      nextln:   jump addr_0_block_2(0x0)
      check: addr_0_block_1: // preds: entry
      nextln:   jump addr_0_block_2(0x0)
      check: addr_0_block_2(v14: bool): // preds: addr_0_block_0 addr_0_block_1
      nextln:   v15 = bool.bitwise_not v11
      nextln:   jumpif v15, addr_0_block_3, addr_0_block_41
      check: addr_0_block_3: // preds: addr_0_block_2
      nextln:   v16 = i64.unsigned_from_bits v6
      nextln:   v17 = int.modulo v16, 0x1
      nextln:   v18 = int.sub v16, v17
      nextln:   v19 = i64.to_bits v18
      nextln:   v20 = bool.icmp.i64.eq v6, v19
      nextln:   v21 = i64.lshr v6, 0x30
      nextln:   v22 = i16.trunc.i64 v21
      nextln:   v23 = bool.icmp.i16.eq v22, 0x0
      nextln:   v24 = bool.bitwise_not v23
      nextln:   jumpif v24, addr_0_block_4, addr_0_block_5
      nextln:   jump addr_0_block_76(v190, v191, 0x0)
      check: addr_0_block_4: // no preds!
      nextln:   jump addr_0_block_6(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_7(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_5: // no preds!
      nextln:   jump addr_0_block_6(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_6(v192: i52, v193: int, v194: bool, v195: bool): // preds: addr_0_block_5
      nextln:   v196 = i52.trunc.i64 v6
      nextln:   jump addr_0_block_7(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v196, 0x1, 0x0)
      check: addr_0_block_7(v45: i3, v46: i1, v47: i1, v48: i1, v49: i1, v50: i4, v51: i1, v52: bool, v53: int, v54: int, v55: bool, v56: bool, v57: i8, v58: i8, v59: i52, v60: i1, v61: bool, v62: bool, v63: int, v64: i1, v65: bool, v66: i4, v67: i2, v68: i4, v69: i8, v70: i8, v71: i2, v72: i2, v73: bool, v74: i2, v75: i2, v76: bool, v77: bool, v78: bool, v79: bool, v80: i52, v81: i1, v82: i64, v83: i1, v84: i8, v85: i8, v86: i52, v87: i1, v88: bool, v89: bool, v90: int, v91: i1, v92: bool, v93: i4, v94: i2, v95: i4, v96: i8, v97: i8, v98: i2, v99: i2, v100: bool, v101: i2, v102: i2, v103: bool, v104: bool, v105: bool, v106: bool, v107: i52, v108: i1, v109: i64): // preds: addr_0_block_4 addr_0_block_6
      nextln:   v110 = bool.icmp.i8.ne v84, 0x0
      nextln:   v111 = bool.bitwise_not v110
      nextln:   v112 = bool.bitwise_not v11
      nextln:   v113 = bool.and v112, 0x1
      nextln:   v114 = bool.or v113, 0x0
      nextln:   v115 = bool.icmp.i8.ne v84, 0x0
      nextln:   v116 = bool.bitwise_not v115
      nextln:   v117 = bool.and v114, v116
      nextln:   v118 = bool.icmp.i8.eq v96, 0x1
      nextln:   v119 = bool.and v117, v118
      nextln:   jumpif v119, addr_0_block_8, addr_0_block_9
      check: addr_0_block_8: // preds: addr_0_block_7
      nextln:   jump addr_0_block_10
      check: addr_0_block_9: // preds: addr_0_block_7
      nextln:   jump addr_0_block_10
      check: addr_0_block_10: // preds: addr_0_block_8 addr_0_block_9
      nextln:   v120 = bool.icmp.i8.ne v84, 0x0
      nextln:   v121 = bool.bitwise_not v120
      nextln:   v122 = bool.icmp.i8.ne v84, 0x0
      nextln:   v123 = bool.bitwise_not v122
      nextln:   v124 = bool.icmp.i8.eq v96, 0x1
      nextln:   v125 = bool.and v123, v124
      nextln:   jumpif v55, addr_0_block_11, addr_0_block_12
      check: addr_0_block_11: // preds: addr_0_block_10
      nextln:   v126 = bool.icmp.i8.eq v84, 0x0
      nextln:   jump addr_0_block_13(0x1)
      check: addr_0_block_12: // preds: addr_0_block_10
      nextln:   jump addr_0_block_13(0x0)
      check: addr_0_block_13(v127: bool): // preds: addr_0_block_11 addr_0_block_12
      nextln:   v128 = bool.icmp.i8.eq v84, 0x0
      nextln:   v129 = bool.and v56, v128
      nextln:   jumpif v129, addr_0_block_14, addr_0_block_15
      check: addr_0_block_14: // preds: addr_0_block_13
      nextln:   jump addr_0_block_16(0x0, 0x0)
      check: addr_0_block_15: // preds: addr_0_block_13
      nextln:   jump addr_0_block_16(0x0, 0x0)
      check: addr_0_block_16(v130: bool, v131: bool): // preds: addr_0_block_14 addr_0_block_15
      nextln:   v132 = bool.or v127, v130
      nextln:   jumpif v132, addr_0_block_17, addr_0_block_30
      check: addr_0_block_17: // preds: addr_0_block_16
      nextln:   v133 = i52.unsigned_from_bits v80
      nextln:   v134 = int.modulo v133, 0x8
      nextln:   v135 = int.sub v133, v134
      nextln:   v136 = i52.to_bits v135
      nextln:   v137 = bool.icmp.i52.eq v80, v136
      nextln:   v138 = i64.load v80
      nextln:   jumpif v127, addr_0_block_18, addr_0_block_19
      nextln:   jump addr_0_block_31(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v138, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, 0x0, 0x0)
      check: addr_0_block_18: // no preds!
      nextln:   jump addr_0_block_20
      check: addr_0_block_19: // no preds!
      nextln:   jump addr_0_block_20
      check: addr_0_block_20: // preds: addr_0_block_18 addr_0_block_19
      nextln:   jumpif v130, addr_0_block_21, addr_0_block_22
      check: addr_0_block_21: // preds: addr_0_block_20
      nextln:   jump addr_0_block_23
      check: addr_0_block_22: // preds: addr_0_block_20
      nextln:   jump addr_0_block_23
      check: addr_0_block_23: // preds: addr_0_block_21 addr_0_block_22
      nextln:   v197 = i52.unsigned_from_bits v80
      nextln:   v198 = int.modulo v197, 0x8
      nextln:   v199 = int.sub v197, v198
      nextln:   v200 = i52.to_bits v199
      nextln:   v201 = bool.icmp.i52.eq v80, v200
      nextln:   v202 = bool.icmp.i52.eq v80, 0x13000000
      nextln:   jumpif v202, addr_0_block_24, addr_0_block_28
      check: addr_0_block_24: // preds: addr_0_block_23
      nextln:   v203 = i64.unsigned_from_bits v138
      nextln:   v204 = bool.icmp.int.eq v203, 0x4
      nextln:   jumpif v204, addr_0_block_25, addr_0_block_26
      nextln:   jump addr_0_block_29
      check: addr_0_block_25: // no preds!
      nextln:   jump addr_0_block_27
      check: addr_0_block_26: // no preds!
      nextln:   v205 = i8.trunc.i64 v138
      nextln:   v206 = i8.unsigned_from_bits v205
      nextln:   jump addr_0_block_27
      check: addr_0_block_27: // preds: addr_0_block_25 addr_0_block_26
      check: addr_0_block_28: // preds: addr_0_block_23
      nextln:   store.i64 v138, v80
      nextln:   jump addr_0_block_29
      check: addr_0_block_29: // preds: addr_0_block_24 addr_0_block_28
      check: addr_0_block_30: // preds: addr_0_block_16
      nextln:   jump addr_0_block_31(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_31(v139: i8, v140: i1, v141: i16, v142: i8, v143: bool, v144: bool, v145: bool, v146: int, v147: i64, v148: i8, v149: i8, v150: i52, v151: i1, v152: bool, v153: bool, v154: int, v155: i1, v156: bool, v157: i4, v158: i2, v159: i4, v160: i8, v161: i8, v162: i2, v163: i2, v164: bool, v165: i2, v166: i2, v167: bool, v168: bool, v169: bool, v170: bool, v171: i52, v172: i1, v173: i64, v174: i2, v175: bool): // preds: addr_0_block_17 addr_0_block_30
      nextln:   v176 = bool.icmp.i8.ne v84, 0x0
      nextln:   v177 = bool.bitwise_not v176
      nextln:   v178 = bool.and v177, 0x1
      nextln:   v179 = bool.icmp.i8.ne v84, 0x0
      nextln:   v180 = bool.bitwise_not v179
      nextln:   v181 = bool.and 0x1, v180
      nextln:   jumpif v181, addr_0_block_32, addr_0_block_33
      check: addr_0_block_32: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_33: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_34: // preds: addr_0_block_32 addr_0_block_33
      nextln:   v182 = bool.icmp.i8.ne v84, 0x0
      nextln:   jumpif v182, addr_0_block_35, addr_0_block_36
      check: addr_0_block_35: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37
      check: addr_0_block_36: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37
      check: addr_0_block_37: // preds: addr_0_block_35 addr_0_block_36
      nextln:   v183 = i52.unsigned_from_bits v107
      nextln:   v184 = int.modulo v183, 0x1
      nextln:   v185 = int.sub v183, v184
      nextln:   v186 = i52.to_bits v185
      nextln:   v187 = bool.icmp.i52.eq v107, v186
      nextln:   v188 = i8.load v107
      nextln:   v189 = bool.bitwise_not v11
      nextln:   jumpif v189, addr_0_block_38, addr_0_block_39
      check: addr_0_block_38: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(v11, 0xc)
      check: addr_0_block_39: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(v11, 0x0)
      check: addr_0_block_40(v190: i64, v191: i8): // preds: addr_0_block_38 addr_0_block_39
      check: addr_0_block_41: // preds: addr_0_block_2
      nextln:   v36 = i64.unsigned_from_bits v6
      nextln:   v37 = int.modulo v36, 0x1
      nextln:   v38 = int.sub v36, v37
      nextln:   v39 = i64.to_bits v38
      nextln:   v40 = bool.icmp.i64.eq v6, v39
      nextln:   v41 = i64.lshr v6, 0x30
      nextln:   v42 = i16.trunc.i64 v41
      nextln:   v43 = bool.icmp.i16.eq v42, 0x0
      nextln:   v44 = bool.bitwise_not v43
      nextln:   jumpif v44, addr_0_block_42, addr_0_block_43
      nextln:   jump addr_0_block_76(v11, 0x0, v350)
      check: addr_0_block_42: // no preds!
      nextln:   jump addr_0_block_44(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_45(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_43: // no preds!
      nextln:   jump addr_0_block_44(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_44(v351: i52, v352: int, v353: bool, v354: bool): // preds: addr_0_block_43
      nextln:   v355 = i52.trunc.i64 v6
      nextln:   jump addr_0_block_45(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v355, 0x1, 0x0)
      check: addr_0_block_45(v207: i3, v208: i1, v209: i1, v210: i1, v211: i1, v212: i4, v213: i1, v214: bool, v215: int, v216: int, v217: bool, v218: bool, v219: i8, v220: i8, v221: i52, v222: i1, v223: bool, v224: bool, v225: int, v226: i1, v227: bool, v228: i4, v229: i2, v230: i4, v231: i8, v232: i8, v233: i2, v234: i2, v235: bool, v236: i2, v237: i2, v238: bool, v239: bool, v240: bool, v241: bool, v242: i52, v243: i1, v244: i64, v245: i1, v246: i8, v247: i8, v248: i52, v249: i1, v250: bool, v251: bool, v252: int, v253: i1, v254: bool, v255: i4, v256: i2, v257: i4, v258: i8, v259: i8, v260: i2, v261: i2, v262: bool, v263: i2, v264: i2, v265: bool, v266: bool, v267: bool, v268: bool, v269: i52, v270: i1, v271: i64): // preds: addr_0_block_42 addr_0_block_44
      nextln:   v272 = bool.icmp.i8.ne v246, 0x0
      nextln:   v273 = bool.bitwise_not v272
      nextln:   v274 = bool.bitwise_not v11
      nextln:   v275 = bool.and v274, 0x1
      nextln:   v276 = bool.or v275, 0x0
      nextln:   v277 = bool.icmp.i8.ne v246, 0x0
      nextln:   v278 = bool.bitwise_not v277
      nextln:   v279 = bool.and v276, v278
      nextln:   v280 = bool.icmp.i8.eq v258, 0x1
      nextln:   v281 = bool.and v279, v280
      nextln:   jumpif v281, addr_0_block_46, addr_0_block_47
      check: addr_0_block_46: // preds: addr_0_block_45
      nextln:   jump addr_0_block_48
      check: addr_0_block_47: // preds: addr_0_block_45
      nextln:   jump addr_0_block_48
      check: addr_0_block_48: // preds: addr_0_block_46 addr_0_block_47
      nextln:   v282 = bool.icmp.i8.ne v246, 0x0
      nextln:   v283 = bool.bitwise_not v282
      nextln:   v284 = bool.icmp.i8.ne v246, 0x0
      nextln:   v285 = bool.bitwise_not v284
      nextln:   v286 = bool.icmp.i8.eq v258, 0x1
      nextln:   v287 = bool.and v285, v286
      nextln:   jumpif v217, addr_0_block_49, addr_0_block_50
      check: addr_0_block_49: // preds: addr_0_block_48
      nextln:   v288 = bool.icmp.i8.eq v246, 0x0
      nextln:   jump addr_0_block_51(0x1)
      check: addr_0_block_50: // preds: addr_0_block_48
      nextln:   jump addr_0_block_51(0x0)
      check: addr_0_block_51(v289: bool): // preds: addr_0_block_49 addr_0_block_50
      nextln:   v290 = bool.icmp.i8.eq v246, 0x0
      nextln:   v291 = bool.and v218, v290
      nextln:   jumpif v291, addr_0_block_52, addr_0_block_53
      check: addr_0_block_52: // preds: addr_0_block_51
      nextln:   jump addr_0_block_54(0x0, 0x0)
      check: addr_0_block_53: // preds: addr_0_block_51
      nextln:   jump addr_0_block_54(0x0, 0x0)
      check: addr_0_block_54(v292: bool, v293: bool): // preds: addr_0_block_52 addr_0_block_53
      nextln:   v294 = bool.or v289, v292
      nextln:   jumpif v294, addr_0_block_55, addr_0_block_68
      check: addr_0_block_55: // preds: addr_0_block_54
      nextln:   v295 = i52.unsigned_from_bits v242
      nextln:   v296 = int.modulo v295, 0x8
      nextln:   v297 = int.sub v295, v296
      nextln:   v298 = i52.to_bits v297
      nextln:   v299 = bool.icmp.i52.eq v242, v298
      nextln:   v300 = i64.load v242
      nextln:   jumpif v289, addr_0_block_56, addr_0_block_57
      nextln:   jump addr_0_block_69(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v300, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242, v243, v244, 0x0, 0x0)
      check: addr_0_block_56: // no preds!
      nextln:   jump addr_0_block_58
      check: addr_0_block_57: // no preds!
      nextln:   jump addr_0_block_58
      check: addr_0_block_58: // preds: addr_0_block_56 addr_0_block_57
      nextln:   jumpif v292, addr_0_block_59, addr_0_block_60
      check: addr_0_block_59: // preds: addr_0_block_58
      nextln:   jump addr_0_block_61
      check: addr_0_block_60: // preds: addr_0_block_58
      nextln:   jump addr_0_block_61
      check: addr_0_block_61: // preds: addr_0_block_59 addr_0_block_60
      nextln:   v356 = i52.unsigned_from_bits v242
      nextln:   v357 = int.modulo v356, 0x8
      nextln:   v358 = int.sub v356, v357
      nextln:   v359 = i52.to_bits v358
      nextln:   v360 = bool.icmp.i52.eq v242, v359
      nextln:   v361 = bool.icmp.i52.eq v242, 0x13000000
      nextln:   jumpif v361, addr_0_block_62, addr_0_block_66
      check: addr_0_block_62: // preds: addr_0_block_61
      nextln:   v362 = i64.unsigned_from_bits v300
      nextln:   v363 = bool.icmp.int.eq v362, 0x4
      nextln:   jumpif v363, addr_0_block_63, addr_0_block_64
      nextln:   jump addr_0_block_67
      check: addr_0_block_63: // no preds!
      nextln:   jump addr_0_block_65
      check: addr_0_block_64: // no preds!
      nextln:   v364 = i8.trunc.i64 v300
      nextln:   v365 = i8.unsigned_from_bits v364
      nextln:   jump addr_0_block_65
      check: addr_0_block_65: // preds: addr_0_block_63 addr_0_block_64
      check: addr_0_block_66: // preds: addr_0_block_61
      nextln:   store.i64 v300, v242
      nextln:   jump addr_0_block_67
      check: addr_0_block_67: // preds: addr_0_block_62 addr_0_block_66
      check: addr_0_block_68: // preds: addr_0_block_54
      nextln:   jump addr_0_block_69(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_69(v301: i8, v302: i1, v303: i16, v304: i8, v305: bool, v306: bool, v307: bool, v308: int, v309: i64, v310: i8, v311: i8, v312: i52, v313: i1, v314: bool, v315: bool, v316: int, v317: i1, v318: bool, v319: i4, v320: i2, v321: i4, v322: i8, v323: i8, v324: i2, v325: i2, v326: bool, v327: i2, v328: i2, v329: bool, v330: bool, v331: bool, v332: bool, v333: i52, v334: i1, v335: i64, v336: i2, v337: bool): // preds: addr_0_block_55 addr_0_block_68
      nextln:   v338 = bool.icmp.i8.ne v246, 0x0
      nextln:   v339 = bool.bitwise_not v338
      nextln:   v340 = bool.and v339, 0x1
      nextln:   v341 = bool.icmp.i8.ne v246, 0x0
      nextln:   v342 = bool.bitwise_not v341
      nextln:   v343 = bool.and 0x1, v342
      nextln:   jumpif v343, addr_0_block_70, addr_0_block_71
      check: addr_0_block_70: // preds: addr_0_block_69
      nextln:   jump addr_0_block_72
      check: addr_0_block_71: // preds: addr_0_block_69
      nextln:   jump addr_0_block_72
      check: addr_0_block_72: // preds: addr_0_block_70 addr_0_block_71
      nextln:   v344 = bool.icmp.i8.ne v246, 0x0
      nextln:   jumpif v344, addr_0_block_73, addr_0_block_74
      check: addr_0_block_73: // preds: addr_0_block_72
      nextln:   jump addr_0_block_75
      check: addr_0_block_74: // preds: addr_0_block_72
      nextln:   jump addr_0_block_75
      check: addr_0_block_75: // preds: addr_0_block_73 addr_0_block_74
      nextln:   v345 = i52.unsigned_from_bits v269
      nextln:   v346 = int.modulo v345, 0x1
      nextln:   v347 = int.sub v345, v346
      nextln:   v348 = i52.to_bits v347
      nextln:   v349 = bool.icmp.i52.eq v269, v348
      nextln:   v350 = i8.load v269
      check: addr_0_block_76(v25: i64, v26: i8, v27: i8): // preds: addr_0_block_3 addr_0_block_41
      nextln:   v28 = i32.zext.i24 0x0
      nextln:   v29 = i32.lshl v28, 0x8
      nextln:   v30 = i32.zext.i8 v27
      nextln:   v31 = i32.or v29, v30
      nextln:   v32 = i64.zext.i32 0x0
      nextln:   v33 = i64.lshl v32, 0x20
      nextln:   v34 = i64.zext.i32 v31
      nextln:   v35 = i64.or v33, v34
      nextln:   write_reg.i64 v35, "x1"
- name: ldarb_2
  bytes: [0x21, 0xfc, 0xdf, 0x08]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x1"
      nextln:   v1 = i64.unsigned_from_bits v0
      nextln:   v2 = int.modulo v1, 0x1
      nextln:   v3 = int.sub v1, v2
      nextln:   v4 = i64.to_bits v3
      nextln:   v5 = bool.icmp.i64.eq v0, v4
      nextln:   v6 = bool.bitwise_not v5
      nextln:   v7 = bool.and 0x1, v6
      nextln:   jumpif v7, addr_0_block_0, addr_0_block_1
      check: addr_0_block_0: // preds: entry
      nextln:   jump addr_0_block_2(0x0)
      check: addr_0_block_1: // preds: entry
      nextln:   jump addr_0_block_2(0x0)
      check: addr_0_block_2(v8: bool): // preds: addr_0_block_0 addr_0_block_1
      nextln:   v9 = bool.bitwise_not v5
      nextln:   jumpif v9, addr_0_block_3, addr_0_block_41
      check: addr_0_block_3: // preds: addr_0_block_2
      nextln:   v10 = i64.unsigned_from_bits v0
      nextln:   v11 = int.modulo v10, 0x1
      nextln:   v12 = int.sub v10, v11
      nextln:   v13 = i64.to_bits v12
      nextln:   v14 = bool.icmp.i64.eq v0, v13
      nextln:   v15 = i64.lshr v0, 0x30
      nextln:   v16 = i16.trunc.i64 v15
      nextln:   v17 = bool.icmp.i16.eq v16, 0x0
      nextln:   v18 = bool.bitwise_not v17
      nextln:   jumpif v18, addr_0_block_4, addr_0_block_5
      nextln:   jump addr_0_block_76(v184, v185, 0x0)
      check: addr_0_block_4: // no preds!
      nextln:   jump addr_0_block_6(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_7(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_5: // no preds!
      nextln:   jump addr_0_block_6(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_6(v186: i52, v187: int, v188: bool, v189: bool): // preds: addr_0_block_5
      nextln:   v190 = i52.trunc.i64 v0
      nextln:   jump addr_0_block_7(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v190, 0x1, 0x0)
      check: addr_0_block_7(v39: i3, v40: i1, v41: i1, v42: i1, v43: i1, v44: i4, v45: i1, v46: bool, v47: int, v48: int, v49: bool, v50: bool, v51: i8, v52: i8, v53: i52, v54: i1, v55: bool, v56: bool, v57: int, v58: i1, v59: bool, v60: i4, v61: i2, v62: i4, v63: i8, v64: i8, v65: i2, v66: i2, v67: bool, v68: i2, v69: i2, v70: bool, v71: bool, v72: bool, v73: bool, v74: i52, v75: i1, v76: i64, v77: i1, v78: i8, v79: i8, v80: i52, v81: i1, v82: bool, v83: bool, v84: int, v85: i1, v86: bool, v87: i4, v88: i2, v89: i4, v90: i8, v91: i8, v92: i2, v93: i2, v94: bool, v95: i2, v96: i2, v97: bool, v98: bool, v99: bool, v100: bool, v101: i52, v102: i1, v103: i64): // preds: addr_0_block_4 addr_0_block_6
      nextln:   v104 = bool.icmp.i8.ne v78, 0x0
      nextln:   v105 = bool.bitwise_not v104
      nextln:   v106 = bool.bitwise_not v5
      nextln:   v107 = bool.and v106, 0x1
      nextln:   v108 = bool.or v107, 0x0
      nextln:   v109 = bool.icmp.i8.ne v78, 0x0
      nextln:   v110 = bool.bitwise_not v109
      nextln:   v111 = bool.and v108, v110
      nextln:   v112 = bool.icmp.i8.eq v90, 0x1
      nextln:   v113 = bool.and v111, v112
      nextln:   jumpif v113, addr_0_block_8, addr_0_block_9
      check: addr_0_block_8: // preds: addr_0_block_7
      nextln:   jump addr_0_block_10
      check: addr_0_block_9: // preds: addr_0_block_7
      nextln:   jump addr_0_block_10
      check: addr_0_block_10: // preds: addr_0_block_8 addr_0_block_9
      nextln:   v114 = bool.icmp.i8.ne v78, 0x0
      nextln:   v115 = bool.bitwise_not v114
      nextln:   v116 = bool.icmp.i8.ne v78, 0x0
      nextln:   v117 = bool.bitwise_not v116
      nextln:   v118 = bool.icmp.i8.eq v90, 0x1
      nextln:   v119 = bool.and v117, v118
      nextln:   jumpif v49, addr_0_block_11, addr_0_block_12
      check: addr_0_block_11: // preds: addr_0_block_10
      nextln:   v120 = bool.icmp.i8.eq v78, 0x0
      nextln:   jump addr_0_block_13(0x1)
      check: addr_0_block_12: // preds: addr_0_block_10
      nextln:   jump addr_0_block_13(0x0)
      check: addr_0_block_13(v121: bool): // preds: addr_0_block_11 addr_0_block_12
      nextln:   v122 = bool.icmp.i8.eq v78, 0x0
      nextln:   v123 = bool.and v50, v122
      nextln:   jumpif v123, addr_0_block_14, addr_0_block_15
      check: addr_0_block_14: // preds: addr_0_block_13
      nextln:   jump addr_0_block_16(0x0, 0x0)
      check: addr_0_block_15: // preds: addr_0_block_13
      nextln:   jump addr_0_block_16(0x0, 0x0)
      check: addr_0_block_16(v124: bool, v125: bool): // preds: addr_0_block_14 addr_0_block_15
      nextln:   v126 = bool.or v121, v124
      nextln:   jumpif v126, addr_0_block_17, addr_0_block_30
      check: addr_0_block_17: // preds: addr_0_block_16
      nextln:   v127 = i52.unsigned_from_bits v74
      nextln:   v128 = int.modulo v127, 0x8
      nextln:   v129 = int.sub v127, v128
      nextln:   v130 = i52.to_bits v129
      nextln:   v131 = bool.icmp.i52.eq v74, v130
      nextln:   v132 = i64.load v74
      nextln:   jumpif v121, addr_0_block_18, addr_0_block_19
      nextln:   jump addr_0_block_31(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v132, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, 0x0, 0x0)
      check: addr_0_block_18: // no preds!
      nextln:   jump addr_0_block_20
      check: addr_0_block_19: // no preds!
      nextln:   jump addr_0_block_20
      check: addr_0_block_20: // preds: addr_0_block_18 addr_0_block_19
      nextln:   jumpif v124, addr_0_block_21, addr_0_block_22
      check: addr_0_block_21: // preds: addr_0_block_20
      nextln:   jump addr_0_block_23
      check: addr_0_block_22: // preds: addr_0_block_20
      nextln:   jump addr_0_block_23
      check: addr_0_block_23: // preds: addr_0_block_21 addr_0_block_22
      nextln:   v191 = i52.unsigned_from_bits v74
      nextln:   v192 = int.modulo v191, 0x8
      nextln:   v193 = int.sub v191, v192
      nextln:   v194 = i52.to_bits v193
      nextln:   v195 = bool.icmp.i52.eq v74, v194
      nextln:   v196 = bool.icmp.i52.eq v74, 0x13000000
      nextln:   jumpif v196, addr_0_block_24, addr_0_block_28
      check: addr_0_block_24: // preds: addr_0_block_23
      nextln:   v197 = i64.unsigned_from_bits v132
      nextln:   v198 = bool.icmp.int.eq v197, 0x4
      nextln:   jumpif v198, addr_0_block_25, addr_0_block_26
      nextln:   jump addr_0_block_29
      check: addr_0_block_25: // no preds!
      nextln:   jump addr_0_block_27
      check: addr_0_block_26: // no preds!
      nextln:   v199 = i8.trunc.i64 v132
      nextln:   v200 = i8.unsigned_from_bits v199
      nextln:   jump addr_0_block_27
      check: addr_0_block_27: // preds: addr_0_block_25 addr_0_block_26
      check: addr_0_block_28: // preds: addr_0_block_23
      nextln:   store.i64 v132, v74
      nextln:   jump addr_0_block_29
      check: addr_0_block_29: // preds: addr_0_block_24 addr_0_block_28
      check: addr_0_block_30: // preds: addr_0_block_16
      nextln:   jump addr_0_block_31(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_31(v133: i8, v134: i1, v135: i16, v136: i8, v137: bool, v138: bool, v139: bool, v140: int, v141: i64, v142: i8, v143: i8, v144: i52, v145: i1, v146: bool, v147: bool, v148: int, v149: i1, v150: bool, v151: i4, v152: i2, v153: i4, v154: i8, v155: i8, v156: i2, v157: i2, v158: bool, v159: i2, v160: i2, v161: bool, v162: bool, v163: bool, v164: bool, v165: i52, v166: i1, v167: i64, v168: i2, v169: bool): // preds: addr_0_block_17 addr_0_block_30
      nextln:   v170 = bool.icmp.i8.ne v78, 0x0
      nextln:   v171 = bool.bitwise_not v170
      nextln:   v172 = bool.and v171, 0x1
      nextln:   v173 = bool.icmp.i8.ne v78, 0x0
      nextln:   v174 = bool.bitwise_not v173
      nextln:   v175 = bool.and 0x1, v174
      nextln:   jumpif v175, addr_0_block_32, addr_0_block_33
      check: addr_0_block_32: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_33: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_34: // preds: addr_0_block_32 addr_0_block_33
      nextln:   v176 = bool.icmp.i8.ne v78, 0x0
      nextln:   jumpif v176, addr_0_block_35, addr_0_block_36
      check: addr_0_block_35: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37
      check: addr_0_block_36: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37
      check: addr_0_block_37: // preds: addr_0_block_35 addr_0_block_36
      nextln:   v177 = i52.unsigned_from_bits v101
      nextln:   v178 = int.modulo v177, 0x1
      nextln:   v179 = int.sub v177, v178
      nextln:   v180 = i52.to_bits v179
      nextln:   v181 = bool.icmp.i52.eq v101, v180
      nextln:   v182 = i8.load v101
      nextln:   v183 = bool.bitwise_not v5
      nextln:   jumpif v183, addr_0_block_38, addr_0_block_39
      check: addr_0_block_38: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(v5, 0xc)
      check: addr_0_block_39: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(v5, 0x0)
      check: addr_0_block_40(v184: i64, v185: i8): // preds: addr_0_block_38 addr_0_block_39
      check: addr_0_block_41: // preds: addr_0_block_2
      nextln:   v30 = i64.unsigned_from_bits v0
      nextln:   v31 = int.modulo v30, 0x1
      nextln:   v32 = int.sub v30, v31
      nextln:   v33 = i64.to_bits v32
      nextln:   v34 = bool.icmp.i64.eq v0, v33
      nextln:   v35 = i64.lshr v0, 0x30
      nextln:   v36 = i16.trunc.i64 v35
      nextln:   v37 = bool.icmp.i16.eq v36, 0x0
      nextln:   v38 = bool.bitwise_not v37
      nextln:   jumpif v38, addr_0_block_42, addr_0_block_43
      nextln:   jump addr_0_block_76(v5, 0x0, v344)
      check: addr_0_block_42: // no preds!
      nextln:   jump addr_0_block_44(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_45(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_43: // no preds!
      nextln:   jump addr_0_block_44(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_44(v345: i52, v346: int, v347: bool, v348: bool): // preds: addr_0_block_43
      nextln:   v349 = i52.trunc.i64 v0
      nextln:   jump addr_0_block_45(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v349, 0x1, 0x0)
      check: addr_0_block_45(v201: i3, v202: i1, v203: i1, v204: i1, v205: i1, v206: i4, v207: i1, v208: bool, v209: int, v210: int, v211: bool, v212: bool, v213: i8, v214: i8, v215: i52, v216: i1, v217: bool, v218: bool, v219: int, v220: i1, v221: bool, v222: i4, v223: i2, v224: i4, v225: i8, v226: i8, v227: i2, v228: i2, v229: bool, v230: i2, v231: i2, v232: bool, v233: bool, v234: bool, v235: bool, v236: i52, v237: i1, v238: i64, v239: i1, v240: i8, v241: i8, v242: i52, v243: i1, v244: bool, v245: bool, v246: int, v247: i1, v248: bool, v249: i4, v250: i2, v251: i4, v252: i8, v253: i8, v254: i2, v255: i2, v256: bool, v257: i2, v258: i2, v259: bool, v260: bool, v261: bool, v262: bool, v263: i52, v264: i1, v265: i64): // preds: addr_0_block_42 addr_0_block_44
      nextln:   v266 = bool.icmp.i8.ne v240, 0x0
      nextln:   v267 = bool.bitwise_not v266
      nextln:   v268 = bool.bitwise_not v5
      nextln:   v269 = bool.and v268, 0x1
      nextln:   v270 = bool.or v269, 0x0
      nextln:   v271 = bool.icmp.i8.ne v240, 0x0
      nextln:   v272 = bool.bitwise_not v271
      nextln:   v273 = bool.and v270, v272
      nextln:   v274 = bool.icmp.i8.eq v252, 0x1
      nextln:   v275 = bool.and v273, v274
      nextln:   jumpif v275, addr_0_block_46, addr_0_block_47
      check: addr_0_block_46: // preds: addr_0_block_45
      nextln:   jump addr_0_block_48
      check: addr_0_block_47: // preds: addr_0_block_45
      nextln:   jump addr_0_block_48
      check: addr_0_block_48: // preds: addr_0_block_46 addr_0_block_47
      nextln:   v276 = bool.icmp.i8.ne v240, 0x0
      nextln:   v277 = bool.bitwise_not v276
      nextln:   v278 = bool.icmp.i8.ne v240, 0x0
      nextln:   v279 = bool.bitwise_not v278
      nextln:   v280 = bool.icmp.i8.eq v252, 0x1
      nextln:   v281 = bool.and v279, v280
      nextln:   jumpif v211, addr_0_block_49, addr_0_block_50
      check: addr_0_block_49: // preds: addr_0_block_48
      nextln:   v282 = bool.icmp.i8.eq v240, 0x0
      nextln:   jump addr_0_block_51(0x1)
      check: addr_0_block_50: // preds: addr_0_block_48
      nextln:   jump addr_0_block_51(0x0)
      check: addr_0_block_51(v283: bool): // preds: addr_0_block_49 addr_0_block_50
      nextln:   v284 = bool.icmp.i8.eq v240, 0x0
      nextln:   v285 = bool.and v212, v284
      nextln:   jumpif v285, addr_0_block_52, addr_0_block_53
      check: addr_0_block_52: // preds: addr_0_block_51
      nextln:   jump addr_0_block_54(0x0, 0x0)
      check: addr_0_block_53: // preds: addr_0_block_51
      nextln:   jump addr_0_block_54(0x0, 0x0)
      check: addr_0_block_54(v286: bool, v287: bool): // preds: addr_0_block_52 addr_0_block_53
      nextln:   v288 = bool.or v283, v286
      nextln:   jumpif v288, addr_0_block_55, addr_0_block_68
      check: addr_0_block_55: // preds: addr_0_block_54
      nextln:   v289 = i52.unsigned_from_bits v236
      nextln:   v290 = int.modulo v289, 0x8
      nextln:   v291 = int.sub v289, v290
      nextln:   v292 = i52.to_bits v291
      nextln:   v293 = bool.icmp.i52.eq v236, v292
      nextln:   v294 = i64.load v236
      nextln:   jumpif v283, addr_0_block_56, addr_0_block_57
      nextln:   jump addr_0_block_69(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v294, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236, v237, v238, 0x0, 0x0)
      check: addr_0_block_56: // no preds!
      nextln:   jump addr_0_block_58
      check: addr_0_block_57: // no preds!
      nextln:   jump addr_0_block_58
      check: addr_0_block_58: // preds: addr_0_block_56 addr_0_block_57
      nextln:   jumpif v286, addr_0_block_59, addr_0_block_60
      check: addr_0_block_59: // preds: addr_0_block_58
      nextln:   jump addr_0_block_61
      check: addr_0_block_60: // preds: addr_0_block_58
      nextln:   jump addr_0_block_61
      check: addr_0_block_61: // preds: addr_0_block_59 addr_0_block_60
      nextln:   v350 = i52.unsigned_from_bits v236
      nextln:   v351 = int.modulo v350, 0x8
      nextln:   v352 = int.sub v350, v351
      nextln:   v353 = i52.to_bits v352
      nextln:   v354 = bool.icmp.i52.eq v236, v353
      nextln:   v355 = bool.icmp.i52.eq v236, 0x13000000
      nextln:   jumpif v355, addr_0_block_62, addr_0_block_66
      check: addr_0_block_62: // preds: addr_0_block_61
      nextln:   v356 = i64.unsigned_from_bits v294
      nextln:   v357 = bool.icmp.int.eq v356, 0x4
      nextln:   jumpif v357, addr_0_block_63, addr_0_block_64
      nextln:   jump addr_0_block_67
      check: addr_0_block_63: // no preds!
      nextln:   jump addr_0_block_65
      check: addr_0_block_64: // no preds!
      nextln:   v358 = i8.trunc.i64 v294
      nextln:   v359 = i8.unsigned_from_bits v358
      nextln:   jump addr_0_block_65
      check: addr_0_block_65: // preds: addr_0_block_63 addr_0_block_64
      check: addr_0_block_66: // preds: addr_0_block_61
      nextln:   store.i64 v294, v236
      nextln:   jump addr_0_block_67
      check: addr_0_block_67: // preds: addr_0_block_62 addr_0_block_66
      check: addr_0_block_68: // preds: addr_0_block_54
      nextln:   jump addr_0_block_69(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_69(v295: i8, v296: i1, v297: i16, v298: i8, v299: bool, v300: bool, v301: bool, v302: int, v303: i64, v304: i8, v305: i8, v306: i52, v307: i1, v308: bool, v309: bool, v310: int, v311: i1, v312: bool, v313: i4, v314: i2, v315: i4, v316: i8, v317: i8, v318: i2, v319: i2, v320: bool, v321: i2, v322: i2, v323: bool, v324: bool, v325: bool, v326: bool, v327: i52, v328: i1, v329: i64, v330: i2, v331: bool): // preds: addr_0_block_55 addr_0_block_68
      nextln:   v332 = bool.icmp.i8.ne v240, 0x0
      nextln:   v333 = bool.bitwise_not v332
      nextln:   v334 = bool.and v333, 0x1
      nextln:   v335 = bool.icmp.i8.ne v240, 0x0
      nextln:   v336 = bool.bitwise_not v335
      nextln:   v337 = bool.and 0x1, v336
      nextln:   jumpif v337, addr_0_block_70, addr_0_block_71
      check: addr_0_block_70: // preds: addr_0_block_69
      nextln:   jump addr_0_block_72
      check: addr_0_block_71: // preds: addr_0_block_69
      nextln:   jump addr_0_block_72
      check: addr_0_block_72: // preds: addr_0_block_70 addr_0_block_71
      nextln:   v338 = bool.icmp.i8.ne v240, 0x0
      nextln:   jumpif v338, addr_0_block_73, addr_0_block_74
      check: addr_0_block_73: // preds: addr_0_block_72
      nextln:   jump addr_0_block_75
      check: addr_0_block_74: // preds: addr_0_block_72
      nextln:   jump addr_0_block_75
      check: addr_0_block_75: // preds: addr_0_block_73 addr_0_block_74
      nextln:   v339 = i52.unsigned_from_bits v263
      nextln:   v340 = int.modulo v339, 0x1
      nextln:   v341 = int.sub v339, v340
      nextln:   v342 = i52.to_bits v341
      nextln:   v343 = bool.icmp.i52.eq v263, v342
      nextln:   v344 = i8.load v263
      check: addr_0_block_76(v19: i64, v20: i8, v21: i8): // preds: addr_0_block_3 addr_0_block_41
      nextln:   v22 = i32.zext.i24 0x0
      nextln:   v23 = i32.lshl v22, 0x8
      nextln:   v24 = i32.zext.i8 v21
      nextln:   v25 = i32.or v23, v24
      nextln:   v26 = i64.zext.i32 0x0
      nextln:   v27 = i64.lshl v26, 0x20
      nextln:   v28 = i64.zext.i32 v25
      nextln:   v29 = i64.or v27, v28
      nextln:   write_reg.i64 v29, "x1"
