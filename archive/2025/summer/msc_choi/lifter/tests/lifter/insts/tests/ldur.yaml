tests:
- name: ldur_1
  bytes: [0xe1, 0x73, 0x41, 0xb8]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "sp"
      nextln:   v1 = i64.unsigned_from_bits v0
      nextln:   v2 = int.modulo v1, 0x10
      nextln:   v3 = int.sub v1, v2
      nextln:   v4 = i64.to_bits v3
      nextln:   v5 = bool.icmp.i64.ne v0, v4
      nextln:   v6 = i64.read_reg "sp"
      nextln:   v7 = i64.wrapping_add v6, 0x17
      nextln:   v8 = i64.unsigned_from_bits v7
      nextln:   v9 = int.modulo v8, 0x4
      nextln:   v10 = int.sub v8, v9
      nextln:   v11 = i64.to_bits v10
      nextln:   v12 = bool.icmp.i64.eq v7, v11
      nextln:   v13 = bool.bitwise_not v12
      nextln:   v14 = bool.bitwise_not v12
      nextln:   jumpif v14, addr_0_block_0, addr_0_block_140
      check: addr_0_block_0: // preds: entry
      nextln:   v15 = i64.unsigned_from_bits v7
      nextln:   v16 = int.modulo v15, 0x1
      nextln:   v17 = int.sub v15, v16
      nextln:   v18 = i64.to_bits v17
      nextln:   v19 = bool.icmp.i64.eq v7, v18
      nextln:   v20 = i64.lshr v7, 0x30
      nextln:   v21 = i16.trunc.i64 v20
      nextln:   v22 = bool.icmp.i16.eq v21, 0x0
      nextln:   v23 = bool.bitwise_not v22
      nextln:   jumpif v23, addr_0_block_1, addr_0_block_2
      nextln:   jump addr_0_block_175(v187, v188, v658)
      check: addr_0_block_1: // no preds!
      nextln:   jump addr_0_block_3(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_4(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_2: // no preds!
      nextln:   jump addr_0_block_3(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_3(v674: i52, v675: int, v676: bool, v677: bool): // preds: addr_0_block_2
      nextln:   v678 = i52.trunc.i64 v7
      nextln:   jump addr_0_block_4(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v678, 0x1, 0x0)
      check: addr_0_block_4(v40: i3, v41: i1, v42: i1, v43: i1, v44: i1, v45: i4, v46: i1, v47: bool, v48: int, v49: int, v50: bool, v51: bool, v52: i8, v53: i8, v54: i52, v55: i1, v56: bool, v57: bool, v58: int, v59: i1, v60: bool, v61: i4, v62: i2, v63: i4, v64: i8, v65: i8, v66: i2, v67: i2, v68: bool, v69: i2, v70: i2, v71: bool, v72: bool, v73: bool, v74: bool, v75: i52, v76: i1, v77: i64, v78: i1, v79: i8, v80: i8, v81: i52, v82: i1, v83: bool, v84: bool, v85: int, v86: i1, v87: bool, v88: i4, v89: i2, v90: i4, v91: i8, v92: i8, v93: i2, v94: i2, v95: bool, v96: i2, v97: i2, v98: bool, v99: bool, v100: bool, v101: bool, v102: i52, v103: i1, v104: i64): // preds: addr_0_block_1 addr_0_block_3
      nextln:   v105 = bool.icmp.i8.ne v79, 0x0
      nextln:   v106 = bool.bitwise_not v105
      nextln:   v107 = bool.bitwise_not v12
      nextln:   v108 = bool.and v107, 0x1
      nextln:   v109 = bool.or v108, 0x0
      nextln:   v110 = bool.icmp.i8.ne v79, 0x0
      nextln:   v111 = bool.bitwise_not v110
      nextln:   v112 = bool.and v109, v111
      nextln:   v113 = bool.icmp.i8.eq v91, 0x1
      nextln:   v114 = bool.and v112, v113
      nextln:   jumpif v114, addr_0_block_5, addr_0_block_6
      check: addr_0_block_5: // preds: addr_0_block_4
      nextln:   jump addr_0_block_7
      check: addr_0_block_6: // preds: addr_0_block_4
      nextln:   jump addr_0_block_7
      check: addr_0_block_7: // preds: addr_0_block_5 addr_0_block_6
      nextln:   v115 = bool.icmp.i8.ne v79, 0x0
      nextln:   v116 = bool.bitwise_not v115
      nextln:   v117 = bool.icmp.i8.ne v79, 0x0
      nextln:   v118 = bool.bitwise_not v117
      nextln:   v119 = bool.icmp.i8.eq v91, 0x1
      nextln:   v120 = bool.and v118, v119
      nextln:   jumpif v50, addr_0_block_8, addr_0_block_9
      check: addr_0_block_8: // preds: addr_0_block_7
      nextln:   v121 = bool.icmp.i8.eq v79, 0x0
      nextln:   jump addr_0_block_10(0x1)
      check: addr_0_block_9: // preds: addr_0_block_7
      nextln:   jump addr_0_block_10(0x0)
      check: addr_0_block_10(v122: bool): // preds: addr_0_block_8 addr_0_block_9
      nextln:   v123 = bool.icmp.i8.eq v79, 0x0
      nextln:   v124 = bool.and v51, v123
      nextln:   jumpif v124, addr_0_block_11, addr_0_block_12
      check: addr_0_block_11: // preds: addr_0_block_10
      nextln:   jump addr_0_block_13(0x0, 0x0)
      check: addr_0_block_12: // preds: addr_0_block_10
      nextln:   jump addr_0_block_13(0x0, 0x0)
      check: addr_0_block_13(v125: bool, v126: bool): // preds: addr_0_block_11 addr_0_block_12
      nextln:   v127 = bool.or v122, v125
      nextln:   jumpif v127, addr_0_block_14, addr_0_block_27
      check: addr_0_block_14: // preds: addr_0_block_13
      nextln:   v128 = i52.unsigned_from_bits v75
      nextln:   v129 = int.modulo v128, 0x8
      nextln:   v130 = int.sub v128, v129
      nextln:   v131 = i52.to_bits v130
      nextln:   v132 = bool.icmp.i52.eq v75, v131
      nextln:   v133 = i64.load v75
      nextln:   jumpif v122, addr_0_block_15, addr_0_block_16
      nextln:   jump addr_0_block_28(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v133, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, 0x0, 0x0)
      check: addr_0_block_15: // no preds!
      nextln:   jump addr_0_block_17
      check: addr_0_block_16: // no preds!
      nextln:   jump addr_0_block_17
      check: addr_0_block_17: // preds: addr_0_block_15 addr_0_block_16
      nextln:   jumpif v125, addr_0_block_18, addr_0_block_19
      check: addr_0_block_18: // preds: addr_0_block_17
      nextln:   jump addr_0_block_20
      check: addr_0_block_19: // preds: addr_0_block_17
      nextln:   jump addr_0_block_20
      check: addr_0_block_20: // preds: addr_0_block_18 addr_0_block_19
      nextln:   v679 = i52.unsigned_from_bits v75
      nextln:   v680 = int.modulo v679, 0x8
      nextln:   v681 = int.sub v679, v680
      nextln:   v682 = i52.to_bits v681
      nextln:   v683 = bool.icmp.i52.eq v75, v682
      nextln:   v684 = bool.icmp.i52.eq v75, 0x13000000
      nextln:   jumpif v684, addr_0_block_21, addr_0_block_25
      check: addr_0_block_21: // preds: addr_0_block_20
      nextln:   v685 = i64.unsigned_from_bits v133
      nextln:   v686 = bool.icmp.int.eq v685, 0x4
      nextln:   jumpif v686, addr_0_block_22, addr_0_block_23
      nextln:   jump addr_0_block_26
      check: addr_0_block_22: // no preds!
      nextln:   jump addr_0_block_24
      check: addr_0_block_23: // no preds!
      nextln:   v687 = i8.trunc.i64 v133
      nextln:   v688 = i8.unsigned_from_bits v687
      nextln:   jump addr_0_block_24
      check: addr_0_block_24: // preds: addr_0_block_22 addr_0_block_23
      check: addr_0_block_25: // preds: addr_0_block_20
      nextln:   store.i64 v133, v75
      nextln:   jump addr_0_block_26
      check: addr_0_block_26: // preds: addr_0_block_21 addr_0_block_25
      check: addr_0_block_27: // preds: addr_0_block_13
      nextln:   jump addr_0_block_28(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_28(v134: i8, v135: i1, v136: i16, v137: i8, v138: bool, v139: bool, v140: bool, v141: int, v142: i64, v143: i8, v144: i8, v145: i52, v146: i1, v147: bool, v148: bool, v149: int, v150: i1, v151: bool, v152: i4, v153: i2, v154: i4, v155: i8, v156: i8, v157: i2, v158: i2, v159: bool, v160: i2, v161: i2, v162: bool, v163: bool, v164: bool, v165: bool, v166: i52, v167: i1, v168: i64, v169: i2, v170: bool): // preds: addr_0_block_14 addr_0_block_27
      nextln:   v171 = bool.icmp.i8.ne v79, 0x0
      nextln:   v172 = bool.bitwise_not v171
      nextln:   v173 = bool.and v172, 0x1
      nextln:   v174 = bool.icmp.i8.ne v79, 0x0
      nextln:   v175 = bool.bitwise_not v174
      nextln:   v176 = bool.and 0x1, v175
      nextln:   jumpif v176, addr_0_block_29, addr_0_block_30
      check: addr_0_block_29: // preds: addr_0_block_28
      nextln:   jump addr_0_block_31
      check: addr_0_block_30: // preds: addr_0_block_28
      nextln:   jump addr_0_block_31
      check: addr_0_block_31: // preds: addr_0_block_29 addr_0_block_30
      nextln:   v177 = bool.icmp.i8.ne v79, 0x0
      nextln:   jumpif v177, addr_0_block_32, addr_0_block_33
      check: addr_0_block_32: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_33: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_34: // preds: addr_0_block_32 addr_0_block_33
      nextln:   v178 = i52.unsigned_from_bits v102
      nextln:   v179 = int.modulo v178, 0x1
      nextln:   v180 = int.sub v178, v179
      nextln:   v181 = i52.to_bits v180
      nextln:   v182 = bool.icmp.i52.eq v102, v181
      nextln:   v183 = i8.load v102
      nextln:   v184 = i8.lshl v183, 0x0
      nextln:   v185 = i32.or 0x0, v184
      nextln:   v186 = bool.bitwise_not v12
      nextln:   jumpif v186, addr_0_block_35, addr_0_block_36
      check: addr_0_block_35: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37(v12, 0xc)
      check: addr_0_block_36: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37(v12, 0x0)
      check: addr_0_block_37(v187: i64, v188: i8): // preds: addr_0_block_35 addr_0_block_36
      nextln:   v189 = i64.wrapping_add v7, 0x1
      nextln:   v190 = i64.unsigned_from_bits v189
      nextln:   v191 = int.modulo v190, 0x1
      nextln:   v192 = int.sub v190, v191
      nextln:   v193 = i64.to_bits v192
      nextln:   v194 = bool.icmp.i64.eq v189, v193
      nextln:   v195 = i64.lshr v189, 0x30
      nextln:   v196 = i16.trunc.i64 v195
      nextln:   v197 = bool.icmp.i16.eq v196, 0x0
      nextln:   v198 = bool.bitwise_not v197
      nextln:   jumpif v198, addr_0_block_38, addr_0_block_39
      check: addr_0_block_38: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_41(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_39: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_40(v669: i52, v670: int, v671: bool, v672: bool): // preds: addr_0_block_39
      nextln:   v673 = i52.trunc.i64 v189
      nextln:   jump addr_0_block_41(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v673, 0x1, 0x0)
      check: addr_0_block_41(v199: i3, v200: i1, v201: i1, v202: i1, v203: i1, v204: i4, v205: i1, v206: bool, v207: int, v208: int, v209: bool, v210: bool, v211: i8, v212: i8, v213: i52, v214: i1, v215: bool, v216: bool, v217: int, v218: i1, v219: bool, v220: i4, v221: i2, v222: i4, v223: i8, v224: i8, v225: i2, v226: i2, v227: bool, v228: i2, v229: i2, v230: bool, v231: bool, v232: bool, v233: bool, v234: i52, v235: i1, v236: i64, v237: i1, v238: i8, v239: i8, v240: i52, v241: i1, v242: bool, v243: bool, v244: int, v245: i1, v246: bool, v247: i4, v248: i2, v249: i4, v250: i8, v251: i8, v252: i2, v253: i2, v254: bool, v255: i2, v256: i2, v257: bool, v258: bool, v259: bool, v260: bool, v261: i52, v262: i1, v263: i64): // preds: addr_0_block_38 addr_0_block_40
      nextln:   v264 = bool.icmp.i8.ne v238, 0x0
      nextln:   v265 = bool.bitwise_not v264
      nextln:   v266 = bool.bitwise_not v12
      nextln:   v267 = bool.and v266, 0x1
      nextln:   v268 = bool.or v267, 0x0
      nextln:   v269 = bool.icmp.i8.ne v238, 0x0
      nextln:   v270 = bool.bitwise_not v269
      nextln:   v271 = bool.and v268, v270
      nextln:   v272 = bool.icmp.i8.eq v250, 0x1
      nextln:   v273 = bool.and v271, v272
      nextln:   jumpif v273, addr_0_block_42, addr_0_block_43
      check: addr_0_block_42: // preds: addr_0_block_41
      nextln:   jump addr_0_block_44
      check: addr_0_block_43: // preds: addr_0_block_41
      nextln:   jump addr_0_block_44
      check: addr_0_block_44: // preds: addr_0_block_42 addr_0_block_43
      nextln:   v274 = bool.icmp.i8.ne v238, 0x0
      nextln:   v275 = bool.bitwise_not v274
      nextln:   v276 = bool.icmp.i8.ne v238, 0x0
      nextln:   v277 = bool.bitwise_not v276
      nextln:   v278 = bool.icmp.i8.eq v250, 0x1
      nextln:   v279 = bool.and v277, v278
      nextln:   jumpif v209, addr_0_block_45, addr_0_block_46
      check: addr_0_block_45: // preds: addr_0_block_44
      nextln:   v280 = bool.icmp.i8.eq v238, 0x0
      nextln:   jump addr_0_block_47(0x1)
      check: addr_0_block_46: // preds: addr_0_block_44
      nextln:   jump addr_0_block_47(0x0)
      check: addr_0_block_47(v281: bool): // preds: addr_0_block_45 addr_0_block_46
      nextln:   v282 = bool.icmp.i8.eq v238, 0x0
      nextln:   v283 = bool.and v210, v282
      nextln:   jumpif v283, addr_0_block_48, addr_0_block_49
      check: addr_0_block_48: // preds: addr_0_block_47
      nextln:   jump addr_0_block_50(0x0, 0x0)
      check: addr_0_block_49: // preds: addr_0_block_47
      nextln:   jump addr_0_block_50(0x0, 0x0)
      check: addr_0_block_50(v284: bool, v285: bool): // preds: addr_0_block_48 addr_0_block_49
      nextln:   v286 = bool.or v281, v284
      nextln:   jumpif v286, addr_0_block_51, addr_0_block_64
      check: addr_0_block_51: // preds: addr_0_block_50
      nextln:   v287 = i52.unsigned_from_bits v234
      nextln:   v288 = int.modulo v287, 0x8
      nextln:   v289 = int.sub v287, v288
      nextln:   v290 = i52.to_bits v289
      nextln:   v291 = bool.icmp.i52.eq v234, v290
      nextln:   v292 = i64.load v234
      nextln:   jumpif v281, addr_0_block_52, addr_0_block_53
      nextln:   jump addr_0_block_65(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v292, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236, 0x0, 0x0)
      check: addr_0_block_52: // no preds!
      nextln:   jump addr_0_block_54
      check: addr_0_block_53: // no preds!
      nextln:   jump addr_0_block_54
      check: addr_0_block_54: // preds: addr_0_block_52 addr_0_block_53
      nextln:   jumpif v284, addr_0_block_55, addr_0_block_56
      check: addr_0_block_55: // preds: addr_0_block_54
      nextln:   jump addr_0_block_57
      check: addr_0_block_56: // preds: addr_0_block_54
      nextln:   jump addr_0_block_57
      check: addr_0_block_57: // preds: addr_0_block_55 addr_0_block_56
      nextln:   v689 = i52.unsigned_from_bits v234
      nextln:   v690 = int.modulo v689, 0x8
      nextln:   v691 = int.sub v689, v690
      nextln:   v692 = i52.to_bits v691
      nextln:   v693 = bool.icmp.i52.eq v234, v692
      nextln:   v694 = bool.icmp.i52.eq v234, 0x13000000
      nextln:   jumpif v694, addr_0_block_58, addr_0_block_62
      check: addr_0_block_58: // preds: addr_0_block_57
      nextln:   v695 = i64.unsigned_from_bits v292
      nextln:   v696 = bool.icmp.int.eq v695, 0x4
      nextln:   jumpif v696, addr_0_block_59, addr_0_block_60
      nextln:   jump addr_0_block_63
      check: addr_0_block_59: // no preds!
      nextln:   jump addr_0_block_61
      check: addr_0_block_60: // no preds!
      nextln:   v697 = i8.trunc.i64 v292
      nextln:   v698 = i8.unsigned_from_bits v697
      nextln:   jump addr_0_block_61
      check: addr_0_block_61: // preds: addr_0_block_59 addr_0_block_60
      check: addr_0_block_62: // preds: addr_0_block_57
      nextln:   store.i64 v292, v234
      nextln:   jump addr_0_block_63
      check: addr_0_block_63: // preds: addr_0_block_58 addr_0_block_62
      check: addr_0_block_64: // preds: addr_0_block_50
      nextln:   jump addr_0_block_65(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_65(v293: i8, v294: i1, v295: i16, v296: i8, v297: bool, v298: bool, v299: bool, v300: int, v301: i64, v302: i8, v303: i8, v304: i52, v305: i1, v306: bool, v307: bool, v308: int, v309: i1, v310: bool, v311: i4, v312: i2, v313: i4, v314: i8, v315: i8, v316: i2, v317: i2, v318: bool, v319: i2, v320: i2, v321: bool, v322: bool, v323: bool, v324: bool, v325: i52, v326: i1, v327: i64, v328: i2, v329: bool): // preds: addr_0_block_51 addr_0_block_64
      nextln:   v330 = bool.icmp.i8.ne v238, 0x0
      nextln:   v331 = bool.bitwise_not v330
      nextln:   v332 = bool.and v331, 0x1
      nextln:   v333 = bool.icmp.i8.ne v238, 0x0
      nextln:   v334 = bool.bitwise_not v333
      nextln:   v335 = bool.and 0x1, v334
      nextln:   jumpif v335, addr_0_block_66, addr_0_block_67
      check: addr_0_block_66: // preds: addr_0_block_65
      nextln:   jump addr_0_block_68
      check: addr_0_block_67: // preds: addr_0_block_65
      nextln:   jump addr_0_block_68
      check: addr_0_block_68: // preds: addr_0_block_66 addr_0_block_67
      nextln:   v336 = bool.icmp.i8.ne v238, 0x0
      nextln:   jumpif v336, addr_0_block_69, addr_0_block_70
      check: addr_0_block_69: // preds: addr_0_block_68
      nextln:   jump addr_0_block_71
      check: addr_0_block_70: // preds: addr_0_block_68
      nextln:   jump addr_0_block_71
      check: addr_0_block_71: // preds: addr_0_block_69 addr_0_block_70
      nextln:   v337 = i52.unsigned_from_bits v261
      nextln:   v338 = int.modulo v337, 0x1
      nextln:   v339 = int.sub v337, v338
      nextln:   v340 = i52.to_bits v339
      nextln:   v341 = bool.icmp.i52.eq v261, v340
      nextln:   v342 = i8.load v261
      nextln:   v343 = i8.lshl v342, 0x8
      nextln:   v344 = i32.or 0x0, v343
      nextln:   v345 = i64.wrapping_add v7, 0x2
      nextln:   v346 = i64.unsigned_from_bits v345
      nextln:   v347 = int.modulo v346, 0x1
      nextln:   v348 = int.sub v346, v347
      nextln:   v349 = i64.to_bits v348
      nextln:   v350 = bool.icmp.i64.eq v345, v349
      nextln:   v351 = i64.lshr v345, 0x30
      nextln:   v352 = i16.trunc.i64 v351
      nextln:   v353 = bool.icmp.i16.eq v352, 0x0
      nextln:   v354 = bool.bitwise_not v353
      nextln:   jumpif v354, addr_0_block_72, addr_0_block_73
      check: addr_0_block_72: // preds: addr_0_block_71
      nextln:   jump addr_0_block_74(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_75(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_73: // preds: addr_0_block_71
      nextln:   jump addr_0_block_74(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_74(v664: i52, v665: int, v666: bool, v667: bool): // preds: addr_0_block_73
      nextln:   v668 = i52.trunc.i64 v345
      nextln:   jump addr_0_block_75(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v668, 0x1, 0x0)
      check: addr_0_block_75(v355: i3, v356: i1, v357: i1, v358: i1, v359: i1, v360: i4, v361: i1, v362: bool, v363: int, v364: int, v365: bool, v366: bool, v367: i8, v368: i8, v369: i52, v370: i1, v371: bool, v372: bool, v373: int, v374: i1, v375: bool, v376: i4, v377: i2, v378: i4, v379: i8, v380: i8, v381: i2, v382: i2, v383: bool, v384: i2, v385: i2, v386: bool, v387: bool, v388: bool, v389: bool, v390: i52, v391: i1, v392: i64, v393: i1, v394: i8, v395: i8, v396: i52, v397: i1, v398: bool, v399: bool, v400: int, v401: i1, v402: bool, v403: i4, v404: i2, v405: i4, v406: i8, v407: i8, v408: i2, v409: i2, v410: bool, v411: i2, v412: i2, v413: bool, v414: bool, v415: bool, v416: bool, v417: i52, v418: i1, v419: i64): // preds: addr_0_block_72 addr_0_block_74
      nextln:   v420 = bool.icmp.i8.ne v394, 0x0
      nextln:   v421 = bool.bitwise_not v420
      nextln:   v422 = bool.bitwise_not v12
      nextln:   v423 = bool.and v422, 0x1
      nextln:   v424 = bool.or v423, 0x0
      nextln:   v425 = bool.icmp.i8.ne v394, 0x0
      nextln:   v426 = bool.bitwise_not v425
      nextln:   v427 = bool.and v424, v426
      nextln:   v428 = bool.icmp.i8.eq v406, 0x1
      nextln:   v429 = bool.and v427, v428
      nextln:   jumpif v429, addr_0_block_76, addr_0_block_77
      check: addr_0_block_76: // preds: addr_0_block_75
      nextln:   jump addr_0_block_78
      check: addr_0_block_77: // preds: addr_0_block_75
      nextln:   jump addr_0_block_78
      check: addr_0_block_78: // preds: addr_0_block_76 addr_0_block_77
      nextln:   v430 = bool.icmp.i8.ne v394, 0x0
      nextln:   v431 = bool.bitwise_not v430
      nextln:   v432 = bool.icmp.i8.ne v394, 0x0
      nextln:   v433 = bool.bitwise_not v432
      nextln:   v434 = bool.icmp.i8.eq v406, 0x1
      nextln:   v435 = bool.and v433, v434
      nextln:   jumpif v365, addr_0_block_79, addr_0_block_80
      check: addr_0_block_79: // preds: addr_0_block_78
      nextln:   v436 = bool.icmp.i8.eq v394, 0x0
      nextln:   jump addr_0_block_81(0x1)
      check: addr_0_block_80: // preds: addr_0_block_78
      nextln:   jump addr_0_block_81(0x0)
      check: addr_0_block_81(v437: bool): // preds: addr_0_block_79 addr_0_block_80
      nextln:   v438 = bool.icmp.i8.eq v394, 0x0
      nextln:   v439 = bool.and v366, v438
      nextln:   jumpif v439, addr_0_block_82, addr_0_block_83
      check: addr_0_block_82: // preds: addr_0_block_81
      nextln:   jump addr_0_block_84(0x0, 0x0)
      check: addr_0_block_83: // preds: addr_0_block_81
      nextln:   jump addr_0_block_84(0x0, 0x0)
      check: addr_0_block_84(v440: bool, v441: bool): // preds: addr_0_block_82 addr_0_block_83
      nextln:   v442 = bool.or v437, v440
      nextln:   jumpif v442, addr_0_block_85, addr_0_block_98
      check: addr_0_block_85: // preds: addr_0_block_84
      nextln:   v443 = i52.unsigned_from_bits v390
      nextln:   v444 = int.modulo v443, 0x8
      nextln:   v445 = int.sub v443, v444
      nextln:   v446 = i52.to_bits v445
      nextln:   v447 = bool.icmp.i52.eq v390, v446
      nextln:   v448 = i64.load v390
      nextln:   jumpif v437, addr_0_block_86, addr_0_block_87
      nextln:   jump addr_0_block_99(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v448, v367, v368, v369, v370, v371, v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, v382, v383, v384, v385, v386, v387, v388, v389, v390, v391, v392, 0x0, 0x0)
      check: addr_0_block_86: // no preds!
      nextln:   jump addr_0_block_88
      check: addr_0_block_87: // no preds!
      nextln:   jump addr_0_block_88
      check: addr_0_block_88: // preds: addr_0_block_86 addr_0_block_87
      nextln:   jumpif v440, addr_0_block_89, addr_0_block_90
      check: addr_0_block_89: // preds: addr_0_block_88
      nextln:   jump addr_0_block_91
      check: addr_0_block_90: // preds: addr_0_block_88
      nextln:   jump addr_0_block_91
      check: addr_0_block_91: // preds: addr_0_block_89 addr_0_block_90
      nextln:   v699 = i52.unsigned_from_bits v390
      nextln:   v700 = int.modulo v699, 0x8
      nextln:   v701 = int.sub v699, v700
      nextln:   v702 = i52.to_bits v701
      nextln:   v703 = bool.icmp.i52.eq v390, v702
      nextln:   v704 = bool.icmp.i52.eq v390, 0x13000000
      nextln:   jumpif v704, addr_0_block_92, addr_0_block_96
      check: addr_0_block_92: // preds: addr_0_block_91
      nextln:   v705 = i64.unsigned_from_bits v448
      nextln:   v706 = bool.icmp.int.eq v705, 0x4
      nextln:   jumpif v706, addr_0_block_93, addr_0_block_94
      nextln:   jump addr_0_block_97
      check: addr_0_block_93: // no preds!
      nextln:   jump addr_0_block_95
      check: addr_0_block_94: // no preds!
      nextln:   v707 = i8.trunc.i64 v448
      nextln:   v708 = i8.unsigned_from_bits v707
      nextln:   jump addr_0_block_95
      check: addr_0_block_95: // preds: addr_0_block_93 addr_0_block_94
      check: addr_0_block_96: // preds: addr_0_block_91
      nextln:   store.i64 v448, v390
      nextln:   jump addr_0_block_97
      check: addr_0_block_97: // preds: addr_0_block_92 addr_0_block_96
      check: addr_0_block_98: // preds: addr_0_block_84
      nextln:   jump addr_0_block_99(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_99(v449: i8, v450: i1, v451: i16, v452: i8, v453: bool, v454: bool, v455: bool, v456: int, v457: i64, v458: i8, v459: i8, v460: i52, v461: i1, v462: bool, v463: bool, v464: int, v465: i1, v466: bool, v467: i4, v468: i2, v469: i4, v470: i8, v471: i8, v472: i2, v473: i2, v474: bool, v475: i2, v476: i2, v477: bool, v478: bool, v479: bool, v480: bool, v481: i52, v482: i1, v483: i64, v484: i2, v485: bool): // preds: addr_0_block_85 addr_0_block_98
      nextln:   v486 = bool.icmp.i8.ne v394, 0x0
      nextln:   v487 = bool.bitwise_not v486
      nextln:   v488 = bool.and v487, 0x1
      nextln:   v489 = bool.icmp.i8.ne v394, 0x0
      nextln:   v490 = bool.bitwise_not v489
      nextln:   v491 = bool.and 0x1, v490
      nextln:   jumpif v491, addr_0_block_100, addr_0_block_101
      check: addr_0_block_100: // preds: addr_0_block_99
      nextln:   jump addr_0_block_102
      check: addr_0_block_101: // preds: addr_0_block_99
      nextln:   jump addr_0_block_102
      check: addr_0_block_102: // preds: addr_0_block_100 addr_0_block_101
      nextln:   v492 = bool.icmp.i8.ne v394, 0x0
      nextln:   jumpif v492, addr_0_block_103, addr_0_block_104
      check: addr_0_block_103: // preds: addr_0_block_102
      nextln:   jump addr_0_block_105
      check: addr_0_block_104: // preds: addr_0_block_102
      nextln:   jump addr_0_block_105
      check: addr_0_block_105: // preds: addr_0_block_103 addr_0_block_104
      nextln:   v493 = i52.unsigned_from_bits v417
      nextln:   v494 = int.modulo v493, 0x1
      nextln:   v495 = int.sub v493, v494
      nextln:   v496 = i52.to_bits v495
      nextln:   v497 = bool.icmp.i52.eq v417, v496
      nextln:   v498 = i8.load v417
      nextln:   v499 = i32.and v344, 0xff00ffff
      nextln:   v500 = i8.lshl v498, 0x10
      nextln:   v501 = i32.or v499, v500
      nextln:   v502 = i64.wrapping_add v7, 0x3
      nextln:   v503 = i64.unsigned_from_bits v502
      nextln:   v504 = int.modulo v503, 0x1
      nextln:   v505 = int.sub v503, v504
      nextln:   v506 = i64.to_bits v505
      nextln:   v507 = bool.icmp.i64.eq v502, v506
      nextln:   v508 = i64.lshr v502, 0x30
      nextln:   v509 = i16.trunc.i64 v508
      nextln:   v510 = bool.icmp.i16.eq v509, 0x0
      nextln:   v511 = bool.bitwise_not v510
      nextln:   jumpif v511, addr_0_block_106, addr_0_block_107
      check: addr_0_block_106: // preds: addr_0_block_105
      nextln:   jump addr_0_block_108(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_109(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_107: // preds: addr_0_block_105
      nextln:   jump addr_0_block_108(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_108(v659: i52, v660: int, v661: bool, v662: bool): // preds: addr_0_block_107
      nextln:   v663 = i52.trunc.i64 v502
      nextln:   jump addr_0_block_109(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v663, 0x1, 0x0)
      check: addr_0_block_109(v512: i3, v513: i1, v514: i1, v515: i1, v516: i1, v517: i4, v518: i1, v519: bool, v520: int, v521: int, v522: bool, v523: bool, v524: i8, v525: i8, v526: i52, v527: i1, v528: bool, v529: bool, v530: int, v531: i1, v532: bool, v533: i4, v534: i2, v535: i4, v536: i8, v537: i8, v538: i2, v539: i2, v540: bool, v541: i2, v542: i2, v543: bool, v544: bool, v545: bool, v546: bool, v547: i52, v548: i1, v549: i64, v550: i1, v551: i8, v552: i8, v553: i52, v554: i1, v555: bool, v556: bool, v557: int, v558: i1, v559: bool, v560: i4, v561: i2, v562: i4, v563: i8, v564: i8, v565: i2, v566: i2, v567: bool, v568: i2, v569: i2, v570: bool, v571: bool, v572: bool, v573: bool, v574: i52, v575: i1, v576: i64): // preds: addr_0_block_106 addr_0_block_108
      nextln:   v577 = bool.icmp.i8.ne v551, 0x0
      nextln:   v578 = bool.bitwise_not v577
      nextln:   v579 = bool.bitwise_not v12
      nextln:   v580 = bool.and v579, 0x1
      nextln:   v581 = bool.or v580, 0x0
      nextln:   v582 = bool.icmp.i8.ne v551, 0x0
      nextln:   v583 = bool.bitwise_not v582
      nextln:   v584 = bool.and v581, v583
      nextln:   v585 = bool.icmp.i8.eq v563, 0x1
      nextln:   v586 = bool.and v584, v585
      nextln:   jumpif v586, addr_0_block_110, addr_0_block_111
      check: addr_0_block_110: // preds: addr_0_block_109
      nextln:   jump addr_0_block_112
      check: addr_0_block_111: // preds: addr_0_block_109
      nextln:   jump addr_0_block_112
      check: addr_0_block_112: // preds: addr_0_block_110 addr_0_block_111
      nextln:   v587 = bool.icmp.i8.ne v551, 0x0
      nextln:   v588 = bool.bitwise_not v587
      nextln:   v589 = bool.icmp.i8.ne v551, 0x0
      nextln:   v590 = bool.bitwise_not v589
      nextln:   v591 = bool.icmp.i8.eq v563, 0x1
      nextln:   v592 = bool.and v590, v591
      nextln:   jumpif v522, addr_0_block_113, addr_0_block_114
      check: addr_0_block_113: // preds: addr_0_block_112
      nextln:   v593 = bool.icmp.i8.eq v551, 0x0
      nextln:   jump addr_0_block_115(0x1)
      check: addr_0_block_114: // preds: addr_0_block_112
      nextln:   jump addr_0_block_115(0x0)
      check: addr_0_block_115(v594: bool): // preds: addr_0_block_113 addr_0_block_114
      nextln:   v595 = bool.icmp.i8.eq v551, 0x0
      nextln:   v596 = bool.and v523, v595
      nextln:   jumpif v596, addr_0_block_116, addr_0_block_117
      check: addr_0_block_116: // preds: addr_0_block_115
      nextln:   jump addr_0_block_118(0x0, 0x0)
      check: addr_0_block_117: // preds: addr_0_block_115
      nextln:   jump addr_0_block_118(0x0, 0x0)
      check: addr_0_block_118(v597: bool, v598: bool): // preds: addr_0_block_116 addr_0_block_117
      nextln:   v599 = bool.or v594, v597
      nextln:   jumpif v599, addr_0_block_119, addr_0_block_132
      check: addr_0_block_119: // preds: addr_0_block_118
      nextln:   v600 = i52.unsigned_from_bits v547
      nextln:   v601 = int.modulo v600, 0x8
      nextln:   v602 = int.sub v600, v601
      nextln:   v603 = i52.to_bits v602
      nextln:   v604 = bool.icmp.i52.eq v547, v603
      nextln:   v605 = i64.load v547
      nextln:   jumpif v594, addr_0_block_120, addr_0_block_121
      nextln:   jump addr_0_block_133(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v605, v524, v525, v526, v527, v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v538, v539, v540, v541, v542, v543, v544, v545, v546, v547, v548, v549, 0x0, 0x0)
      check: addr_0_block_120: // no preds!
      nextln:   jump addr_0_block_122
      check: addr_0_block_121: // no preds!
      nextln:   jump addr_0_block_122
      check: addr_0_block_122: // preds: addr_0_block_120 addr_0_block_121
      nextln:   jumpif v597, addr_0_block_123, addr_0_block_124
      check: addr_0_block_123: // preds: addr_0_block_122
      nextln:   jump addr_0_block_125
      check: addr_0_block_124: // preds: addr_0_block_122
      nextln:   jump addr_0_block_125
      check: addr_0_block_125: // preds: addr_0_block_123 addr_0_block_124
      nextln:   v709 = i52.unsigned_from_bits v547
      nextln:   v710 = int.modulo v709, 0x8
      nextln:   v711 = int.sub v709, v710
      nextln:   v712 = i52.to_bits v711
      nextln:   v713 = bool.icmp.i52.eq v547, v712
      nextln:   v714 = bool.icmp.i52.eq v547, 0x13000000
      nextln:   jumpif v714, addr_0_block_126, addr_0_block_130
      check: addr_0_block_126: // preds: addr_0_block_125
      nextln:   v715 = i64.unsigned_from_bits v605
      nextln:   v716 = bool.icmp.int.eq v715, 0x4
      nextln:   jumpif v716, addr_0_block_127, addr_0_block_128
      nextln:   jump addr_0_block_131
      check: addr_0_block_127: // no preds!
      nextln:   jump addr_0_block_129
      check: addr_0_block_128: // no preds!
      nextln:   v717 = i8.trunc.i64 v605
      nextln:   v718 = i8.unsigned_from_bits v717
      nextln:   jump addr_0_block_129
      check: addr_0_block_129: // preds: addr_0_block_127 addr_0_block_128
      check: addr_0_block_130: // preds: addr_0_block_125
      nextln:   store.i64 v605, v547
      nextln:   jump addr_0_block_131
      check: addr_0_block_131: // preds: addr_0_block_126 addr_0_block_130
      check: addr_0_block_132: // preds: addr_0_block_118
      nextln:   jump addr_0_block_133(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_133(v606: i8, v607: i1, v608: i16, v609: i8, v610: bool, v611: bool, v612: bool, v613: int, v614: i64, v615: i8, v616: i8, v617: i52, v618: i1, v619: bool, v620: bool, v621: int, v622: i1, v623: bool, v624: i4, v625: i2, v626: i4, v627: i8, v628: i8, v629: i2, v630: i2, v631: bool, v632: i2, v633: i2, v634: bool, v635: bool, v636: bool, v637: bool, v638: i52, v639: i1, v640: i64, v641: i2, v642: bool): // preds: addr_0_block_119 addr_0_block_132
      nextln:   v643 = bool.icmp.i8.ne v551, 0x0
      nextln:   v644 = bool.bitwise_not v643
      nextln:   v645 = bool.and v644, 0x1
      nextln:   v646 = bool.icmp.i8.ne v551, 0x0
      nextln:   v647 = bool.bitwise_not v646
      nextln:   v648 = bool.and 0x1, v647
      nextln:   jumpif v648, addr_0_block_134, addr_0_block_135
      check: addr_0_block_134: // preds: addr_0_block_133
      nextln:   jump addr_0_block_136
      check: addr_0_block_135: // preds: addr_0_block_133
      nextln:   jump addr_0_block_136
      check: addr_0_block_136: // preds: addr_0_block_134 addr_0_block_135
      nextln:   v649 = bool.icmp.i8.ne v551, 0x0
      nextln:   jumpif v649, addr_0_block_137, addr_0_block_138
      check: addr_0_block_137: // preds: addr_0_block_136
      nextln:   jump addr_0_block_139
      check: addr_0_block_138: // preds: addr_0_block_136
      nextln:   jump addr_0_block_139
      check: addr_0_block_139: // preds: addr_0_block_137 addr_0_block_138
      nextln:   v650 = i52.unsigned_from_bits v574
      nextln:   v651 = int.modulo v650, 0x1
      nextln:   v652 = int.sub v650, v651
      nextln:   v653 = i52.to_bits v652
      nextln:   v654 = bool.icmp.i52.eq v574, v653
      nextln:   v655 = i8.load v574
      nextln:   v656 = i32.and v501, 0xffffff
      nextln:   v657 = i8.lshl v655, 0x18
      nextln:   v658 = i32.or v656, v657
      check: addr_0_block_140: // preds: entry
      nextln:   v31 = i64.unsigned_from_bits v7
      nextln:   v32 = int.modulo v31, 0x4
      nextln:   v33 = int.sub v31, v32
      nextln:   v34 = i64.to_bits v33
      nextln:   v35 = bool.icmp.i64.eq v7, v34
      nextln:   v36 = i64.lshr v7, 0x30
      nextln:   v37 = i16.trunc.i64 v36
      nextln:   v38 = bool.icmp.i16.eq v37, 0x0
      nextln:   v39 = bool.bitwise_not v38
      nextln:   jumpif v39, addr_0_block_141, addr_0_block_142
      nextln:   jump addr_0_block_175(v12, 0x0, v862)
      check: addr_0_block_141: // no preds!
      nextln:   jump addr_0_block_143(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_144(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_142: // no preds!
      nextln:   jump addr_0_block_143(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_143(v863: i52, v864: int, v865: bool, v866: bool): // preds: addr_0_block_142
      nextln:   v867 = i52.trunc.i64 v7
      nextln:   jump addr_0_block_144(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v867, 0x1, 0x0)
      check: addr_0_block_144(v719: i3, v720: i1, v721: i1, v722: i1, v723: i1, v724: i4, v725: i1, v726: bool, v727: int, v728: int, v729: bool, v730: bool, v731: i8, v732: i8, v733: i52, v734: i1, v735: bool, v736: bool, v737: int, v738: i1, v739: bool, v740: i4, v741: i2, v742: i4, v743: i8, v744: i8, v745: i2, v746: i2, v747: bool, v748: i2, v749: i2, v750: bool, v751: bool, v752: bool, v753: bool, v754: i52, v755: i1, v756: i64, v757: i1, v758: i8, v759: i8, v760: i52, v761: i1, v762: bool, v763: bool, v764: int, v765: i1, v766: bool, v767: i4, v768: i2, v769: i4, v770: i8, v771: i8, v772: i2, v773: i2, v774: bool, v775: i2, v776: i2, v777: bool, v778: bool, v779: bool, v780: bool, v781: i52, v782: i1, v783: i64): // preds: addr_0_block_141 addr_0_block_143
      nextln:   v784 = bool.icmp.i8.ne v758, 0x0
      nextln:   v785 = bool.bitwise_not v784
      nextln:   v786 = bool.bitwise_not v12
      nextln:   v787 = bool.and v786, 0x1
      nextln:   v788 = bool.or v787, 0x0
      nextln:   v789 = bool.icmp.i8.ne v758, 0x0
      nextln:   v790 = bool.bitwise_not v789
      nextln:   v791 = bool.and v788, v790
      nextln:   v792 = bool.icmp.i8.eq v770, 0x1
      nextln:   v793 = bool.and v791, v792
      nextln:   jumpif v793, addr_0_block_145, addr_0_block_146
      check: addr_0_block_145: // preds: addr_0_block_144
      nextln:   jump addr_0_block_147
      check: addr_0_block_146: // preds: addr_0_block_144
      nextln:   jump addr_0_block_147
      check: addr_0_block_147: // preds: addr_0_block_145 addr_0_block_146
      nextln:   v794 = bool.icmp.i8.ne v758, 0x0
      nextln:   v795 = bool.bitwise_not v794
      nextln:   v796 = bool.icmp.i8.ne v758, 0x0
      nextln:   v797 = bool.bitwise_not v796
      nextln:   v798 = bool.icmp.i8.eq v770, 0x1
      nextln:   v799 = bool.and v797, v798
      nextln:   jumpif v729, addr_0_block_148, addr_0_block_149
      check: addr_0_block_148: // preds: addr_0_block_147
      nextln:   v800 = bool.icmp.i8.eq v758, 0x0
      nextln:   jump addr_0_block_150(0x1)
      check: addr_0_block_149: // preds: addr_0_block_147
      nextln:   jump addr_0_block_150(0x0)
      check: addr_0_block_150(v801: bool): // preds: addr_0_block_148 addr_0_block_149
      nextln:   v802 = bool.icmp.i8.eq v758, 0x0
      nextln:   v803 = bool.and v730, v802
      nextln:   jumpif v803, addr_0_block_151, addr_0_block_152
      check: addr_0_block_151: // preds: addr_0_block_150
      nextln:   jump addr_0_block_153(0x0, 0x0)
      check: addr_0_block_152: // preds: addr_0_block_150
      nextln:   jump addr_0_block_153(0x0, 0x0)
      check: addr_0_block_153(v804: bool, v805: bool): // preds: addr_0_block_151 addr_0_block_152
      nextln:   v806 = bool.or v801, v804
      nextln:   jumpif v806, addr_0_block_154, addr_0_block_167
      check: addr_0_block_154: // preds: addr_0_block_153
      nextln:   v807 = i52.unsigned_from_bits v754
      nextln:   v808 = int.modulo v807, 0x8
      nextln:   v809 = int.sub v807, v808
      nextln:   v810 = i52.to_bits v809
      nextln:   v811 = bool.icmp.i52.eq v754, v810
      nextln:   v812 = i64.load v754
      nextln:   jumpif v801, addr_0_block_155, addr_0_block_156
      nextln:   jump addr_0_block_168(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v812, v731, v732, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, v745, v746, v747, v748, v749, v750, v751, v752, v753, v754, v755, v756, 0x0, 0x0)
      check: addr_0_block_155: // no preds!
      nextln:   jump addr_0_block_157
      check: addr_0_block_156: // no preds!
      nextln:   jump addr_0_block_157
      check: addr_0_block_157: // preds: addr_0_block_155 addr_0_block_156
      nextln:   jumpif v804, addr_0_block_158, addr_0_block_159
      check: addr_0_block_158: // preds: addr_0_block_157
      nextln:   jump addr_0_block_160
      check: addr_0_block_159: // preds: addr_0_block_157
      nextln:   jump addr_0_block_160
      check: addr_0_block_160: // preds: addr_0_block_158 addr_0_block_159
      nextln:   v868 = i52.unsigned_from_bits v754
      nextln:   v869 = int.modulo v868, 0x8
      nextln:   v870 = int.sub v868, v869
      nextln:   v871 = i52.to_bits v870
      nextln:   v872 = bool.icmp.i52.eq v754, v871
      nextln:   v873 = bool.icmp.i52.eq v754, 0x13000000
      nextln:   jumpif v873, addr_0_block_161, addr_0_block_165
      check: addr_0_block_161: // preds: addr_0_block_160
      nextln:   v874 = i64.unsigned_from_bits v812
      nextln:   v875 = bool.icmp.int.eq v874, 0x4
      nextln:   jumpif v875, addr_0_block_162, addr_0_block_163
      nextln:   jump addr_0_block_166
      check: addr_0_block_162: // no preds!
      nextln:   jump addr_0_block_164
      check: addr_0_block_163: // no preds!
      nextln:   v876 = i8.trunc.i64 v812
      nextln:   v877 = i8.unsigned_from_bits v876
      nextln:   jump addr_0_block_164
      check: addr_0_block_164: // preds: addr_0_block_162 addr_0_block_163
      check: addr_0_block_165: // preds: addr_0_block_160
      nextln:   store.i64 v812, v754
      nextln:   jump addr_0_block_166
      check: addr_0_block_166: // preds: addr_0_block_161 addr_0_block_165
      check: addr_0_block_167: // preds: addr_0_block_153
      nextln:   jump addr_0_block_168(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_168(v813: i8, v814: i1, v815: i16, v816: i8, v817: bool, v818: bool, v819: bool, v820: int, v821: i64, v822: i8, v823: i8, v824: i52, v825: i1, v826: bool, v827: bool, v828: int, v829: i1, v830: bool, v831: i4, v832: i2, v833: i4, v834: i8, v835: i8, v836: i2, v837: i2, v838: bool, v839: i2, v840: i2, v841: bool, v842: bool, v843: bool, v844: bool, v845: i52, v846: i1, v847: i64, v848: i2, v849: bool): // preds: addr_0_block_154 addr_0_block_167
      nextln:   v850 = bool.icmp.i8.ne v758, 0x0
      nextln:   v851 = bool.bitwise_not v850
      nextln:   v852 = bool.and v851, 0x1
      nextln:   v853 = bool.icmp.i8.ne v758, 0x0
      nextln:   v854 = bool.bitwise_not v853
      nextln:   v855 = bool.and 0x1, v854
      nextln:   jumpif v855, addr_0_block_169, addr_0_block_170
      check: addr_0_block_169: // preds: addr_0_block_168
      nextln:   jump addr_0_block_171
      check: addr_0_block_170: // preds: addr_0_block_168
      nextln:   jump addr_0_block_171
      check: addr_0_block_171: // preds: addr_0_block_169 addr_0_block_170
      nextln:   v856 = bool.icmp.i8.ne v758, 0x0
      nextln:   jumpif v856, addr_0_block_172, addr_0_block_173
      check: addr_0_block_172: // preds: addr_0_block_171
      nextln:   jump addr_0_block_174
      check: addr_0_block_173: // preds: addr_0_block_171
      nextln:   jump addr_0_block_174
      check: addr_0_block_174: // preds: addr_0_block_172 addr_0_block_173
      nextln:   v857 = i52.unsigned_from_bits v781
      nextln:   v858 = int.modulo v857, 0x4
      nextln:   v859 = int.sub v857, v858
      nextln:   v860 = i52.to_bits v859
      nextln:   v861 = bool.icmp.i52.eq v781, v860
      nextln:   v862 = i32.load v781
      check: addr_0_block_175(v24: i64, v25: i8, v26: i32): // preds: addr_0_block_0 addr_0_block_140
      nextln:   v27 = i64.zext.i32 0x0
      nextln:   v28 = i64.lshl v27, 0x20
      nextln:   v29 = i64.zext.i32 v26
      nextln:   v30 = i64.or v28, v29
      nextln:   write_reg.i64 v30, "x1"
- name: ldur_2
  bytes: [0xe1, 0x73, 0x41, 0xf8]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "sp"
      nextln:   v1 = i64.unsigned_from_bits v0
      nextln:   v2 = int.modulo v1, 0x10
      nextln:   v3 = int.sub v1, v2
      nextln:   v4 = i64.to_bits v3
      nextln:   v5 = bool.icmp.i64.ne v0, v4
      nextln:   v6 = i64.read_reg "sp"
      nextln:   v7 = i64.wrapping_add v6, 0x17
      nextln:   v8 = i64.unsigned_from_bits v7
      nextln:   v9 = int.modulo v8, 0x8
      nextln:   v10 = int.sub v8, v9
      nextln:   v11 = i64.to_bits v10
      nextln:   v12 = bool.icmp.i64.eq v7, v11
      nextln:   v13 = bool.bitwise_not v12
      nextln:   v14 = bool.bitwise_not v12
      nextln:   jumpif v14, addr_0_block_0, addr_0_block_276
      check: addr_0_block_0: // preds: entry
      nextln:   v15 = i64.unsigned_from_bits v7
      nextln:   v16 = int.modulo v15, 0x1
      nextln:   v17 = int.sub v15, v16
      nextln:   v18 = i64.to_bits v17
      nextln:   v19 = bool.icmp.i64.eq v7, v18
      nextln:   v20 = i64.lshr v7, 0x30
      nextln:   v21 = i16.trunc.i64 v20
      nextln:   v22 = bool.icmp.i16.eq v21, 0x0
      nextln:   v23 = bool.bitwise_not v22
      nextln:   jumpif v23, addr_0_block_1, addr_0_block_2
      nextln:   jump addr_0_block_311(v183, v184, v1282)
      check: addr_0_block_1: // no preds!
      nextln:   jump addr_0_block_3(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_4(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_2: // no preds!
      nextln:   jump addr_0_block_3(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_3(v1318: i52, v1319: int, v1320: bool, v1321: bool): // preds: addr_0_block_2
      nextln:   v1322 = i52.trunc.i64 v7
      nextln:   jump addr_0_block_4(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1322, 0x1, 0x0)
      check: addr_0_block_4(v36: i3, v37: i1, v38: i1, v39: i1, v40: i1, v41: i4, v42: i1, v43: bool, v44: int, v45: int, v46: bool, v47: bool, v48: i8, v49: i8, v50: i52, v51: i1, v52: bool, v53: bool, v54: int, v55: i1, v56: bool, v57: i4, v58: i2, v59: i4, v60: i8, v61: i8, v62: i2, v63: i2, v64: bool, v65: i2, v66: i2, v67: bool, v68: bool, v69: bool, v70: bool, v71: i52, v72: i1, v73: i64, v74: i1, v75: i8, v76: i8, v77: i52, v78: i1, v79: bool, v80: bool, v81: int, v82: i1, v83: bool, v84: i4, v85: i2, v86: i4, v87: i8, v88: i8, v89: i2, v90: i2, v91: bool, v92: i2, v93: i2, v94: bool, v95: bool, v96: bool, v97: bool, v98: i52, v99: i1, v100: i64): // preds: addr_0_block_1 addr_0_block_3
      nextln:   v101 = bool.icmp.i8.ne v75, 0x0
      nextln:   v102 = bool.bitwise_not v101
      nextln:   v103 = bool.bitwise_not v12
      nextln:   v104 = bool.and v103, 0x1
      nextln:   v105 = bool.or v104, 0x0
      nextln:   v106 = bool.icmp.i8.ne v75, 0x0
      nextln:   v107 = bool.bitwise_not v106
      nextln:   v108 = bool.and v105, v107
      nextln:   v109 = bool.icmp.i8.eq v87, 0x1
      nextln:   v110 = bool.and v108, v109
      nextln:   jumpif v110, addr_0_block_5, addr_0_block_6
      check: addr_0_block_5: // preds: addr_0_block_4
      nextln:   jump addr_0_block_7
      check: addr_0_block_6: // preds: addr_0_block_4
      nextln:   jump addr_0_block_7
      check: addr_0_block_7: // preds: addr_0_block_5 addr_0_block_6
      nextln:   v111 = bool.icmp.i8.ne v75, 0x0
      nextln:   v112 = bool.bitwise_not v111
      nextln:   v113 = bool.icmp.i8.ne v75, 0x0
      nextln:   v114 = bool.bitwise_not v113
      nextln:   v115 = bool.icmp.i8.eq v87, 0x1
      nextln:   v116 = bool.and v114, v115
      nextln:   jumpif v46, addr_0_block_8, addr_0_block_9
      check: addr_0_block_8: // preds: addr_0_block_7
      nextln:   v117 = bool.icmp.i8.eq v75, 0x0
      nextln:   jump addr_0_block_10(0x1)
      check: addr_0_block_9: // preds: addr_0_block_7
      nextln:   jump addr_0_block_10(0x0)
      check: addr_0_block_10(v118: bool): // preds: addr_0_block_8 addr_0_block_9
      nextln:   v119 = bool.icmp.i8.eq v75, 0x0
      nextln:   v120 = bool.and v47, v119
      nextln:   jumpif v120, addr_0_block_11, addr_0_block_12
      check: addr_0_block_11: // preds: addr_0_block_10
      nextln:   jump addr_0_block_13(0x0, 0x0)
      check: addr_0_block_12: // preds: addr_0_block_10
      nextln:   jump addr_0_block_13(0x0, 0x0)
      check: addr_0_block_13(v121: bool, v122: bool): // preds: addr_0_block_11 addr_0_block_12
      nextln:   v123 = bool.or v118, v121
      nextln:   jumpif v123, addr_0_block_14, addr_0_block_27
      check: addr_0_block_14: // preds: addr_0_block_13
      nextln:   v124 = i52.unsigned_from_bits v71
      nextln:   v125 = int.modulo v124, 0x8
      nextln:   v126 = int.sub v124, v125
      nextln:   v127 = i52.to_bits v126
      nextln:   v128 = bool.icmp.i52.eq v71, v127
      nextln:   v129 = i64.load v71
      nextln:   jumpif v118, addr_0_block_15, addr_0_block_16
      nextln:   jump addr_0_block_28(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v129, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, 0x0, 0x0)
      check: addr_0_block_15: // no preds!
      nextln:   jump addr_0_block_17
      check: addr_0_block_16: // no preds!
      nextln:   jump addr_0_block_17
      check: addr_0_block_17: // preds: addr_0_block_15 addr_0_block_16
      nextln:   jumpif v121, addr_0_block_18, addr_0_block_19
      check: addr_0_block_18: // preds: addr_0_block_17
      nextln:   jump addr_0_block_20
      check: addr_0_block_19: // preds: addr_0_block_17
      nextln:   jump addr_0_block_20
      check: addr_0_block_20: // preds: addr_0_block_18 addr_0_block_19
      nextln:   v1323 = i52.unsigned_from_bits v71
      nextln:   v1324 = int.modulo v1323, 0x8
      nextln:   v1325 = int.sub v1323, v1324
      nextln:   v1326 = i52.to_bits v1325
      nextln:   v1327 = bool.icmp.i52.eq v71, v1326
      nextln:   v1328 = bool.icmp.i52.eq v71, 0x13000000
      nextln:   jumpif v1328, addr_0_block_21, addr_0_block_25
      check: addr_0_block_21: // preds: addr_0_block_20
      nextln:   v1329 = i64.unsigned_from_bits v129
      nextln:   v1330 = bool.icmp.int.eq v1329, 0x4
      nextln:   jumpif v1330, addr_0_block_22, addr_0_block_23
      nextln:   jump addr_0_block_26
      check: addr_0_block_22: // no preds!
      nextln:   jump addr_0_block_24
      check: addr_0_block_23: // no preds!
      nextln:   v1331 = i8.trunc.i64 v129
      nextln:   v1332 = i8.unsigned_from_bits v1331
      nextln:   jump addr_0_block_24
      check: addr_0_block_24: // preds: addr_0_block_22 addr_0_block_23
      check: addr_0_block_25: // preds: addr_0_block_20
      nextln:   store.i64 v129, v71
      nextln:   jump addr_0_block_26
      check: addr_0_block_26: // preds: addr_0_block_21 addr_0_block_25
      check: addr_0_block_27: // preds: addr_0_block_13
      nextln:   jump addr_0_block_28(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_28(v130: i8, v131: i1, v132: i16, v133: i8, v134: bool, v135: bool, v136: bool, v137: int, v138: i64, v139: i8, v140: i8, v141: i52, v142: i1, v143: bool, v144: bool, v145: int, v146: i1, v147: bool, v148: i4, v149: i2, v150: i4, v151: i8, v152: i8, v153: i2, v154: i2, v155: bool, v156: i2, v157: i2, v158: bool, v159: bool, v160: bool, v161: bool, v162: i52, v163: i1, v164: i64, v165: i2, v166: bool): // preds: addr_0_block_14 addr_0_block_27
      nextln:   v167 = bool.icmp.i8.ne v75, 0x0
      nextln:   v168 = bool.bitwise_not v167
      nextln:   v169 = bool.and v168, 0x1
      nextln:   v170 = bool.icmp.i8.ne v75, 0x0
      nextln:   v171 = bool.bitwise_not v170
      nextln:   v172 = bool.and 0x1, v171
      nextln:   jumpif v172, addr_0_block_29, addr_0_block_30
      check: addr_0_block_29: // preds: addr_0_block_28
      nextln:   jump addr_0_block_31
      check: addr_0_block_30: // preds: addr_0_block_28
      nextln:   jump addr_0_block_31
      check: addr_0_block_31: // preds: addr_0_block_29 addr_0_block_30
      nextln:   v173 = bool.icmp.i8.ne v75, 0x0
      nextln:   jumpif v173, addr_0_block_32, addr_0_block_33
      check: addr_0_block_32: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_33: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_34: // preds: addr_0_block_32 addr_0_block_33
      nextln:   v174 = i52.unsigned_from_bits v98
      nextln:   v175 = int.modulo v174, 0x1
      nextln:   v176 = int.sub v174, v175
      nextln:   v177 = i52.to_bits v176
      nextln:   v178 = bool.icmp.i52.eq v98, v177
      nextln:   v179 = i8.load v98
      nextln:   v180 = i8.lshl v179, 0x0
      nextln:   v181 = i64.or 0x0, v180
      nextln:   v182 = bool.bitwise_not v12
      nextln:   jumpif v182, addr_0_block_35, addr_0_block_36
      check: addr_0_block_35: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37(v12, 0xc)
      check: addr_0_block_36: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37(v12, 0x0)
      check: addr_0_block_37(v183: i64, v184: i8): // preds: addr_0_block_35 addr_0_block_36
      nextln:   v185 = i64.wrapping_add v7, 0x1
      nextln:   v186 = i64.unsigned_from_bits v185
      nextln:   v187 = int.modulo v186, 0x1
      nextln:   v188 = int.sub v186, v187
      nextln:   v189 = i64.to_bits v188
      nextln:   v190 = bool.icmp.i64.eq v185, v189
      nextln:   v191 = i64.lshr v185, 0x30
      nextln:   v192 = i16.trunc.i64 v191
      nextln:   v193 = bool.icmp.i16.eq v192, 0x0
      nextln:   v194 = bool.bitwise_not v193
      nextln:   jumpif v194, addr_0_block_38, addr_0_block_39
      check: addr_0_block_38: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_41(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_39: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_40(v1313: i52, v1314: int, v1315: bool, v1316: bool): // preds: addr_0_block_39
      nextln:   v1317 = i52.trunc.i64 v185
      nextln:   jump addr_0_block_41(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1317, 0x1, 0x0)
      check: addr_0_block_41(v195: i3, v196: i1, v197: i1, v198: i1, v199: i1, v200: i4, v201: i1, v202: bool, v203: int, v204: int, v205: bool, v206: bool, v207: i8, v208: i8, v209: i52, v210: i1, v211: bool, v212: bool, v213: int, v214: i1, v215: bool, v216: i4, v217: i2, v218: i4, v219: i8, v220: i8, v221: i2, v222: i2, v223: bool, v224: i2, v225: i2, v226: bool, v227: bool, v228: bool, v229: bool, v230: i52, v231: i1, v232: i64, v233: i1, v234: i8, v235: i8, v236: i52, v237: i1, v238: bool, v239: bool, v240: int, v241: i1, v242: bool, v243: i4, v244: i2, v245: i4, v246: i8, v247: i8, v248: i2, v249: i2, v250: bool, v251: i2, v252: i2, v253: bool, v254: bool, v255: bool, v256: bool, v257: i52, v258: i1, v259: i64): // preds: addr_0_block_38 addr_0_block_40
      nextln:   v260 = bool.icmp.i8.ne v234, 0x0
      nextln:   v261 = bool.bitwise_not v260
      nextln:   v262 = bool.bitwise_not v12
      nextln:   v263 = bool.and v262, 0x1
      nextln:   v264 = bool.or v263, 0x0
      nextln:   v265 = bool.icmp.i8.ne v234, 0x0
      nextln:   v266 = bool.bitwise_not v265
      nextln:   v267 = bool.and v264, v266
      nextln:   v268 = bool.icmp.i8.eq v246, 0x1
      nextln:   v269 = bool.and v267, v268
      nextln:   jumpif v269, addr_0_block_42, addr_0_block_43
      check: addr_0_block_42: // preds: addr_0_block_41
      nextln:   jump addr_0_block_44
      check: addr_0_block_43: // preds: addr_0_block_41
      nextln:   jump addr_0_block_44
      check: addr_0_block_44: // preds: addr_0_block_42 addr_0_block_43
      nextln:   v270 = bool.icmp.i8.ne v234, 0x0
      nextln:   v271 = bool.bitwise_not v270
      nextln:   v272 = bool.icmp.i8.ne v234, 0x0
      nextln:   v273 = bool.bitwise_not v272
      nextln:   v274 = bool.icmp.i8.eq v246, 0x1
      nextln:   v275 = bool.and v273, v274
      nextln:   jumpif v205, addr_0_block_45, addr_0_block_46
      check: addr_0_block_45: // preds: addr_0_block_44
      nextln:   v276 = bool.icmp.i8.eq v234, 0x0
      nextln:   jump addr_0_block_47(0x1)
      check: addr_0_block_46: // preds: addr_0_block_44
      nextln:   jump addr_0_block_47(0x0)
      check: addr_0_block_47(v277: bool): // preds: addr_0_block_45 addr_0_block_46
      nextln:   v278 = bool.icmp.i8.eq v234, 0x0
      nextln:   v279 = bool.and v206, v278
      nextln:   jumpif v279, addr_0_block_48, addr_0_block_49
      check: addr_0_block_48: // preds: addr_0_block_47
      nextln:   jump addr_0_block_50(0x0, 0x0)
      check: addr_0_block_49: // preds: addr_0_block_47
      nextln:   jump addr_0_block_50(0x0, 0x0)
      check: addr_0_block_50(v280: bool, v281: bool): // preds: addr_0_block_48 addr_0_block_49
      nextln:   v282 = bool.or v277, v280
      nextln:   jumpif v282, addr_0_block_51, addr_0_block_64
      check: addr_0_block_51: // preds: addr_0_block_50
      nextln:   v283 = i52.unsigned_from_bits v230
      nextln:   v284 = int.modulo v283, 0x8
      nextln:   v285 = int.sub v283, v284
      nextln:   v286 = i52.to_bits v285
      nextln:   v287 = bool.icmp.i52.eq v230, v286
      nextln:   v288 = i64.load v230
      nextln:   jumpif v277, addr_0_block_52, addr_0_block_53
      nextln:   jump addr_0_block_65(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v288, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, 0x0, 0x0)
      check: addr_0_block_52: // no preds!
      nextln:   jump addr_0_block_54
      check: addr_0_block_53: // no preds!
      nextln:   jump addr_0_block_54
      check: addr_0_block_54: // preds: addr_0_block_52 addr_0_block_53
      nextln:   jumpif v280, addr_0_block_55, addr_0_block_56
      check: addr_0_block_55: // preds: addr_0_block_54
      nextln:   jump addr_0_block_57
      check: addr_0_block_56: // preds: addr_0_block_54
      nextln:   jump addr_0_block_57
      check: addr_0_block_57: // preds: addr_0_block_55 addr_0_block_56
      nextln:   v1333 = i52.unsigned_from_bits v230
      nextln:   v1334 = int.modulo v1333, 0x8
      nextln:   v1335 = int.sub v1333, v1334
      nextln:   v1336 = i52.to_bits v1335
      nextln:   v1337 = bool.icmp.i52.eq v230, v1336
      nextln:   v1338 = bool.icmp.i52.eq v230, 0x13000000
      nextln:   jumpif v1338, addr_0_block_58, addr_0_block_62
      check: addr_0_block_58: // preds: addr_0_block_57
      nextln:   v1339 = i64.unsigned_from_bits v288
      nextln:   v1340 = bool.icmp.int.eq v1339, 0x4
      nextln:   jumpif v1340, addr_0_block_59, addr_0_block_60
      nextln:   jump addr_0_block_63
      check: addr_0_block_59: // no preds!
      nextln:   jump addr_0_block_61
      check: addr_0_block_60: // no preds!
      nextln:   v1341 = i8.trunc.i64 v288
      nextln:   v1342 = i8.unsigned_from_bits v1341
      nextln:   jump addr_0_block_61
      check: addr_0_block_61: // preds: addr_0_block_59 addr_0_block_60
      check: addr_0_block_62: // preds: addr_0_block_57
      nextln:   store.i64 v288, v230
      nextln:   jump addr_0_block_63
      check: addr_0_block_63: // preds: addr_0_block_58 addr_0_block_62
      check: addr_0_block_64: // preds: addr_0_block_50
      nextln:   jump addr_0_block_65(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_65(v289: i8, v290: i1, v291: i16, v292: i8, v293: bool, v294: bool, v295: bool, v296: int, v297: i64, v298: i8, v299: i8, v300: i52, v301: i1, v302: bool, v303: bool, v304: int, v305: i1, v306: bool, v307: i4, v308: i2, v309: i4, v310: i8, v311: i8, v312: i2, v313: i2, v314: bool, v315: i2, v316: i2, v317: bool, v318: bool, v319: bool, v320: bool, v321: i52, v322: i1, v323: i64, v324: i2, v325: bool): // preds: addr_0_block_51 addr_0_block_64
      nextln:   v326 = bool.icmp.i8.ne v234, 0x0
      nextln:   v327 = bool.bitwise_not v326
      nextln:   v328 = bool.and v327, 0x1
      nextln:   v329 = bool.icmp.i8.ne v234, 0x0
      nextln:   v330 = bool.bitwise_not v329
      nextln:   v331 = bool.and 0x1, v330
      nextln:   jumpif v331, addr_0_block_66, addr_0_block_67
      check: addr_0_block_66: // preds: addr_0_block_65
      nextln:   jump addr_0_block_68
      check: addr_0_block_67: // preds: addr_0_block_65
      nextln:   jump addr_0_block_68
      check: addr_0_block_68: // preds: addr_0_block_66 addr_0_block_67
      nextln:   v332 = bool.icmp.i8.ne v234, 0x0
      nextln:   jumpif v332, addr_0_block_69, addr_0_block_70
      check: addr_0_block_69: // preds: addr_0_block_68
      nextln:   jump addr_0_block_71
      check: addr_0_block_70: // preds: addr_0_block_68
      nextln:   jump addr_0_block_71
      check: addr_0_block_71: // preds: addr_0_block_69 addr_0_block_70
      nextln:   v333 = i52.unsigned_from_bits v257
      nextln:   v334 = int.modulo v333, 0x1
      nextln:   v335 = int.sub v333, v334
      nextln:   v336 = i52.to_bits v335
      nextln:   v337 = bool.icmp.i52.eq v257, v336
      nextln:   v338 = i8.load v257
      nextln:   v339 = i8.lshl v338, 0x8
      nextln:   v340 = i64.or 0x0, v339
      nextln:   v341 = i64.wrapping_add v7, 0x2
      nextln:   v342 = i64.unsigned_from_bits v341
      nextln:   v343 = int.modulo v342, 0x1
      nextln:   v344 = int.sub v342, v343
      nextln:   v345 = i64.to_bits v344
      nextln:   v346 = bool.icmp.i64.eq v341, v345
      nextln:   v347 = i64.lshr v341, 0x30
      nextln:   v348 = i16.trunc.i64 v347
      nextln:   v349 = bool.icmp.i16.eq v348, 0x0
      nextln:   v350 = bool.bitwise_not v349
      nextln:   jumpif v350, addr_0_block_72, addr_0_block_73
      check: addr_0_block_72: // preds: addr_0_block_71
      nextln:   jump addr_0_block_74(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_75(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_73: // preds: addr_0_block_71
      nextln:   jump addr_0_block_74(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_74(v1308: i52, v1309: int, v1310: bool, v1311: bool): // preds: addr_0_block_73
      nextln:   v1312 = i52.trunc.i64 v341
      nextln:   jump addr_0_block_75(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1312, 0x1, 0x0)
      check: addr_0_block_75(v351: i3, v352: i1, v353: i1, v354: i1, v355: i1, v356: i4, v357: i1, v358: bool, v359: int, v360: int, v361: bool, v362: bool, v363: i8, v364: i8, v365: i52, v366: i1, v367: bool, v368: bool, v369: int, v370: i1, v371: bool, v372: i4, v373: i2, v374: i4, v375: i8, v376: i8, v377: i2, v378: i2, v379: bool, v380: i2, v381: i2, v382: bool, v383: bool, v384: bool, v385: bool, v386: i52, v387: i1, v388: i64, v389: i1, v390: i8, v391: i8, v392: i52, v393: i1, v394: bool, v395: bool, v396: int, v397: i1, v398: bool, v399: i4, v400: i2, v401: i4, v402: i8, v403: i8, v404: i2, v405: i2, v406: bool, v407: i2, v408: i2, v409: bool, v410: bool, v411: bool, v412: bool, v413: i52, v414: i1, v415: i64): // preds: addr_0_block_72 addr_0_block_74
      nextln:   v416 = bool.icmp.i8.ne v390, 0x0
      nextln:   v417 = bool.bitwise_not v416
      nextln:   v418 = bool.bitwise_not v12
      nextln:   v419 = bool.and v418, 0x1
      nextln:   v420 = bool.or v419, 0x0
      nextln:   v421 = bool.icmp.i8.ne v390, 0x0
      nextln:   v422 = bool.bitwise_not v421
      nextln:   v423 = bool.and v420, v422
      nextln:   v424 = bool.icmp.i8.eq v402, 0x1
      nextln:   v425 = bool.and v423, v424
      nextln:   jumpif v425, addr_0_block_76, addr_0_block_77
      check: addr_0_block_76: // preds: addr_0_block_75
      nextln:   jump addr_0_block_78
      check: addr_0_block_77: // preds: addr_0_block_75
      nextln:   jump addr_0_block_78
      check: addr_0_block_78: // preds: addr_0_block_76 addr_0_block_77
      nextln:   v426 = bool.icmp.i8.ne v390, 0x0
      nextln:   v427 = bool.bitwise_not v426
      nextln:   v428 = bool.icmp.i8.ne v390, 0x0
      nextln:   v429 = bool.bitwise_not v428
      nextln:   v430 = bool.icmp.i8.eq v402, 0x1
      nextln:   v431 = bool.and v429, v430
      nextln:   jumpif v361, addr_0_block_79, addr_0_block_80
      check: addr_0_block_79: // preds: addr_0_block_78
      nextln:   v432 = bool.icmp.i8.eq v390, 0x0
      nextln:   jump addr_0_block_81(0x1)
      check: addr_0_block_80: // preds: addr_0_block_78
      nextln:   jump addr_0_block_81(0x0)
      check: addr_0_block_81(v433: bool): // preds: addr_0_block_79 addr_0_block_80
      nextln:   v434 = bool.icmp.i8.eq v390, 0x0
      nextln:   v435 = bool.and v362, v434
      nextln:   jumpif v435, addr_0_block_82, addr_0_block_83
      check: addr_0_block_82: // preds: addr_0_block_81
      nextln:   jump addr_0_block_84(0x0, 0x0)
      check: addr_0_block_83: // preds: addr_0_block_81
      nextln:   jump addr_0_block_84(0x0, 0x0)
      check: addr_0_block_84(v436: bool, v437: bool): // preds: addr_0_block_82 addr_0_block_83
      nextln:   v438 = bool.or v433, v436
      nextln:   jumpif v438, addr_0_block_85, addr_0_block_98
      check: addr_0_block_85: // preds: addr_0_block_84
      nextln:   v439 = i52.unsigned_from_bits v386
      nextln:   v440 = int.modulo v439, 0x8
      nextln:   v441 = int.sub v439, v440
      nextln:   v442 = i52.to_bits v441
      nextln:   v443 = bool.icmp.i52.eq v386, v442
      nextln:   v444 = i64.load v386
      nextln:   jumpif v433, addr_0_block_86, addr_0_block_87
      nextln:   jump addr_0_block_99(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v444, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, v382, v383, v384, v385, v386, v387, v388, 0x0, 0x0)
      check: addr_0_block_86: // no preds!
      nextln:   jump addr_0_block_88
      check: addr_0_block_87: // no preds!
      nextln:   jump addr_0_block_88
      check: addr_0_block_88: // preds: addr_0_block_86 addr_0_block_87
      nextln:   jumpif v436, addr_0_block_89, addr_0_block_90
      check: addr_0_block_89: // preds: addr_0_block_88
      nextln:   jump addr_0_block_91
      check: addr_0_block_90: // preds: addr_0_block_88
      nextln:   jump addr_0_block_91
      check: addr_0_block_91: // preds: addr_0_block_89 addr_0_block_90
      nextln:   v1343 = i52.unsigned_from_bits v386
      nextln:   v1344 = int.modulo v1343, 0x8
      nextln:   v1345 = int.sub v1343, v1344
      nextln:   v1346 = i52.to_bits v1345
      nextln:   v1347 = bool.icmp.i52.eq v386, v1346
      nextln:   v1348 = bool.icmp.i52.eq v386, 0x13000000
      nextln:   jumpif v1348, addr_0_block_92, addr_0_block_96
      check: addr_0_block_92: // preds: addr_0_block_91
      nextln:   v1349 = i64.unsigned_from_bits v444
      nextln:   v1350 = bool.icmp.int.eq v1349, 0x4
      nextln:   jumpif v1350, addr_0_block_93, addr_0_block_94
      nextln:   jump addr_0_block_97
      check: addr_0_block_93: // no preds!
      nextln:   jump addr_0_block_95
      check: addr_0_block_94: // no preds!
      nextln:   v1351 = i8.trunc.i64 v444
      nextln:   v1352 = i8.unsigned_from_bits v1351
      nextln:   jump addr_0_block_95
      check: addr_0_block_95: // preds: addr_0_block_93 addr_0_block_94
      check: addr_0_block_96: // preds: addr_0_block_91
      nextln:   store.i64 v444, v386
      nextln:   jump addr_0_block_97
      check: addr_0_block_97: // preds: addr_0_block_92 addr_0_block_96
      check: addr_0_block_98: // preds: addr_0_block_84
      nextln:   jump addr_0_block_99(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_99(v445: i8, v446: i1, v447: i16, v448: i8, v449: bool, v450: bool, v451: bool, v452: int, v453: i64, v454: i8, v455: i8, v456: i52, v457: i1, v458: bool, v459: bool, v460: int, v461: i1, v462: bool, v463: i4, v464: i2, v465: i4, v466: i8, v467: i8, v468: i2, v469: i2, v470: bool, v471: i2, v472: i2, v473: bool, v474: bool, v475: bool, v476: bool, v477: i52, v478: i1, v479: i64, v480: i2, v481: bool): // preds: addr_0_block_85 addr_0_block_98
      nextln:   v482 = bool.icmp.i8.ne v390, 0x0
      nextln:   v483 = bool.bitwise_not v482
      nextln:   v484 = bool.and v483, 0x1
      nextln:   v485 = bool.icmp.i8.ne v390, 0x0
      nextln:   v486 = bool.bitwise_not v485
      nextln:   v487 = bool.and 0x1, v486
      nextln:   jumpif v487, addr_0_block_100, addr_0_block_101
      check: addr_0_block_100: // preds: addr_0_block_99
      nextln:   jump addr_0_block_102
      check: addr_0_block_101: // preds: addr_0_block_99
      nextln:   jump addr_0_block_102
      check: addr_0_block_102: // preds: addr_0_block_100 addr_0_block_101
      nextln:   v488 = bool.icmp.i8.ne v390, 0x0
      nextln:   jumpif v488, addr_0_block_103, addr_0_block_104
      check: addr_0_block_103: // preds: addr_0_block_102
      nextln:   jump addr_0_block_105
      check: addr_0_block_104: // preds: addr_0_block_102
      nextln:   jump addr_0_block_105
      check: addr_0_block_105: // preds: addr_0_block_103 addr_0_block_104
      nextln:   v489 = i52.unsigned_from_bits v413
      nextln:   v490 = int.modulo v489, 0x1
      nextln:   v491 = int.sub v489, v490
      nextln:   v492 = i52.to_bits v491
      nextln:   v493 = bool.icmp.i52.eq v413, v492
      nextln:   v494 = i8.load v413
      nextln:   v495 = i64.and v340, 0xffffffffff00ffff
      nextln:   v496 = i8.lshl v494, 0x10
      nextln:   v497 = i64.or v495, v496
      nextln:   v498 = i64.wrapping_add v7, 0x3
      nextln:   v499 = i64.unsigned_from_bits v498
      nextln:   v500 = int.modulo v499, 0x1
      nextln:   v501 = int.sub v499, v500
      nextln:   v502 = i64.to_bits v501
      nextln:   v503 = bool.icmp.i64.eq v498, v502
      nextln:   v504 = i64.lshr v498, 0x30
      nextln:   v505 = i16.trunc.i64 v504
      nextln:   v506 = bool.icmp.i16.eq v505, 0x0
      nextln:   v507 = bool.bitwise_not v506
      nextln:   jumpif v507, addr_0_block_106, addr_0_block_107
      check: addr_0_block_106: // preds: addr_0_block_105
      nextln:   jump addr_0_block_108(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_109(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_107: // preds: addr_0_block_105
      nextln:   jump addr_0_block_108(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_108(v1303: i52, v1304: int, v1305: bool, v1306: bool): // preds: addr_0_block_107
      nextln:   v1307 = i52.trunc.i64 v498
      nextln:   jump addr_0_block_109(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1307, 0x1, 0x0)
      check: addr_0_block_109(v508: i3, v509: i1, v510: i1, v511: i1, v512: i1, v513: i4, v514: i1, v515: bool, v516: int, v517: int, v518: bool, v519: bool, v520: i8, v521: i8, v522: i52, v523: i1, v524: bool, v525: bool, v526: int, v527: i1, v528: bool, v529: i4, v530: i2, v531: i4, v532: i8, v533: i8, v534: i2, v535: i2, v536: bool, v537: i2, v538: i2, v539: bool, v540: bool, v541: bool, v542: bool, v543: i52, v544: i1, v545: i64, v546: i1, v547: i8, v548: i8, v549: i52, v550: i1, v551: bool, v552: bool, v553: int, v554: i1, v555: bool, v556: i4, v557: i2, v558: i4, v559: i8, v560: i8, v561: i2, v562: i2, v563: bool, v564: i2, v565: i2, v566: bool, v567: bool, v568: bool, v569: bool, v570: i52, v571: i1, v572: i64): // preds: addr_0_block_106 addr_0_block_108
      nextln:   v573 = bool.icmp.i8.ne v547, 0x0
      nextln:   v574 = bool.bitwise_not v573
      nextln:   v575 = bool.bitwise_not v12
      nextln:   v576 = bool.and v575, 0x1
      nextln:   v577 = bool.or v576, 0x0
      nextln:   v578 = bool.icmp.i8.ne v547, 0x0
      nextln:   v579 = bool.bitwise_not v578
      nextln:   v580 = bool.and v577, v579
      nextln:   v581 = bool.icmp.i8.eq v559, 0x1
      nextln:   v582 = bool.and v580, v581
      nextln:   jumpif v582, addr_0_block_110, addr_0_block_111
      check: addr_0_block_110: // preds: addr_0_block_109
      nextln:   jump addr_0_block_112
      check: addr_0_block_111: // preds: addr_0_block_109
      nextln:   jump addr_0_block_112
      check: addr_0_block_112: // preds: addr_0_block_110 addr_0_block_111
      nextln:   v583 = bool.icmp.i8.ne v547, 0x0
      nextln:   v584 = bool.bitwise_not v583
      nextln:   v585 = bool.icmp.i8.ne v547, 0x0
      nextln:   v586 = bool.bitwise_not v585
      nextln:   v587 = bool.icmp.i8.eq v559, 0x1
      nextln:   v588 = bool.and v586, v587
      nextln:   jumpif v518, addr_0_block_113, addr_0_block_114
      check: addr_0_block_113: // preds: addr_0_block_112
      nextln:   v589 = bool.icmp.i8.eq v547, 0x0
      nextln:   jump addr_0_block_115(0x1)
      check: addr_0_block_114: // preds: addr_0_block_112
      nextln:   jump addr_0_block_115(0x0)
      check: addr_0_block_115(v590: bool): // preds: addr_0_block_113 addr_0_block_114
      nextln:   v591 = bool.icmp.i8.eq v547, 0x0
      nextln:   v592 = bool.and v519, v591
      nextln:   jumpif v592, addr_0_block_116, addr_0_block_117
      check: addr_0_block_116: // preds: addr_0_block_115
      nextln:   jump addr_0_block_118(0x0, 0x0)
      check: addr_0_block_117: // preds: addr_0_block_115
      nextln:   jump addr_0_block_118(0x0, 0x0)
      check: addr_0_block_118(v593: bool, v594: bool): // preds: addr_0_block_116 addr_0_block_117
      nextln:   v595 = bool.or v590, v593
      nextln:   jumpif v595, addr_0_block_119, addr_0_block_132
      check: addr_0_block_119: // preds: addr_0_block_118
      nextln:   v596 = i52.unsigned_from_bits v543
      nextln:   v597 = int.modulo v596, 0x8
      nextln:   v598 = int.sub v596, v597
      nextln:   v599 = i52.to_bits v598
      nextln:   v600 = bool.icmp.i52.eq v543, v599
      nextln:   v601 = i64.load v543
      nextln:   jumpif v590, addr_0_block_120, addr_0_block_121
      nextln:   jump addr_0_block_133(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v601, v520, v521, v522, v523, v524, v525, v526, v527, v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v538, v539, v540, v541, v542, v543, v544, v545, 0x0, 0x0)
      check: addr_0_block_120: // no preds!
      nextln:   jump addr_0_block_122
      check: addr_0_block_121: // no preds!
      nextln:   jump addr_0_block_122
      check: addr_0_block_122: // preds: addr_0_block_120 addr_0_block_121
      nextln:   jumpif v593, addr_0_block_123, addr_0_block_124
      check: addr_0_block_123: // preds: addr_0_block_122
      nextln:   jump addr_0_block_125
      check: addr_0_block_124: // preds: addr_0_block_122
      nextln:   jump addr_0_block_125
      check: addr_0_block_125: // preds: addr_0_block_123 addr_0_block_124
      nextln:   v1353 = i52.unsigned_from_bits v543
      nextln:   v1354 = int.modulo v1353, 0x8
      nextln:   v1355 = int.sub v1353, v1354
      nextln:   v1356 = i52.to_bits v1355
      nextln:   v1357 = bool.icmp.i52.eq v543, v1356
      nextln:   v1358 = bool.icmp.i52.eq v543, 0x13000000
      nextln:   jumpif v1358, addr_0_block_126, addr_0_block_130
      check: addr_0_block_126: // preds: addr_0_block_125
      nextln:   v1359 = i64.unsigned_from_bits v601
      nextln:   v1360 = bool.icmp.int.eq v1359, 0x4
      nextln:   jumpif v1360, addr_0_block_127, addr_0_block_128
      nextln:   jump addr_0_block_131
      check: addr_0_block_127: // no preds!
      nextln:   jump addr_0_block_129
      check: addr_0_block_128: // no preds!
      nextln:   v1361 = i8.trunc.i64 v601
      nextln:   v1362 = i8.unsigned_from_bits v1361
      nextln:   jump addr_0_block_129
      check: addr_0_block_129: // preds: addr_0_block_127 addr_0_block_128
      check: addr_0_block_130: // preds: addr_0_block_125
      nextln:   store.i64 v601, v543
      nextln:   jump addr_0_block_131
      check: addr_0_block_131: // preds: addr_0_block_126 addr_0_block_130
      check: addr_0_block_132: // preds: addr_0_block_118
      nextln:   jump addr_0_block_133(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_133(v602: i8, v603: i1, v604: i16, v605: i8, v606: bool, v607: bool, v608: bool, v609: int, v610: i64, v611: i8, v612: i8, v613: i52, v614: i1, v615: bool, v616: bool, v617: int, v618: i1, v619: bool, v620: i4, v621: i2, v622: i4, v623: i8, v624: i8, v625: i2, v626: i2, v627: bool, v628: i2, v629: i2, v630: bool, v631: bool, v632: bool, v633: bool, v634: i52, v635: i1, v636: i64, v637: i2, v638: bool): // preds: addr_0_block_119 addr_0_block_132
      nextln:   v639 = bool.icmp.i8.ne v547, 0x0
      nextln:   v640 = bool.bitwise_not v639
      nextln:   v641 = bool.and v640, 0x1
      nextln:   v642 = bool.icmp.i8.ne v547, 0x0
      nextln:   v643 = bool.bitwise_not v642
      nextln:   v644 = bool.and 0x1, v643
      nextln:   jumpif v644, addr_0_block_134, addr_0_block_135
      check: addr_0_block_134: // preds: addr_0_block_133
      nextln:   jump addr_0_block_136
      check: addr_0_block_135: // preds: addr_0_block_133
      nextln:   jump addr_0_block_136
      check: addr_0_block_136: // preds: addr_0_block_134 addr_0_block_135
      nextln:   v645 = bool.icmp.i8.ne v547, 0x0
      nextln:   jumpif v645, addr_0_block_137, addr_0_block_138
      check: addr_0_block_137: // preds: addr_0_block_136
      nextln:   jump addr_0_block_139
      check: addr_0_block_138: // preds: addr_0_block_136
      nextln:   jump addr_0_block_139
      check: addr_0_block_139: // preds: addr_0_block_137 addr_0_block_138
      nextln:   v646 = i52.unsigned_from_bits v570
      nextln:   v647 = int.modulo v646, 0x1
      nextln:   v648 = int.sub v646, v647
      nextln:   v649 = i52.to_bits v648
      nextln:   v650 = bool.icmp.i52.eq v570, v649
      nextln:   v651 = i8.load v570
      nextln:   v652 = i64.and v497, 0xffffffff00ffffff
      nextln:   v653 = i8.lshl v651, 0x18
      nextln:   v654 = i64.or v652, v653
      nextln:   v655 = i64.wrapping_add v7, 0x4
      nextln:   v656 = i64.unsigned_from_bits v655
      nextln:   v657 = int.modulo v656, 0x1
      nextln:   v658 = int.sub v656, v657
      nextln:   v659 = i64.to_bits v658
      nextln:   v660 = bool.icmp.i64.eq v655, v659
      nextln:   v661 = i64.lshr v655, 0x30
      nextln:   v662 = i16.trunc.i64 v661
      nextln:   v663 = bool.icmp.i16.eq v662, 0x0
      nextln:   v664 = bool.bitwise_not v663
      nextln:   jumpif v664, addr_0_block_140, addr_0_block_141
      check: addr_0_block_140: // preds: addr_0_block_139
      nextln:   jump addr_0_block_142(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_143(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_141: // preds: addr_0_block_139
      nextln:   jump addr_0_block_142(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_142(v1298: i52, v1299: int, v1300: bool, v1301: bool): // preds: addr_0_block_141
      nextln:   v1302 = i52.trunc.i64 v655
      nextln:   jump addr_0_block_143(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1302, 0x1, 0x0)
      check: addr_0_block_143(v665: i3, v666: i1, v667: i1, v668: i1, v669: i1, v670: i4, v671: i1, v672: bool, v673: int, v674: int, v675: bool, v676: bool, v677: i8, v678: i8, v679: i52, v680: i1, v681: bool, v682: bool, v683: int, v684: i1, v685: bool, v686: i4, v687: i2, v688: i4, v689: i8, v690: i8, v691: i2, v692: i2, v693: bool, v694: i2, v695: i2, v696: bool, v697: bool, v698: bool, v699: bool, v700: i52, v701: i1, v702: i64, v703: i1, v704: i8, v705: i8, v706: i52, v707: i1, v708: bool, v709: bool, v710: int, v711: i1, v712: bool, v713: i4, v714: i2, v715: i4, v716: i8, v717: i8, v718: i2, v719: i2, v720: bool, v721: i2, v722: i2, v723: bool, v724: bool, v725: bool, v726: bool, v727: i52, v728: i1, v729: i64): // preds: addr_0_block_140 addr_0_block_142
      nextln:   v730 = bool.icmp.i8.ne v704, 0x0
      nextln:   v731 = bool.bitwise_not v730
      nextln:   v732 = bool.bitwise_not v12
      nextln:   v733 = bool.and v732, 0x1
      nextln:   v734 = bool.or v733, 0x0
      nextln:   v735 = bool.icmp.i8.ne v704, 0x0
      nextln:   v736 = bool.bitwise_not v735
      nextln:   v737 = bool.and v734, v736
      nextln:   v738 = bool.icmp.i8.eq v716, 0x1
      nextln:   v739 = bool.and v737, v738
      nextln:   jumpif v739, addr_0_block_144, addr_0_block_145
      check: addr_0_block_144: // preds: addr_0_block_143
      nextln:   jump addr_0_block_146
      check: addr_0_block_145: // preds: addr_0_block_143
      nextln:   jump addr_0_block_146
      check: addr_0_block_146: // preds: addr_0_block_144 addr_0_block_145
      nextln:   v740 = bool.icmp.i8.ne v704, 0x0
      nextln:   v741 = bool.bitwise_not v740
      nextln:   v742 = bool.icmp.i8.ne v704, 0x0
      nextln:   v743 = bool.bitwise_not v742
      nextln:   v744 = bool.icmp.i8.eq v716, 0x1
      nextln:   v745 = bool.and v743, v744
      nextln:   jumpif v675, addr_0_block_147, addr_0_block_148
      check: addr_0_block_147: // preds: addr_0_block_146
      nextln:   v746 = bool.icmp.i8.eq v704, 0x0
      nextln:   jump addr_0_block_149(0x1)
      check: addr_0_block_148: // preds: addr_0_block_146
      nextln:   jump addr_0_block_149(0x0)
      check: addr_0_block_149(v747: bool): // preds: addr_0_block_147 addr_0_block_148
      nextln:   v748 = bool.icmp.i8.eq v704, 0x0
      nextln:   v749 = bool.and v676, v748
      nextln:   jumpif v749, addr_0_block_150, addr_0_block_151
      check: addr_0_block_150: // preds: addr_0_block_149
      nextln:   jump addr_0_block_152(0x0, 0x0)
      check: addr_0_block_151: // preds: addr_0_block_149
      nextln:   jump addr_0_block_152(0x0, 0x0)
      check: addr_0_block_152(v750: bool, v751: bool): // preds: addr_0_block_150 addr_0_block_151
      nextln:   v752 = bool.or v747, v750
      nextln:   jumpif v752, addr_0_block_153, addr_0_block_166
      check: addr_0_block_153: // preds: addr_0_block_152
      nextln:   v753 = i52.unsigned_from_bits v700
      nextln:   v754 = int.modulo v753, 0x8
      nextln:   v755 = int.sub v753, v754
      nextln:   v756 = i52.to_bits v755
      nextln:   v757 = bool.icmp.i52.eq v700, v756
      nextln:   v758 = i64.load v700
      nextln:   jumpif v747, addr_0_block_154, addr_0_block_155
      nextln:   jump addr_0_block_167(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v758, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, v689, v690, v691, v692, v693, v694, v695, v696, v697, v698, v699, v700, v701, v702, 0x0, 0x0)
      check: addr_0_block_154: // no preds!
      nextln:   jump addr_0_block_156
      check: addr_0_block_155: // no preds!
      nextln:   jump addr_0_block_156
      check: addr_0_block_156: // preds: addr_0_block_154 addr_0_block_155
      nextln:   jumpif v750, addr_0_block_157, addr_0_block_158
      check: addr_0_block_157: // preds: addr_0_block_156
      nextln:   jump addr_0_block_159
      check: addr_0_block_158: // preds: addr_0_block_156
      nextln:   jump addr_0_block_159
      check: addr_0_block_159: // preds: addr_0_block_157 addr_0_block_158
      nextln:   v1363 = i52.unsigned_from_bits v700
      nextln:   v1364 = int.modulo v1363, 0x8
      nextln:   v1365 = int.sub v1363, v1364
      nextln:   v1366 = i52.to_bits v1365
      nextln:   v1367 = bool.icmp.i52.eq v700, v1366
      nextln:   v1368 = bool.icmp.i52.eq v700, 0x13000000
      nextln:   jumpif v1368, addr_0_block_160, addr_0_block_164
      check: addr_0_block_160: // preds: addr_0_block_159
      nextln:   v1369 = i64.unsigned_from_bits v758
      nextln:   v1370 = bool.icmp.int.eq v1369, 0x4
      nextln:   jumpif v1370, addr_0_block_161, addr_0_block_162
      nextln:   jump addr_0_block_165
      check: addr_0_block_161: // no preds!
      nextln:   jump addr_0_block_163
      check: addr_0_block_162: // no preds!
      nextln:   v1371 = i8.trunc.i64 v758
      nextln:   v1372 = i8.unsigned_from_bits v1371
      nextln:   jump addr_0_block_163
      check: addr_0_block_163: // preds: addr_0_block_161 addr_0_block_162
      check: addr_0_block_164: // preds: addr_0_block_159
      nextln:   store.i64 v758, v700
      nextln:   jump addr_0_block_165
      check: addr_0_block_165: // preds: addr_0_block_160 addr_0_block_164
      check: addr_0_block_166: // preds: addr_0_block_152
      nextln:   jump addr_0_block_167(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_167(v759: i8, v760: i1, v761: i16, v762: i8, v763: bool, v764: bool, v765: bool, v766: int, v767: i64, v768: i8, v769: i8, v770: i52, v771: i1, v772: bool, v773: bool, v774: int, v775: i1, v776: bool, v777: i4, v778: i2, v779: i4, v780: i8, v781: i8, v782: i2, v783: i2, v784: bool, v785: i2, v786: i2, v787: bool, v788: bool, v789: bool, v790: bool, v791: i52, v792: i1, v793: i64, v794: i2, v795: bool): // preds: addr_0_block_153 addr_0_block_166
      nextln:   v796 = bool.icmp.i8.ne v704, 0x0
      nextln:   v797 = bool.bitwise_not v796
      nextln:   v798 = bool.and v797, 0x1
      nextln:   v799 = bool.icmp.i8.ne v704, 0x0
      nextln:   v800 = bool.bitwise_not v799
      nextln:   v801 = bool.and 0x1, v800
      nextln:   jumpif v801, addr_0_block_168, addr_0_block_169
      check: addr_0_block_168: // preds: addr_0_block_167
      nextln:   jump addr_0_block_170
      check: addr_0_block_169: // preds: addr_0_block_167
      nextln:   jump addr_0_block_170
      check: addr_0_block_170: // preds: addr_0_block_168 addr_0_block_169
      nextln:   v802 = bool.icmp.i8.ne v704, 0x0
      nextln:   jumpif v802, addr_0_block_171, addr_0_block_172
      check: addr_0_block_171: // preds: addr_0_block_170
      nextln:   jump addr_0_block_173
      check: addr_0_block_172: // preds: addr_0_block_170
      nextln:   jump addr_0_block_173
      check: addr_0_block_173: // preds: addr_0_block_171 addr_0_block_172
      nextln:   v803 = i52.unsigned_from_bits v727
      nextln:   v804 = int.modulo v803, 0x1
      nextln:   v805 = int.sub v803, v804
      nextln:   v806 = i52.to_bits v805
      nextln:   v807 = bool.icmp.i52.eq v727, v806
      nextln:   v808 = i8.load v727
      nextln:   v809 = i64.and v654, 0xffffff00ffffffff
      nextln:   v810 = i8.lshl v808, 0x20
      nextln:   v811 = i64.or v809, v810
      nextln:   v812 = i64.wrapping_add v7, 0x5
      nextln:   v813 = i64.unsigned_from_bits v812
      nextln:   v814 = int.modulo v813, 0x1
      nextln:   v815 = int.sub v813, v814
      nextln:   v816 = i64.to_bits v815
      nextln:   v817 = bool.icmp.i64.eq v812, v816
      nextln:   v818 = i64.lshr v812, 0x30
      nextln:   v819 = i16.trunc.i64 v818
      nextln:   v820 = bool.icmp.i16.eq v819, 0x0
      nextln:   v821 = bool.bitwise_not v820
      nextln:   jumpif v821, addr_0_block_174, addr_0_block_175
      check: addr_0_block_174: // preds: addr_0_block_173
      nextln:   jump addr_0_block_176(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_177(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_175: // preds: addr_0_block_173
      nextln:   jump addr_0_block_176(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_176(v1293: i52, v1294: int, v1295: bool, v1296: bool): // preds: addr_0_block_175
      nextln:   v1297 = i52.trunc.i64 v812
      nextln:   jump addr_0_block_177(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1297, 0x1, 0x0)
      check: addr_0_block_177(v822: i3, v823: i1, v824: i1, v825: i1, v826: i1, v827: i4, v828: i1, v829: bool, v830: int, v831: int, v832: bool, v833: bool, v834: i8, v835: i8, v836: i52, v837: i1, v838: bool, v839: bool, v840: int, v841: i1, v842: bool, v843: i4, v844: i2, v845: i4, v846: i8, v847: i8, v848: i2, v849: i2, v850: bool, v851: i2, v852: i2, v853: bool, v854: bool, v855: bool, v856: bool, v857: i52, v858: i1, v859: i64, v860: i1, v861: i8, v862: i8, v863: i52, v864: i1, v865: bool, v866: bool, v867: int, v868: i1, v869: bool, v870: i4, v871: i2, v872: i4, v873: i8, v874: i8, v875: i2, v876: i2, v877: bool, v878: i2, v879: i2, v880: bool, v881: bool, v882: bool, v883: bool, v884: i52, v885: i1, v886: i64): // preds: addr_0_block_174 addr_0_block_176
      nextln:   v887 = bool.icmp.i8.ne v861, 0x0
      nextln:   v888 = bool.bitwise_not v887
      nextln:   v889 = bool.bitwise_not v12
      nextln:   v890 = bool.and v889, 0x1
      nextln:   v891 = bool.or v890, 0x0
      nextln:   v892 = bool.icmp.i8.ne v861, 0x0
      nextln:   v893 = bool.bitwise_not v892
      nextln:   v894 = bool.and v891, v893
      nextln:   v895 = bool.icmp.i8.eq v873, 0x1
      nextln:   v896 = bool.and v894, v895
      nextln:   jumpif v896, addr_0_block_178, addr_0_block_179
      check: addr_0_block_178: // preds: addr_0_block_177
      nextln:   jump addr_0_block_180
      check: addr_0_block_179: // preds: addr_0_block_177
      nextln:   jump addr_0_block_180
      check: addr_0_block_180: // preds: addr_0_block_178 addr_0_block_179
      nextln:   v897 = bool.icmp.i8.ne v861, 0x0
      nextln:   v898 = bool.bitwise_not v897
      nextln:   v899 = bool.icmp.i8.ne v861, 0x0
      nextln:   v900 = bool.bitwise_not v899
      nextln:   v901 = bool.icmp.i8.eq v873, 0x1
      nextln:   v902 = bool.and v900, v901
      nextln:   jumpif v832, addr_0_block_181, addr_0_block_182
      check: addr_0_block_181: // preds: addr_0_block_180
      nextln:   v903 = bool.icmp.i8.eq v861, 0x0
      nextln:   jump addr_0_block_183(0x1)
      check: addr_0_block_182: // preds: addr_0_block_180
      nextln:   jump addr_0_block_183(0x0)
      check: addr_0_block_183(v904: bool): // preds: addr_0_block_181 addr_0_block_182
      nextln:   v905 = bool.icmp.i8.eq v861, 0x0
      nextln:   v906 = bool.and v833, v905
      nextln:   jumpif v906, addr_0_block_184, addr_0_block_185
      check: addr_0_block_184: // preds: addr_0_block_183
      nextln:   jump addr_0_block_186(0x0, 0x0)
      check: addr_0_block_185: // preds: addr_0_block_183
      nextln:   jump addr_0_block_186(0x0, 0x0)
      check: addr_0_block_186(v907: bool, v908: bool): // preds: addr_0_block_184 addr_0_block_185
      nextln:   v909 = bool.or v904, v907
      nextln:   jumpif v909, addr_0_block_187, addr_0_block_200
      check: addr_0_block_187: // preds: addr_0_block_186
      nextln:   v910 = i52.unsigned_from_bits v857
      nextln:   v911 = int.modulo v910, 0x8
      nextln:   v912 = int.sub v910, v911
      nextln:   v913 = i52.to_bits v912
      nextln:   v914 = bool.icmp.i52.eq v857, v913
      nextln:   v915 = i64.load v857
      nextln:   jumpif v904, addr_0_block_188, addr_0_block_189
      nextln:   jump addr_0_block_201(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v915, v834, v835, v836, v837, v838, v839, v840, v841, v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v852, v853, v854, v855, v856, v857, v858, v859, 0x0, 0x0)
      check: addr_0_block_188: // no preds!
      nextln:   jump addr_0_block_190
      check: addr_0_block_189: // no preds!
      nextln:   jump addr_0_block_190
      check: addr_0_block_190: // preds: addr_0_block_188 addr_0_block_189
      nextln:   jumpif v907, addr_0_block_191, addr_0_block_192
      check: addr_0_block_191: // preds: addr_0_block_190
      nextln:   jump addr_0_block_193
      check: addr_0_block_192: // preds: addr_0_block_190
      nextln:   jump addr_0_block_193
      check: addr_0_block_193: // preds: addr_0_block_191 addr_0_block_192
      nextln:   v1373 = i52.unsigned_from_bits v857
      nextln:   v1374 = int.modulo v1373, 0x8
      nextln:   v1375 = int.sub v1373, v1374
      nextln:   v1376 = i52.to_bits v1375
      nextln:   v1377 = bool.icmp.i52.eq v857, v1376
      nextln:   v1378 = bool.icmp.i52.eq v857, 0x13000000
      nextln:   jumpif v1378, addr_0_block_194, addr_0_block_198
      check: addr_0_block_194: // preds: addr_0_block_193
      nextln:   v1379 = i64.unsigned_from_bits v915
      nextln:   v1380 = bool.icmp.int.eq v1379, 0x4
      nextln:   jumpif v1380, addr_0_block_195, addr_0_block_196
      nextln:   jump addr_0_block_199
      check: addr_0_block_195: // no preds!
      nextln:   jump addr_0_block_197
      check: addr_0_block_196: // no preds!
      nextln:   v1381 = i8.trunc.i64 v915
      nextln:   v1382 = i8.unsigned_from_bits v1381
      nextln:   jump addr_0_block_197
      check: addr_0_block_197: // preds: addr_0_block_195 addr_0_block_196
      check: addr_0_block_198: // preds: addr_0_block_193
      nextln:   store.i64 v915, v857
      nextln:   jump addr_0_block_199
      check: addr_0_block_199: // preds: addr_0_block_194 addr_0_block_198
      check: addr_0_block_200: // preds: addr_0_block_186
      nextln:   jump addr_0_block_201(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_201(v916: i8, v917: i1, v918: i16, v919: i8, v920: bool, v921: bool, v922: bool, v923: int, v924: i64, v925: i8, v926: i8, v927: i52, v928: i1, v929: bool, v930: bool, v931: int, v932: i1, v933: bool, v934: i4, v935: i2, v936: i4, v937: i8, v938: i8, v939: i2, v940: i2, v941: bool, v942: i2, v943: i2, v944: bool, v945: bool, v946: bool, v947: bool, v948: i52, v949: i1, v950: i64, v951: i2, v952: bool): // preds: addr_0_block_187 addr_0_block_200
      nextln:   v953 = bool.icmp.i8.ne v861, 0x0
      nextln:   v954 = bool.bitwise_not v953
      nextln:   v955 = bool.and v954, 0x1
      nextln:   v956 = bool.icmp.i8.ne v861, 0x0
      nextln:   v957 = bool.bitwise_not v956
      nextln:   v958 = bool.and 0x1, v957
      nextln:   jumpif v958, addr_0_block_202, addr_0_block_203
      check: addr_0_block_202: // preds: addr_0_block_201
      nextln:   jump addr_0_block_204
      check: addr_0_block_203: // preds: addr_0_block_201
      nextln:   jump addr_0_block_204
      check: addr_0_block_204: // preds: addr_0_block_202 addr_0_block_203
      nextln:   v959 = bool.icmp.i8.ne v861, 0x0
      nextln:   jumpif v959, addr_0_block_205, addr_0_block_206
      check: addr_0_block_205: // preds: addr_0_block_204
      nextln:   jump addr_0_block_207
      check: addr_0_block_206: // preds: addr_0_block_204
      nextln:   jump addr_0_block_207
      check: addr_0_block_207: // preds: addr_0_block_205 addr_0_block_206
      nextln:   v960 = i52.unsigned_from_bits v884
      nextln:   v961 = int.modulo v960, 0x1
      nextln:   v962 = int.sub v960, v961
      nextln:   v963 = i52.to_bits v962
      nextln:   v964 = bool.icmp.i52.eq v884, v963
      nextln:   v965 = i8.load v884
      nextln:   v966 = i64.and v811, 0xffff00ffffffffff
      nextln:   v967 = i8.lshl v965, 0x28
      nextln:   v968 = i64.or v966, v967
      nextln:   v969 = i64.wrapping_add v7, 0x6
      nextln:   v970 = i64.unsigned_from_bits v969
      nextln:   v971 = int.modulo v970, 0x1
      nextln:   v972 = int.sub v970, v971
      nextln:   v973 = i64.to_bits v972
      nextln:   v974 = bool.icmp.i64.eq v969, v973
      nextln:   v975 = i64.lshr v969, 0x30
      nextln:   v976 = i16.trunc.i64 v975
      nextln:   v977 = bool.icmp.i16.eq v976, 0x0
      nextln:   v978 = bool.bitwise_not v977
      nextln:   jumpif v978, addr_0_block_208, addr_0_block_209
      check: addr_0_block_208: // preds: addr_0_block_207
      nextln:   jump addr_0_block_210(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_211(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_209: // preds: addr_0_block_207
      nextln:   jump addr_0_block_210(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_210(v1288: i52, v1289: int, v1290: bool, v1291: bool): // preds: addr_0_block_209
      nextln:   v1292 = i52.trunc.i64 v969
      nextln:   jump addr_0_block_211(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1292, 0x1, 0x0)
      check: addr_0_block_211(v979: i3, v980: i1, v981: i1, v982: i1, v983: i1, v984: i4, v985: i1, v986: bool, v987: int, v988: int, v989: bool, v990: bool, v991: i8, v992: i8, v993: i52, v994: i1, v995: bool, v996: bool, v997: int, v998: i1, v999: bool, v1000: i4, v1001: i2, v1002: i4, v1003: i8, v1004: i8, v1005: i2, v1006: i2, v1007: bool, v1008: i2, v1009: i2, v1010: bool, v1011: bool, v1012: bool, v1013: bool, v1014: i52, v1015: i1, v1016: i64, v1017: i1, v1018: i8, v1019: i8, v1020: i52, v1021: i1, v1022: bool, v1023: bool, v1024: int, v1025: i1, v1026: bool, v1027: i4, v1028: i2, v1029: i4, v1030: i8, v1031: i8, v1032: i2, v1033: i2, v1034: bool, v1035: i2, v1036: i2, v1037: bool, v1038: bool, v1039: bool, v1040: bool, v1041: i52, v1042: i1, v1043: i64): // preds: addr_0_block_208 addr_0_block_210
      nextln:   v1044 = bool.icmp.i8.ne v1018, 0x0
      nextln:   v1045 = bool.bitwise_not v1044
      nextln:   v1046 = bool.bitwise_not v12
      nextln:   v1047 = bool.and v1046, 0x1
      nextln:   v1048 = bool.or v1047, 0x0
      nextln:   v1049 = bool.icmp.i8.ne v1018, 0x0
      nextln:   v1050 = bool.bitwise_not v1049
      nextln:   v1051 = bool.and v1048, v1050
      nextln:   v1052 = bool.icmp.i8.eq v1030, 0x1
      nextln:   v1053 = bool.and v1051, v1052
      nextln:   jumpif v1053, addr_0_block_212, addr_0_block_213
      check: addr_0_block_212: // preds: addr_0_block_211
      nextln:   jump addr_0_block_214
      check: addr_0_block_213: // preds: addr_0_block_211
      nextln:   jump addr_0_block_214
      check: addr_0_block_214: // preds: addr_0_block_212 addr_0_block_213
      nextln:   v1054 = bool.icmp.i8.ne v1018, 0x0
      nextln:   v1055 = bool.bitwise_not v1054
      nextln:   v1056 = bool.icmp.i8.ne v1018, 0x0
      nextln:   v1057 = bool.bitwise_not v1056
      nextln:   v1058 = bool.icmp.i8.eq v1030, 0x1
      nextln:   v1059 = bool.and v1057, v1058
      nextln:   jumpif v989, addr_0_block_215, addr_0_block_216
      check: addr_0_block_215: // preds: addr_0_block_214
      nextln:   v1060 = bool.icmp.i8.eq v1018, 0x0
      nextln:   jump addr_0_block_217(0x1)
      check: addr_0_block_216: // preds: addr_0_block_214
      nextln:   jump addr_0_block_217(0x0)
      check: addr_0_block_217(v1061: bool): // preds: addr_0_block_215 addr_0_block_216
      nextln:   v1062 = bool.icmp.i8.eq v1018, 0x0
      nextln:   v1063 = bool.and v990, v1062
      nextln:   jumpif v1063, addr_0_block_218, addr_0_block_219
      check: addr_0_block_218: // preds: addr_0_block_217
      nextln:   jump addr_0_block_220(0x0, 0x0)
      check: addr_0_block_219: // preds: addr_0_block_217
      nextln:   jump addr_0_block_220(0x0, 0x0)
      check: addr_0_block_220(v1064: bool, v1065: bool): // preds: addr_0_block_218 addr_0_block_219
      nextln:   v1066 = bool.or v1061, v1064
      nextln:   jumpif v1066, addr_0_block_221, addr_0_block_234
      check: addr_0_block_221: // preds: addr_0_block_220
      nextln:   v1067 = i52.unsigned_from_bits v1014
      nextln:   v1068 = int.modulo v1067, 0x8
      nextln:   v1069 = int.sub v1067, v1068
      nextln:   v1070 = i52.to_bits v1069
      nextln:   v1071 = bool.icmp.i52.eq v1014, v1070
      nextln:   v1072 = i64.load v1014
      nextln:   jumpif v1061, addr_0_block_222, addr_0_block_223
      nextln:   jump addr_0_block_235(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v1072, v991, v992, v993, v994, v995, v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1016, 0x0, 0x0)
      check: addr_0_block_222: // no preds!
      nextln:   jump addr_0_block_224
      check: addr_0_block_223: // no preds!
      nextln:   jump addr_0_block_224
      check: addr_0_block_224: // preds: addr_0_block_222 addr_0_block_223
      nextln:   jumpif v1064, addr_0_block_225, addr_0_block_226
      check: addr_0_block_225: // preds: addr_0_block_224
      nextln:   jump addr_0_block_227
      check: addr_0_block_226: // preds: addr_0_block_224
      nextln:   jump addr_0_block_227
      check: addr_0_block_227: // preds: addr_0_block_225 addr_0_block_226
      nextln:   v1383 = i52.unsigned_from_bits v1014
      nextln:   v1384 = int.modulo v1383, 0x8
      nextln:   v1385 = int.sub v1383, v1384
      nextln:   v1386 = i52.to_bits v1385
      nextln:   v1387 = bool.icmp.i52.eq v1014, v1386
      nextln:   v1388 = bool.icmp.i52.eq v1014, 0x13000000
      nextln:   jumpif v1388, addr_0_block_228, addr_0_block_232
      check: addr_0_block_228: // preds: addr_0_block_227
      nextln:   v1389 = i64.unsigned_from_bits v1072
      nextln:   v1390 = bool.icmp.int.eq v1389, 0x4
      nextln:   jumpif v1390, addr_0_block_229, addr_0_block_230
      nextln:   jump addr_0_block_233
      check: addr_0_block_229: // no preds!
      nextln:   jump addr_0_block_231
      check: addr_0_block_230: // no preds!
      nextln:   v1391 = i8.trunc.i64 v1072
      nextln:   v1392 = i8.unsigned_from_bits v1391
      nextln:   jump addr_0_block_231
      check: addr_0_block_231: // preds: addr_0_block_229 addr_0_block_230
      check: addr_0_block_232: // preds: addr_0_block_227
      nextln:   store.i64 v1072, v1014
      nextln:   jump addr_0_block_233
      check: addr_0_block_233: // preds: addr_0_block_228 addr_0_block_232
      check: addr_0_block_234: // preds: addr_0_block_220
      nextln:   jump addr_0_block_235(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_235(v1073: i8, v1074: i1, v1075: i16, v1076: i8, v1077: bool, v1078: bool, v1079: bool, v1080: int, v1081: i64, v1082: i8, v1083: i8, v1084: i52, v1085: i1, v1086: bool, v1087: bool, v1088: int, v1089: i1, v1090: bool, v1091: i4, v1092: i2, v1093: i4, v1094: i8, v1095: i8, v1096: i2, v1097: i2, v1098: bool, v1099: i2, v1100: i2, v1101: bool, v1102: bool, v1103: bool, v1104: bool, v1105: i52, v1106: i1, v1107: i64, v1108: i2, v1109: bool): // preds: addr_0_block_221 addr_0_block_234
      nextln:   v1110 = bool.icmp.i8.ne v1018, 0x0
      nextln:   v1111 = bool.bitwise_not v1110
      nextln:   v1112 = bool.and v1111, 0x1
      nextln:   v1113 = bool.icmp.i8.ne v1018, 0x0
      nextln:   v1114 = bool.bitwise_not v1113
      nextln:   v1115 = bool.and 0x1, v1114
      nextln:   jumpif v1115, addr_0_block_236, addr_0_block_237
      check: addr_0_block_236: // preds: addr_0_block_235
      nextln:   jump addr_0_block_238
      check: addr_0_block_237: // preds: addr_0_block_235
      nextln:   jump addr_0_block_238
      check: addr_0_block_238: // preds: addr_0_block_236 addr_0_block_237
      nextln:   v1116 = bool.icmp.i8.ne v1018, 0x0
      nextln:   jumpif v1116, addr_0_block_239, addr_0_block_240
      check: addr_0_block_239: // preds: addr_0_block_238
      nextln:   jump addr_0_block_241
      check: addr_0_block_240: // preds: addr_0_block_238
      nextln:   jump addr_0_block_241
      check: addr_0_block_241: // preds: addr_0_block_239 addr_0_block_240
      nextln:   v1117 = i52.unsigned_from_bits v1041
      nextln:   v1118 = int.modulo v1117, 0x1
      nextln:   v1119 = int.sub v1117, v1118
      nextln:   v1120 = i52.to_bits v1119
      nextln:   v1121 = bool.icmp.i52.eq v1041, v1120
      nextln:   v1122 = i8.load v1041
      nextln:   v1123 = i64.and v968, 0xff00ffffffffffff
      nextln:   v1124 = i8.lshl v1122, 0x30
      nextln:   v1125 = i64.or v1123, v1124
      nextln:   v1126 = i64.wrapping_add v7, 0x7
      nextln:   v1127 = i64.unsigned_from_bits v1126
      nextln:   v1128 = int.modulo v1127, 0x1
      nextln:   v1129 = int.sub v1127, v1128
      nextln:   v1130 = i64.to_bits v1129
      nextln:   v1131 = bool.icmp.i64.eq v1126, v1130
      nextln:   v1132 = i64.lshr v1126, 0x30
      nextln:   v1133 = i16.trunc.i64 v1132
      nextln:   v1134 = bool.icmp.i16.eq v1133, 0x0
      nextln:   v1135 = bool.bitwise_not v1134
      nextln:   jumpif v1135, addr_0_block_242, addr_0_block_243
      check: addr_0_block_242: // preds: addr_0_block_241
      nextln:   jump addr_0_block_244(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_245(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_243: // preds: addr_0_block_241
      nextln:   jump addr_0_block_244(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_244(v1283: i52, v1284: int, v1285: bool, v1286: bool): // preds: addr_0_block_243
      nextln:   v1287 = i52.trunc.i64 v1126
      nextln:   jump addr_0_block_245(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1287, 0x1, 0x0)
      check: addr_0_block_245(v1136: i3, v1137: i1, v1138: i1, v1139: i1, v1140: i1, v1141: i4, v1142: i1, v1143: bool, v1144: int, v1145: int, v1146: bool, v1147: bool, v1148: i8, v1149: i8, v1150: i52, v1151: i1, v1152: bool, v1153: bool, v1154: int, v1155: i1, v1156: bool, v1157: i4, v1158: i2, v1159: i4, v1160: i8, v1161: i8, v1162: i2, v1163: i2, v1164: bool, v1165: i2, v1166: i2, v1167: bool, v1168: bool, v1169: bool, v1170: bool, v1171: i52, v1172: i1, v1173: i64, v1174: i1, v1175: i8, v1176: i8, v1177: i52, v1178: i1, v1179: bool, v1180: bool, v1181: int, v1182: i1, v1183: bool, v1184: i4, v1185: i2, v1186: i4, v1187: i8, v1188: i8, v1189: i2, v1190: i2, v1191: bool, v1192: i2, v1193: i2, v1194: bool, v1195: bool, v1196: bool, v1197: bool, v1198: i52, v1199: i1, v1200: i64): // preds: addr_0_block_242 addr_0_block_244
      nextln:   v1201 = bool.icmp.i8.ne v1175, 0x0
      nextln:   v1202 = bool.bitwise_not v1201
      nextln:   v1203 = bool.bitwise_not v12
      nextln:   v1204 = bool.and v1203, 0x1
      nextln:   v1205 = bool.or v1204, 0x0
      nextln:   v1206 = bool.icmp.i8.ne v1175, 0x0
      nextln:   v1207 = bool.bitwise_not v1206
      nextln:   v1208 = bool.and v1205, v1207
      nextln:   v1209 = bool.icmp.i8.eq v1187, 0x1
      nextln:   v1210 = bool.and v1208, v1209
      nextln:   jumpif v1210, addr_0_block_246, addr_0_block_247
      check: addr_0_block_246: // preds: addr_0_block_245
      nextln:   jump addr_0_block_248
      check: addr_0_block_247: // preds: addr_0_block_245
      nextln:   jump addr_0_block_248
      check: addr_0_block_248: // preds: addr_0_block_246 addr_0_block_247
      nextln:   v1211 = bool.icmp.i8.ne v1175, 0x0
      nextln:   v1212 = bool.bitwise_not v1211
      nextln:   v1213 = bool.icmp.i8.ne v1175, 0x0
      nextln:   v1214 = bool.bitwise_not v1213
      nextln:   v1215 = bool.icmp.i8.eq v1187, 0x1
      nextln:   v1216 = bool.and v1214, v1215
      nextln:   jumpif v1146, addr_0_block_249, addr_0_block_250
      check: addr_0_block_249: // preds: addr_0_block_248
      nextln:   v1217 = bool.icmp.i8.eq v1175, 0x0
      nextln:   jump addr_0_block_251(0x1)
      check: addr_0_block_250: // preds: addr_0_block_248
      nextln:   jump addr_0_block_251(0x0)
      check: addr_0_block_251(v1218: bool): // preds: addr_0_block_249 addr_0_block_250
      nextln:   v1219 = bool.icmp.i8.eq v1175, 0x0
      nextln:   v1220 = bool.and v1147, v1219
      nextln:   jumpif v1220, addr_0_block_252, addr_0_block_253
      check: addr_0_block_252: // preds: addr_0_block_251
      nextln:   jump addr_0_block_254(0x0, 0x0)
      check: addr_0_block_253: // preds: addr_0_block_251
      nextln:   jump addr_0_block_254(0x0, 0x0)
      check: addr_0_block_254(v1221: bool, v1222: bool): // preds: addr_0_block_252 addr_0_block_253
      nextln:   v1223 = bool.or v1218, v1221
      nextln:   jumpif v1223, addr_0_block_255, addr_0_block_268
      check: addr_0_block_255: // preds: addr_0_block_254
      nextln:   v1224 = i52.unsigned_from_bits v1171
      nextln:   v1225 = int.modulo v1224, 0x8
      nextln:   v1226 = int.sub v1224, v1225
      nextln:   v1227 = i52.to_bits v1226
      nextln:   v1228 = bool.icmp.i52.eq v1171, v1227
      nextln:   v1229 = i64.load v1171
      nextln:   jumpif v1218, addr_0_block_256, addr_0_block_257
      nextln:   jump addr_0_block_269(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v1229, v1148, v1149, v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, v1161, v1162, v1163, v1164, v1165, v1166, v1167, v1168, v1169, v1170, v1171, v1172, v1173, 0x0, 0x0)
      check: addr_0_block_256: // no preds!
      nextln:   jump addr_0_block_258
      check: addr_0_block_257: // no preds!
      nextln:   jump addr_0_block_258
      check: addr_0_block_258: // preds: addr_0_block_256 addr_0_block_257
      nextln:   jumpif v1221, addr_0_block_259, addr_0_block_260
      check: addr_0_block_259: // preds: addr_0_block_258
      nextln:   jump addr_0_block_261
      check: addr_0_block_260: // preds: addr_0_block_258
      nextln:   jump addr_0_block_261
      check: addr_0_block_261: // preds: addr_0_block_259 addr_0_block_260
      nextln:   v1393 = i52.unsigned_from_bits v1171
      nextln:   v1394 = int.modulo v1393, 0x8
      nextln:   v1395 = int.sub v1393, v1394
      nextln:   v1396 = i52.to_bits v1395
      nextln:   v1397 = bool.icmp.i52.eq v1171, v1396
      nextln:   v1398 = bool.icmp.i52.eq v1171, 0x13000000
      nextln:   jumpif v1398, addr_0_block_262, addr_0_block_266
      check: addr_0_block_262: // preds: addr_0_block_261
      nextln:   v1399 = i64.unsigned_from_bits v1229
      nextln:   v1400 = bool.icmp.int.eq v1399, 0x4
      nextln:   jumpif v1400, addr_0_block_263, addr_0_block_264
      nextln:   jump addr_0_block_267
      check: addr_0_block_263: // no preds!
      nextln:   jump addr_0_block_265
      check: addr_0_block_264: // no preds!
      nextln:   v1401 = i8.trunc.i64 v1229
      nextln:   v1402 = i8.unsigned_from_bits v1401
      nextln:   jump addr_0_block_265
      check: addr_0_block_265: // preds: addr_0_block_263 addr_0_block_264
      check: addr_0_block_266: // preds: addr_0_block_261
      nextln:   store.i64 v1229, v1171
      nextln:   jump addr_0_block_267
      check: addr_0_block_267: // preds: addr_0_block_262 addr_0_block_266
      check: addr_0_block_268: // preds: addr_0_block_254
      nextln:   jump addr_0_block_269(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_269(v1230: i8, v1231: i1, v1232: i16, v1233: i8, v1234: bool, v1235: bool, v1236: bool, v1237: int, v1238: i64, v1239: i8, v1240: i8, v1241: i52, v1242: i1, v1243: bool, v1244: bool, v1245: int, v1246: i1, v1247: bool, v1248: i4, v1249: i2, v1250: i4, v1251: i8, v1252: i8, v1253: i2, v1254: i2, v1255: bool, v1256: i2, v1257: i2, v1258: bool, v1259: bool, v1260: bool, v1261: bool, v1262: i52, v1263: i1, v1264: i64, v1265: i2, v1266: bool): // preds: addr_0_block_255 addr_0_block_268
      nextln:   v1267 = bool.icmp.i8.ne v1175, 0x0
      nextln:   v1268 = bool.bitwise_not v1267
      nextln:   v1269 = bool.and v1268, 0x1
      nextln:   v1270 = bool.icmp.i8.ne v1175, 0x0
      nextln:   v1271 = bool.bitwise_not v1270
      nextln:   v1272 = bool.and 0x1, v1271
      nextln:   jumpif v1272, addr_0_block_270, addr_0_block_271
      check: addr_0_block_270: // preds: addr_0_block_269
      nextln:   jump addr_0_block_272
      check: addr_0_block_271: // preds: addr_0_block_269
      nextln:   jump addr_0_block_272
      check: addr_0_block_272: // preds: addr_0_block_270 addr_0_block_271
      nextln:   v1273 = bool.icmp.i8.ne v1175, 0x0
      nextln:   jumpif v1273, addr_0_block_273, addr_0_block_274
      check: addr_0_block_273: // preds: addr_0_block_272
      nextln:   jump addr_0_block_275
      check: addr_0_block_274: // preds: addr_0_block_272
      nextln:   jump addr_0_block_275
      check: addr_0_block_275: // preds: addr_0_block_273 addr_0_block_274
      nextln:   v1274 = i52.unsigned_from_bits v1198
      nextln:   v1275 = int.modulo v1274, 0x1
      nextln:   v1276 = int.sub v1274, v1275
      nextln:   v1277 = i52.to_bits v1276
      nextln:   v1278 = bool.icmp.i52.eq v1198, v1277
      nextln:   v1279 = i8.load v1198
      nextln:   v1280 = i64.and v1125, 0xffffffffffffff
      nextln:   v1281 = i8.lshl v1279, 0x38
      nextln:   v1282 = i64.or v1280, v1281
      check: addr_0_block_276: // preds: entry
      nextln:   v27 = i64.unsigned_from_bits v7
      nextln:   v28 = int.modulo v27, 0x8
      nextln:   v29 = int.sub v27, v28
      nextln:   v30 = i64.to_bits v29
      nextln:   v31 = bool.icmp.i64.eq v7, v30
      nextln:   v32 = i64.lshr v7, 0x30
      nextln:   v33 = i16.trunc.i64 v32
      nextln:   v34 = bool.icmp.i16.eq v33, 0x0
      nextln:   v35 = bool.bitwise_not v34
      nextln:   jumpif v35, addr_0_block_277, addr_0_block_278
      nextln:   jump addr_0_block_311(v12, 0x0, v1546)
      check: addr_0_block_277: // no preds!
      nextln:   jump addr_0_block_279(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_280(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_278: // no preds!
      nextln:   jump addr_0_block_279(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_279(v1547: i52, v1548: int, v1549: bool, v1550: bool): // preds: addr_0_block_278
      nextln:   v1551 = i52.trunc.i64 v7
      nextln:   jump addr_0_block_280(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1551, 0x1, 0x0)
      check: addr_0_block_280(v1403: i3, v1404: i1, v1405: i1, v1406: i1, v1407: i1, v1408: i4, v1409: i1, v1410: bool, v1411: int, v1412: int, v1413: bool, v1414: bool, v1415: i8, v1416: i8, v1417: i52, v1418: i1, v1419: bool, v1420: bool, v1421: int, v1422: i1, v1423: bool, v1424: i4, v1425: i2, v1426: i4, v1427: i8, v1428: i8, v1429: i2, v1430: i2, v1431: bool, v1432: i2, v1433: i2, v1434: bool, v1435: bool, v1436: bool, v1437: bool, v1438: i52, v1439: i1, v1440: i64, v1441: i1, v1442: i8, v1443: i8, v1444: i52, v1445: i1, v1446: bool, v1447: bool, v1448: int, v1449: i1, v1450: bool, v1451: i4, v1452: i2, v1453: i4, v1454: i8, v1455: i8, v1456: i2, v1457: i2, v1458: bool, v1459: i2, v1460: i2, v1461: bool, v1462: bool, v1463: bool, v1464: bool, v1465: i52, v1466: i1, v1467: i64): // preds: addr_0_block_277 addr_0_block_279
      nextln:   v1468 = bool.icmp.i8.ne v1442, 0x0
      nextln:   v1469 = bool.bitwise_not v1468
      nextln:   v1470 = bool.bitwise_not v12
      nextln:   v1471 = bool.and v1470, 0x1
      nextln:   v1472 = bool.or v1471, 0x0
      nextln:   v1473 = bool.icmp.i8.ne v1442, 0x0
      nextln:   v1474 = bool.bitwise_not v1473
      nextln:   v1475 = bool.and v1472, v1474
      nextln:   v1476 = bool.icmp.i8.eq v1454, 0x1
      nextln:   v1477 = bool.and v1475, v1476
      nextln:   jumpif v1477, addr_0_block_281, addr_0_block_282
      check: addr_0_block_281: // preds: addr_0_block_280
      nextln:   jump addr_0_block_283
      check: addr_0_block_282: // preds: addr_0_block_280
      nextln:   jump addr_0_block_283
      check: addr_0_block_283: // preds: addr_0_block_281 addr_0_block_282
      nextln:   v1478 = bool.icmp.i8.ne v1442, 0x0
      nextln:   v1479 = bool.bitwise_not v1478
      nextln:   v1480 = bool.icmp.i8.ne v1442, 0x0
      nextln:   v1481 = bool.bitwise_not v1480
      nextln:   v1482 = bool.icmp.i8.eq v1454, 0x1
      nextln:   v1483 = bool.and v1481, v1482
      nextln:   jumpif v1413, addr_0_block_284, addr_0_block_285
      check: addr_0_block_284: // preds: addr_0_block_283
      nextln:   v1484 = bool.icmp.i8.eq v1442, 0x0
      nextln:   jump addr_0_block_286(0x1)
      check: addr_0_block_285: // preds: addr_0_block_283
      nextln:   jump addr_0_block_286(0x0)
      check: addr_0_block_286(v1485: bool): // preds: addr_0_block_284 addr_0_block_285
      nextln:   v1486 = bool.icmp.i8.eq v1442, 0x0
      nextln:   v1487 = bool.and v1414, v1486
      nextln:   jumpif v1487, addr_0_block_287, addr_0_block_288
      check: addr_0_block_287: // preds: addr_0_block_286
      nextln:   jump addr_0_block_289(0x0, 0x0)
      check: addr_0_block_288: // preds: addr_0_block_286
      nextln:   jump addr_0_block_289(0x0, 0x0)
      check: addr_0_block_289(v1488: bool, v1489: bool): // preds: addr_0_block_287 addr_0_block_288
      nextln:   v1490 = bool.or v1485, v1488
      nextln:   jumpif v1490, addr_0_block_290, addr_0_block_303
      check: addr_0_block_290: // preds: addr_0_block_289
      nextln:   v1491 = i52.unsigned_from_bits v1438
      nextln:   v1492 = int.modulo v1491, 0x8
      nextln:   v1493 = int.sub v1491, v1492
      nextln:   v1494 = i52.to_bits v1493
      nextln:   v1495 = bool.icmp.i52.eq v1438, v1494
      nextln:   v1496 = i64.load v1438
      nextln:   jumpif v1485, addr_0_block_291, addr_0_block_292
      nextln:   jump addr_0_block_304(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v1496, v1415, v1416, v1417, v1418, v1419, v1420, v1421, v1422, v1423, v1424, v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, 0x0, 0x0)
      check: addr_0_block_291: // no preds!
      nextln:   jump addr_0_block_293
      check: addr_0_block_292: // no preds!
      nextln:   jump addr_0_block_293
      check: addr_0_block_293: // preds: addr_0_block_291 addr_0_block_292
      nextln:   jumpif v1488, addr_0_block_294, addr_0_block_295
      check: addr_0_block_294: // preds: addr_0_block_293
      nextln:   jump addr_0_block_296
      check: addr_0_block_295: // preds: addr_0_block_293
      nextln:   jump addr_0_block_296
      check: addr_0_block_296: // preds: addr_0_block_294 addr_0_block_295
      nextln:   v1552 = i52.unsigned_from_bits v1438
      nextln:   v1553 = int.modulo v1552, 0x8
      nextln:   v1554 = int.sub v1552, v1553
      nextln:   v1555 = i52.to_bits v1554
      nextln:   v1556 = bool.icmp.i52.eq v1438, v1555
      nextln:   v1557 = bool.icmp.i52.eq v1438, 0x13000000
      nextln:   jumpif v1557, addr_0_block_297, addr_0_block_301
      check: addr_0_block_297: // preds: addr_0_block_296
      nextln:   v1558 = i64.unsigned_from_bits v1496
      nextln:   v1559 = bool.icmp.int.eq v1558, 0x4
      nextln:   jumpif v1559, addr_0_block_298, addr_0_block_299
      nextln:   jump addr_0_block_302
      check: addr_0_block_298: // no preds!
      nextln:   jump addr_0_block_300
      check: addr_0_block_299: // no preds!
      nextln:   v1560 = i8.trunc.i64 v1496
      nextln:   v1561 = i8.unsigned_from_bits v1560
      nextln:   jump addr_0_block_300
      check: addr_0_block_300: // preds: addr_0_block_298 addr_0_block_299
      check: addr_0_block_301: // preds: addr_0_block_296
      nextln:   store.i64 v1496, v1438
      nextln:   jump addr_0_block_302
      check: addr_0_block_302: // preds: addr_0_block_297 addr_0_block_301
      check: addr_0_block_303: // preds: addr_0_block_289
      nextln:   jump addr_0_block_304(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_304(v1497: i8, v1498: i1, v1499: i16, v1500: i8, v1501: bool, v1502: bool, v1503: bool, v1504: int, v1505: i64, v1506: i8, v1507: i8, v1508: i52, v1509: i1, v1510: bool, v1511: bool, v1512: int, v1513: i1, v1514: bool, v1515: i4, v1516: i2, v1517: i4, v1518: i8, v1519: i8, v1520: i2, v1521: i2, v1522: bool, v1523: i2, v1524: i2, v1525: bool, v1526: bool, v1527: bool, v1528: bool, v1529: i52, v1530: i1, v1531: i64, v1532: i2, v1533: bool): // preds: addr_0_block_290 addr_0_block_303
      nextln:   v1534 = bool.icmp.i8.ne v1442, 0x0
      nextln:   v1535 = bool.bitwise_not v1534
      nextln:   v1536 = bool.and v1535, 0x1
      nextln:   v1537 = bool.icmp.i8.ne v1442, 0x0
      nextln:   v1538 = bool.bitwise_not v1537
      nextln:   v1539 = bool.and 0x1, v1538
      nextln:   jumpif v1539, addr_0_block_305, addr_0_block_306
      check: addr_0_block_305: // preds: addr_0_block_304
      nextln:   jump addr_0_block_307
      check: addr_0_block_306: // preds: addr_0_block_304
      nextln:   jump addr_0_block_307
      check: addr_0_block_307: // preds: addr_0_block_305 addr_0_block_306
      nextln:   v1540 = bool.icmp.i8.ne v1442, 0x0
      nextln:   jumpif v1540, addr_0_block_308, addr_0_block_309
      check: addr_0_block_308: // preds: addr_0_block_307
      nextln:   jump addr_0_block_310
      check: addr_0_block_309: // preds: addr_0_block_307
      nextln:   jump addr_0_block_310
      check: addr_0_block_310: // preds: addr_0_block_308 addr_0_block_309
      nextln:   v1541 = i52.unsigned_from_bits v1465
      nextln:   v1542 = int.modulo v1541, 0x8
      nextln:   v1543 = int.sub v1541, v1542
      nextln:   v1544 = i52.to_bits v1543
      nextln:   v1545 = bool.icmp.i52.eq v1465, v1544
      nextln:   v1546 = i64.load v1465
      check: addr_0_block_311(v24: i64, v25: i8, v26: i64): // preds: addr_0_block_0 addr_0_block_276
      nextln:   write_reg.i64 v26, "x1"
- name: ldur_3
  bytes: [0x41, 0x40, 0x40, 0xf8]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x2"
      nextln:   v1 = i64.wrapping_add v0, 0x4
      nextln:   v2 = i64.unsigned_from_bits v1
      nextln:   v3 = int.modulo v2, 0x8
      nextln:   v4 = int.sub v2, v3
      nextln:   v5 = i64.to_bits v4
      nextln:   v6 = bool.icmp.i64.eq v1, v5
      nextln:   v7 = bool.bitwise_not v6
      nextln:   v8 = bool.bitwise_not v6
      nextln:   jumpif v8, addr_0_block_0, addr_0_block_276
      check: addr_0_block_0: // preds: entry
      nextln:   v9 = i64.unsigned_from_bits v1
      nextln:   v10 = int.modulo v9, 0x1
      nextln:   v11 = int.sub v9, v10
      nextln:   v12 = i64.to_bits v11
      nextln:   v13 = bool.icmp.i64.eq v1, v12
      nextln:   v14 = i64.lshr v1, 0x30
      nextln:   v15 = i16.trunc.i64 v14
      nextln:   v16 = bool.icmp.i16.eq v15, 0x0
      nextln:   v17 = bool.bitwise_not v16
      nextln:   jumpif v17, addr_0_block_1, addr_0_block_2
      nextln:   jump addr_0_block_311(v177, v178, v1276)
      check: addr_0_block_1: // no preds!
      nextln:   jump addr_0_block_3(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_4(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_2: // no preds!
      nextln:   jump addr_0_block_3(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_3(v1312: i52, v1313: int, v1314: bool, v1315: bool): // preds: addr_0_block_2
      nextln:   v1316 = i52.trunc.i64 v1
      nextln:   jump addr_0_block_4(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1316, 0x1, 0x0)
      check: addr_0_block_4(v30: i3, v31: i1, v32: i1, v33: i1, v34: i1, v35: i4, v36: i1, v37: bool, v38: int, v39: int, v40: bool, v41: bool, v42: i8, v43: i8, v44: i52, v45: i1, v46: bool, v47: bool, v48: int, v49: i1, v50: bool, v51: i4, v52: i2, v53: i4, v54: i8, v55: i8, v56: i2, v57: i2, v58: bool, v59: i2, v60: i2, v61: bool, v62: bool, v63: bool, v64: bool, v65: i52, v66: i1, v67: i64, v68: i1, v69: i8, v70: i8, v71: i52, v72: i1, v73: bool, v74: bool, v75: int, v76: i1, v77: bool, v78: i4, v79: i2, v80: i4, v81: i8, v82: i8, v83: i2, v84: i2, v85: bool, v86: i2, v87: i2, v88: bool, v89: bool, v90: bool, v91: bool, v92: i52, v93: i1, v94: i64): // preds: addr_0_block_1 addr_0_block_3
      nextln:   v95 = bool.icmp.i8.ne v69, 0x0
      nextln:   v96 = bool.bitwise_not v95
      nextln:   v97 = bool.bitwise_not v6
      nextln:   v98 = bool.and v97, 0x1
      nextln:   v99 = bool.or v98, 0x0
      nextln:   v100 = bool.icmp.i8.ne v69, 0x0
      nextln:   v101 = bool.bitwise_not v100
      nextln:   v102 = bool.and v99, v101
      nextln:   v103 = bool.icmp.i8.eq v81, 0x1
      nextln:   v104 = bool.and v102, v103
      nextln:   jumpif v104, addr_0_block_5, addr_0_block_6
      check: addr_0_block_5: // preds: addr_0_block_4
      nextln:   jump addr_0_block_7
      check: addr_0_block_6: // preds: addr_0_block_4
      nextln:   jump addr_0_block_7
      check: addr_0_block_7: // preds: addr_0_block_5 addr_0_block_6
      nextln:   v105 = bool.icmp.i8.ne v69, 0x0
      nextln:   v106 = bool.bitwise_not v105
      nextln:   v107 = bool.icmp.i8.ne v69, 0x0
      nextln:   v108 = bool.bitwise_not v107
      nextln:   v109 = bool.icmp.i8.eq v81, 0x1
      nextln:   v110 = bool.and v108, v109
      nextln:   jumpif v40, addr_0_block_8, addr_0_block_9
      check: addr_0_block_8: // preds: addr_0_block_7
      nextln:   v111 = bool.icmp.i8.eq v69, 0x0
      nextln:   jump addr_0_block_10(0x1)
      check: addr_0_block_9: // preds: addr_0_block_7
      nextln:   jump addr_0_block_10(0x0)
      check: addr_0_block_10(v112: bool): // preds: addr_0_block_8 addr_0_block_9
      nextln:   v113 = bool.icmp.i8.eq v69, 0x0
      nextln:   v114 = bool.and v41, v113
      nextln:   jumpif v114, addr_0_block_11, addr_0_block_12
      check: addr_0_block_11: // preds: addr_0_block_10
      nextln:   jump addr_0_block_13(0x0, 0x0)
      check: addr_0_block_12: // preds: addr_0_block_10
      nextln:   jump addr_0_block_13(0x0, 0x0)
      check: addr_0_block_13(v115: bool, v116: bool): // preds: addr_0_block_11 addr_0_block_12
      nextln:   v117 = bool.or v112, v115
      nextln:   jumpif v117, addr_0_block_14, addr_0_block_27
      check: addr_0_block_14: // preds: addr_0_block_13
      nextln:   v118 = i52.unsigned_from_bits v65
      nextln:   v119 = int.modulo v118, 0x8
      nextln:   v120 = int.sub v118, v119
      nextln:   v121 = i52.to_bits v120
      nextln:   v122 = bool.icmp.i52.eq v65, v121
      nextln:   v123 = i64.load v65
      nextln:   jumpif v112, addr_0_block_15, addr_0_block_16
      nextln:   jump addr_0_block_28(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v123, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, 0x0, 0x0)
      check: addr_0_block_15: // no preds!
      nextln:   jump addr_0_block_17
      check: addr_0_block_16: // no preds!
      nextln:   jump addr_0_block_17
      check: addr_0_block_17: // preds: addr_0_block_15 addr_0_block_16
      nextln:   jumpif v115, addr_0_block_18, addr_0_block_19
      check: addr_0_block_18: // preds: addr_0_block_17
      nextln:   jump addr_0_block_20
      check: addr_0_block_19: // preds: addr_0_block_17
      nextln:   jump addr_0_block_20
      check: addr_0_block_20: // preds: addr_0_block_18 addr_0_block_19
      nextln:   v1317 = i52.unsigned_from_bits v65
      nextln:   v1318 = int.modulo v1317, 0x8
      nextln:   v1319 = int.sub v1317, v1318
      nextln:   v1320 = i52.to_bits v1319
      nextln:   v1321 = bool.icmp.i52.eq v65, v1320
      nextln:   v1322 = bool.icmp.i52.eq v65, 0x13000000
      nextln:   jumpif v1322, addr_0_block_21, addr_0_block_25
      check: addr_0_block_21: // preds: addr_0_block_20
      nextln:   v1323 = i64.unsigned_from_bits v123
      nextln:   v1324 = bool.icmp.int.eq v1323, 0x4
      nextln:   jumpif v1324, addr_0_block_22, addr_0_block_23
      nextln:   jump addr_0_block_26
      check: addr_0_block_22: // no preds!
      nextln:   jump addr_0_block_24
      check: addr_0_block_23: // no preds!
      nextln:   v1325 = i8.trunc.i64 v123
      nextln:   v1326 = i8.unsigned_from_bits v1325
      nextln:   jump addr_0_block_24
      check: addr_0_block_24: // preds: addr_0_block_22 addr_0_block_23
      check: addr_0_block_25: // preds: addr_0_block_20
      nextln:   store.i64 v123, v65
      nextln:   jump addr_0_block_26
      check: addr_0_block_26: // preds: addr_0_block_21 addr_0_block_25
      check: addr_0_block_27: // preds: addr_0_block_13
      nextln:   jump addr_0_block_28(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_28(v124: i8, v125: i1, v126: i16, v127: i8, v128: bool, v129: bool, v130: bool, v131: int, v132: i64, v133: i8, v134: i8, v135: i52, v136: i1, v137: bool, v138: bool, v139: int, v140: i1, v141: bool, v142: i4, v143: i2, v144: i4, v145: i8, v146: i8, v147: i2, v148: i2, v149: bool, v150: i2, v151: i2, v152: bool, v153: bool, v154: bool, v155: bool, v156: i52, v157: i1, v158: i64, v159: i2, v160: bool): // preds: addr_0_block_14 addr_0_block_27
      nextln:   v161 = bool.icmp.i8.ne v69, 0x0
      nextln:   v162 = bool.bitwise_not v161
      nextln:   v163 = bool.and v162, 0x1
      nextln:   v164 = bool.icmp.i8.ne v69, 0x0
      nextln:   v165 = bool.bitwise_not v164
      nextln:   v166 = bool.and 0x1, v165
      nextln:   jumpif v166, addr_0_block_29, addr_0_block_30
      check: addr_0_block_29: // preds: addr_0_block_28
      nextln:   jump addr_0_block_31
      check: addr_0_block_30: // preds: addr_0_block_28
      nextln:   jump addr_0_block_31
      check: addr_0_block_31: // preds: addr_0_block_29 addr_0_block_30
      nextln:   v167 = bool.icmp.i8.ne v69, 0x0
      nextln:   jumpif v167, addr_0_block_32, addr_0_block_33
      check: addr_0_block_32: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_33: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_34: // preds: addr_0_block_32 addr_0_block_33
      nextln:   v168 = i52.unsigned_from_bits v92
      nextln:   v169 = int.modulo v168, 0x1
      nextln:   v170 = int.sub v168, v169
      nextln:   v171 = i52.to_bits v170
      nextln:   v172 = bool.icmp.i52.eq v92, v171
      nextln:   v173 = i8.load v92
      nextln:   v174 = i8.lshl v173, 0x0
      nextln:   v175 = i64.or 0x0, v174
      nextln:   v176 = bool.bitwise_not v6
      nextln:   jumpif v176, addr_0_block_35, addr_0_block_36
      check: addr_0_block_35: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37(v6, 0xc)
      check: addr_0_block_36: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37(v6, 0x0)
      check: addr_0_block_37(v177: i64, v178: i8): // preds: addr_0_block_35 addr_0_block_36
      nextln:   v179 = i64.wrapping_add v1, 0x1
      nextln:   v180 = i64.unsigned_from_bits v179
      nextln:   v181 = int.modulo v180, 0x1
      nextln:   v182 = int.sub v180, v181
      nextln:   v183 = i64.to_bits v182
      nextln:   v184 = bool.icmp.i64.eq v179, v183
      nextln:   v185 = i64.lshr v179, 0x30
      nextln:   v186 = i16.trunc.i64 v185
      nextln:   v187 = bool.icmp.i16.eq v186, 0x0
      nextln:   v188 = bool.bitwise_not v187
      nextln:   jumpif v188, addr_0_block_38, addr_0_block_39
      check: addr_0_block_38: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_41(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_39: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_40(v1307: i52, v1308: int, v1309: bool, v1310: bool): // preds: addr_0_block_39
      nextln:   v1311 = i52.trunc.i64 v179
      nextln:   jump addr_0_block_41(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1311, 0x1, 0x0)
      check: addr_0_block_41(v189: i3, v190: i1, v191: i1, v192: i1, v193: i1, v194: i4, v195: i1, v196: bool, v197: int, v198: int, v199: bool, v200: bool, v201: i8, v202: i8, v203: i52, v204: i1, v205: bool, v206: bool, v207: int, v208: i1, v209: bool, v210: i4, v211: i2, v212: i4, v213: i8, v214: i8, v215: i2, v216: i2, v217: bool, v218: i2, v219: i2, v220: bool, v221: bool, v222: bool, v223: bool, v224: i52, v225: i1, v226: i64, v227: i1, v228: i8, v229: i8, v230: i52, v231: i1, v232: bool, v233: bool, v234: int, v235: i1, v236: bool, v237: i4, v238: i2, v239: i4, v240: i8, v241: i8, v242: i2, v243: i2, v244: bool, v245: i2, v246: i2, v247: bool, v248: bool, v249: bool, v250: bool, v251: i52, v252: i1, v253: i64): // preds: addr_0_block_38 addr_0_block_40
      nextln:   v254 = bool.icmp.i8.ne v228, 0x0
      nextln:   v255 = bool.bitwise_not v254
      nextln:   v256 = bool.bitwise_not v6
      nextln:   v257 = bool.and v256, 0x1
      nextln:   v258 = bool.or v257, 0x0
      nextln:   v259 = bool.icmp.i8.ne v228, 0x0
      nextln:   v260 = bool.bitwise_not v259
      nextln:   v261 = bool.and v258, v260
      nextln:   v262 = bool.icmp.i8.eq v240, 0x1
      nextln:   v263 = bool.and v261, v262
      nextln:   jumpif v263, addr_0_block_42, addr_0_block_43
      check: addr_0_block_42: // preds: addr_0_block_41
      nextln:   jump addr_0_block_44
      check: addr_0_block_43: // preds: addr_0_block_41
      nextln:   jump addr_0_block_44
      check: addr_0_block_44: // preds: addr_0_block_42 addr_0_block_43
      nextln:   v264 = bool.icmp.i8.ne v228, 0x0
      nextln:   v265 = bool.bitwise_not v264
      nextln:   v266 = bool.icmp.i8.ne v228, 0x0
      nextln:   v267 = bool.bitwise_not v266
      nextln:   v268 = bool.icmp.i8.eq v240, 0x1
      nextln:   v269 = bool.and v267, v268
      nextln:   jumpif v199, addr_0_block_45, addr_0_block_46
      check: addr_0_block_45: // preds: addr_0_block_44
      nextln:   v270 = bool.icmp.i8.eq v228, 0x0
      nextln:   jump addr_0_block_47(0x1)
      check: addr_0_block_46: // preds: addr_0_block_44
      nextln:   jump addr_0_block_47(0x0)
      check: addr_0_block_47(v271: bool): // preds: addr_0_block_45 addr_0_block_46
      nextln:   v272 = bool.icmp.i8.eq v228, 0x0
      nextln:   v273 = bool.and v200, v272
      nextln:   jumpif v273, addr_0_block_48, addr_0_block_49
      check: addr_0_block_48: // preds: addr_0_block_47
      nextln:   jump addr_0_block_50(0x0, 0x0)
      check: addr_0_block_49: // preds: addr_0_block_47
      nextln:   jump addr_0_block_50(0x0, 0x0)
      check: addr_0_block_50(v274: bool, v275: bool): // preds: addr_0_block_48 addr_0_block_49
      nextln:   v276 = bool.or v271, v274
      nextln:   jumpif v276, addr_0_block_51, addr_0_block_64
      check: addr_0_block_51: // preds: addr_0_block_50
      nextln:   v277 = i52.unsigned_from_bits v224
      nextln:   v278 = int.modulo v277, 0x8
      nextln:   v279 = int.sub v277, v278
      nextln:   v280 = i52.to_bits v279
      nextln:   v281 = bool.icmp.i52.eq v224, v280
      nextln:   v282 = i64.load v224
      nextln:   jumpif v271, addr_0_block_52, addr_0_block_53
      nextln:   jump addr_0_block_65(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v282, v201, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, 0x0, 0x0)
      check: addr_0_block_52: // no preds!
      nextln:   jump addr_0_block_54
      check: addr_0_block_53: // no preds!
      nextln:   jump addr_0_block_54
      check: addr_0_block_54: // preds: addr_0_block_52 addr_0_block_53
      nextln:   jumpif v274, addr_0_block_55, addr_0_block_56
      check: addr_0_block_55: // preds: addr_0_block_54
      nextln:   jump addr_0_block_57
      check: addr_0_block_56: // preds: addr_0_block_54
      nextln:   jump addr_0_block_57
      check: addr_0_block_57: // preds: addr_0_block_55 addr_0_block_56
      nextln:   v1327 = i52.unsigned_from_bits v224
      nextln:   v1328 = int.modulo v1327, 0x8
      nextln:   v1329 = int.sub v1327, v1328
      nextln:   v1330 = i52.to_bits v1329
      nextln:   v1331 = bool.icmp.i52.eq v224, v1330
      nextln:   v1332 = bool.icmp.i52.eq v224, 0x13000000
      nextln:   jumpif v1332, addr_0_block_58, addr_0_block_62
      check: addr_0_block_58: // preds: addr_0_block_57
      nextln:   v1333 = i64.unsigned_from_bits v282
      nextln:   v1334 = bool.icmp.int.eq v1333, 0x4
      nextln:   jumpif v1334, addr_0_block_59, addr_0_block_60
      nextln:   jump addr_0_block_63
      check: addr_0_block_59: // no preds!
      nextln:   jump addr_0_block_61
      check: addr_0_block_60: // no preds!
      nextln:   v1335 = i8.trunc.i64 v282
      nextln:   v1336 = i8.unsigned_from_bits v1335
      nextln:   jump addr_0_block_61
      check: addr_0_block_61: // preds: addr_0_block_59 addr_0_block_60
      check: addr_0_block_62: // preds: addr_0_block_57
      nextln:   store.i64 v282, v224
      nextln:   jump addr_0_block_63
      check: addr_0_block_63: // preds: addr_0_block_58 addr_0_block_62
      check: addr_0_block_64: // preds: addr_0_block_50
      nextln:   jump addr_0_block_65(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_65(v283: i8, v284: i1, v285: i16, v286: i8, v287: bool, v288: bool, v289: bool, v290: int, v291: i64, v292: i8, v293: i8, v294: i52, v295: i1, v296: bool, v297: bool, v298: int, v299: i1, v300: bool, v301: i4, v302: i2, v303: i4, v304: i8, v305: i8, v306: i2, v307: i2, v308: bool, v309: i2, v310: i2, v311: bool, v312: bool, v313: bool, v314: bool, v315: i52, v316: i1, v317: i64, v318: i2, v319: bool): // preds: addr_0_block_51 addr_0_block_64
      nextln:   v320 = bool.icmp.i8.ne v228, 0x0
      nextln:   v321 = bool.bitwise_not v320
      nextln:   v322 = bool.and v321, 0x1
      nextln:   v323 = bool.icmp.i8.ne v228, 0x0
      nextln:   v324 = bool.bitwise_not v323
      nextln:   v325 = bool.and 0x1, v324
      nextln:   jumpif v325, addr_0_block_66, addr_0_block_67
      check: addr_0_block_66: // preds: addr_0_block_65
      nextln:   jump addr_0_block_68
      check: addr_0_block_67: // preds: addr_0_block_65
      nextln:   jump addr_0_block_68
      check: addr_0_block_68: // preds: addr_0_block_66 addr_0_block_67
      nextln:   v326 = bool.icmp.i8.ne v228, 0x0
      nextln:   jumpif v326, addr_0_block_69, addr_0_block_70
      check: addr_0_block_69: // preds: addr_0_block_68
      nextln:   jump addr_0_block_71
      check: addr_0_block_70: // preds: addr_0_block_68
      nextln:   jump addr_0_block_71
      check: addr_0_block_71: // preds: addr_0_block_69 addr_0_block_70
      nextln:   v327 = i52.unsigned_from_bits v251
      nextln:   v328 = int.modulo v327, 0x1
      nextln:   v329 = int.sub v327, v328
      nextln:   v330 = i52.to_bits v329
      nextln:   v331 = bool.icmp.i52.eq v251, v330
      nextln:   v332 = i8.load v251
      nextln:   v333 = i8.lshl v332, 0x8
      nextln:   v334 = i64.or 0x0, v333
      nextln:   v335 = i64.wrapping_add v1, 0x2
      nextln:   v336 = i64.unsigned_from_bits v335
      nextln:   v337 = int.modulo v336, 0x1
      nextln:   v338 = int.sub v336, v337
      nextln:   v339 = i64.to_bits v338
      nextln:   v340 = bool.icmp.i64.eq v335, v339
      nextln:   v341 = i64.lshr v335, 0x30
      nextln:   v342 = i16.trunc.i64 v341
      nextln:   v343 = bool.icmp.i16.eq v342, 0x0
      nextln:   v344 = bool.bitwise_not v343
      nextln:   jumpif v344, addr_0_block_72, addr_0_block_73
      check: addr_0_block_72: // preds: addr_0_block_71
      nextln:   jump addr_0_block_74(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_75(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_73: // preds: addr_0_block_71
      nextln:   jump addr_0_block_74(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_74(v1302: i52, v1303: int, v1304: bool, v1305: bool): // preds: addr_0_block_73
      nextln:   v1306 = i52.trunc.i64 v335
      nextln:   jump addr_0_block_75(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1306, 0x1, 0x0)
      check: addr_0_block_75(v345: i3, v346: i1, v347: i1, v348: i1, v349: i1, v350: i4, v351: i1, v352: bool, v353: int, v354: int, v355: bool, v356: bool, v357: i8, v358: i8, v359: i52, v360: i1, v361: bool, v362: bool, v363: int, v364: i1, v365: bool, v366: i4, v367: i2, v368: i4, v369: i8, v370: i8, v371: i2, v372: i2, v373: bool, v374: i2, v375: i2, v376: bool, v377: bool, v378: bool, v379: bool, v380: i52, v381: i1, v382: i64, v383: i1, v384: i8, v385: i8, v386: i52, v387: i1, v388: bool, v389: bool, v390: int, v391: i1, v392: bool, v393: i4, v394: i2, v395: i4, v396: i8, v397: i8, v398: i2, v399: i2, v400: bool, v401: i2, v402: i2, v403: bool, v404: bool, v405: bool, v406: bool, v407: i52, v408: i1, v409: i64): // preds: addr_0_block_72 addr_0_block_74
      nextln:   v410 = bool.icmp.i8.ne v384, 0x0
      nextln:   v411 = bool.bitwise_not v410
      nextln:   v412 = bool.bitwise_not v6
      nextln:   v413 = bool.and v412, 0x1
      nextln:   v414 = bool.or v413, 0x0
      nextln:   v415 = bool.icmp.i8.ne v384, 0x0
      nextln:   v416 = bool.bitwise_not v415
      nextln:   v417 = bool.and v414, v416
      nextln:   v418 = bool.icmp.i8.eq v396, 0x1
      nextln:   v419 = bool.and v417, v418
      nextln:   jumpif v419, addr_0_block_76, addr_0_block_77
      check: addr_0_block_76: // preds: addr_0_block_75
      nextln:   jump addr_0_block_78
      check: addr_0_block_77: // preds: addr_0_block_75
      nextln:   jump addr_0_block_78
      check: addr_0_block_78: // preds: addr_0_block_76 addr_0_block_77
      nextln:   v420 = bool.icmp.i8.ne v384, 0x0
      nextln:   v421 = bool.bitwise_not v420
      nextln:   v422 = bool.icmp.i8.ne v384, 0x0
      nextln:   v423 = bool.bitwise_not v422
      nextln:   v424 = bool.icmp.i8.eq v396, 0x1
      nextln:   v425 = bool.and v423, v424
      nextln:   jumpif v355, addr_0_block_79, addr_0_block_80
      check: addr_0_block_79: // preds: addr_0_block_78
      nextln:   v426 = bool.icmp.i8.eq v384, 0x0
      nextln:   jump addr_0_block_81(0x1)
      check: addr_0_block_80: // preds: addr_0_block_78
      nextln:   jump addr_0_block_81(0x0)
      check: addr_0_block_81(v427: bool): // preds: addr_0_block_79 addr_0_block_80
      nextln:   v428 = bool.icmp.i8.eq v384, 0x0
      nextln:   v429 = bool.and v356, v428
      nextln:   jumpif v429, addr_0_block_82, addr_0_block_83
      check: addr_0_block_82: // preds: addr_0_block_81
      nextln:   jump addr_0_block_84(0x0, 0x0)
      check: addr_0_block_83: // preds: addr_0_block_81
      nextln:   jump addr_0_block_84(0x0, 0x0)
      check: addr_0_block_84(v430: bool, v431: bool): // preds: addr_0_block_82 addr_0_block_83
      nextln:   v432 = bool.or v427, v430
      nextln:   jumpif v432, addr_0_block_85, addr_0_block_98
      check: addr_0_block_85: // preds: addr_0_block_84
      nextln:   v433 = i52.unsigned_from_bits v380
      nextln:   v434 = int.modulo v433, 0x8
      nextln:   v435 = int.sub v433, v434
      nextln:   v436 = i52.to_bits v435
      nextln:   v437 = bool.icmp.i52.eq v380, v436
      nextln:   v438 = i64.load v380
      nextln:   jumpif v427, addr_0_block_86, addr_0_block_87
      nextln:   jump addr_0_block_99(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v438, v357, v358, v359, v360, v361, v362, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, v382, 0x0, 0x0)
      check: addr_0_block_86: // no preds!
      nextln:   jump addr_0_block_88
      check: addr_0_block_87: // no preds!
      nextln:   jump addr_0_block_88
      check: addr_0_block_88: // preds: addr_0_block_86 addr_0_block_87
      nextln:   jumpif v430, addr_0_block_89, addr_0_block_90
      check: addr_0_block_89: // preds: addr_0_block_88
      nextln:   jump addr_0_block_91
      check: addr_0_block_90: // preds: addr_0_block_88
      nextln:   jump addr_0_block_91
      check: addr_0_block_91: // preds: addr_0_block_89 addr_0_block_90
      nextln:   v1337 = i52.unsigned_from_bits v380
      nextln:   v1338 = int.modulo v1337, 0x8
      nextln:   v1339 = int.sub v1337, v1338
      nextln:   v1340 = i52.to_bits v1339
      nextln:   v1341 = bool.icmp.i52.eq v380, v1340
      nextln:   v1342 = bool.icmp.i52.eq v380, 0x13000000
      nextln:   jumpif v1342, addr_0_block_92, addr_0_block_96
      check: addr_0_block_92: // preds: addr_0_block_91
      nextln:   v1343 = i64.unsigned_from_bits v438
      nextln:   v1344 = bool.icmp.int.eq v1343, 0x4
      nextln:   jumpif v1344, addr_0_block_93, addr_0_block_94
      nextln:   jump addr_0_block_97
      check: addr_0_block_93: // no preds!
      nextln:   jump addr_0_block_95
      check: addr_0_block_94: // no preds!
      nextln:   v1345 = i8.trunc.i64 v438
      nextln:   v1346 = i8.unsigned_from_bits v1345
      nextln:   jump addr_0_block_95
      check: addr_0_block_95: // preds: addr_0_block_93 addr_0_block_94
      check: addr_0_block_96: // preds: addr_0_block_91
      nextln:   store.i64 v438, v380
      nextln:   jump addr_0_block_97
      check: addr_0_block_97: // preds: addr_0_block_92 addr_0_block_96
      check: addr_0_block_98: // preds: addr_0_block_84
      nextln:   jump addr_0_block_99(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_99(v439: i8, v440: i1, v441: i16, v442: i8, v443: bool, v444: bool, v445: bool, v446: int, v447: i64, v448: i8, v449: i8, v450: i52, v451: i1, v452: bool, v453: bool, v454: int, v455: i1, v456: bool, v457: i4, v458: i2, v459: i4, v460: i8, v461: i8, v462: i2, v463: i2, v464: bool, v465: i2, v466: i2, v467: bool, v468: bool, v469: bool, v470: bool, v471: i52, v472: i1, v473: i64, v474: i2, v475: bool): // preds: addr_0_block_85 addr_0_block_98
      nextln:   v476 = bool.icmp.i8.ne v384, 0x0
      nextln:   v477 = bool.bitwise_not v476
      nextln:   v478 = bool.and v477, 0x1
      nextln:   v479 = bool.icmp.i8.ne v384, 0x0
      nextln:   v480 = bool.bitwise_not v479
      nextln:   v481 = bool.and 0x1, v480
      nextln:   jumpif v481, addr_0_block_100, addr_0_block_101
      check: addr_0_block_100: // preds: addr_0_block_99
      nextln:   jump addr_0_block_102
      check: addr_0_block_101: // preds: addr_0_block_99
      nextln:   jump addr_0_block_102
      check: addr_0_block_102: // preds: addr_0_block_100 addr_0_block_101
      nextln:   v482 = bool.icmp.i8.ne v384, 0x0
      nextln:   jumpif v482, addr_0_block_103, addr_0_block_104
      check: addr_0_block_103: // preds: addr_0_block_102
      nextln:   jump addr_0_block_105
      check: addr_0_block_104: // preds: addr_0_block_102
      nextln:   jump addr_0_block_105
      check: addr_0_block_105: // preds: addr_0_block_103 addr_0_block_104
      nextln:   v483 = i52.unsigned_from_bits v407
      nextln:   v484 = int.modulo v483, 0x1
      nextln:   v485 = int.sub v483, v484
      nextln:   v486 = i52.to_bits v485
      nextln:   v487 = bool.icmp.i52.eq v407, v486
      nextln:   v488 = i8.load v407
      nextln:   v489 = i64.and v334, 0xffffffffff00ffff
      nextln:   v490 = i8.lshl v488, 0x10
      nextln:   v491 = i64.or v489, v490
      nextln:   v492 = i64.wrapping_add v1, 0x3
      nextln:   v493 = i64.unsigned_from_bits v492
      nextln:   v494 = int.modulo v493, 0x1
      nextln:   v495 = int.sub v493, v494
      nextln:   v496 = i64.to_bits v495
      nextln:   v497 = bool.icmp.i64.eq v492, v496
      nextln:   v498 = i64.lshr v492, 0x30
      nextln:   v499 = i16.trunc.i64 v498
      nextln:   v500 = bool.icmp.i16.eq v499, 0x0
      nextln:   v501 = bool.bitwise_not v500
      nextln:   jumpif v501, addr_0_block_106, addr_0_block_107
      check: addr_0_block_106: // preds: addr_0_block_105
      nextln:   jump addr_0_block_108(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_109(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_107: // preds: addr_0_block_105
      nextln:   jump addr_0_block_108(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_108(v1297: i52, v1298: int, v1299: bool, v1300: bool): // preds: addr_0_block_107
      nextln:   v1301 = i52.trunc.i64 v492
      nextln:   jump addr_0_block_109(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1301, 0x1, 0x0)
      check: addr_0_block_109(v502: i3, v503: i1, v504: i1, v505: i1, v506: i1, v507: i4, v508: i1, v509: bool, v510: int, v511: int, v512: bool, v513: bool, v514: i8, v515: i8, v516: i52, v517: i1, v518: bool, v519: bool, v520: int, v521: i1, v522: bool, v523: i4, v524: i2, v525: i4, v526: i8, v527: i8, v528: i2, v529: i2, v530: bool, v531: i2, v532: i2, v533: bool, v534: bool, v535: bool, v536: bool, v537: i52, v538: i1, v539: i64, v540: i1, v541: i8, v542: i8, v543: i52, v544: i1, v545: bool, v546: bool, v547: int, v548: i1, v549: bool, v550: i4, v551: i2, v552: i4, v553: i8, v554: i8, v555: i2, v556: i2, v557: bool, v558: i2, v559: i2, v560: bool, v561: bool, v562: bool, v563: bool, v564: i52, v565: i1, v566: i64): // preds: addr_0_block_106 addr_0_block_108
      nextln:   v567 = bool.icmp.i8.ne v541, 0x0
      nextln:   v568 = bool.bitwise_not v567
      nextln:   v569 = bool.bitwise_not v6
      nextln:   v570 = bool.and v569, 0x1
      nextln:   v571 = bool.or v570, 0x0
      nextln:   v572 = bool.icmp.i8.ne v541, 0x0
      nextln:   v573 = bool.bitwise_not v572
      nextln:   v574 = bool.and v571, v573
      nextln:   v575 = bool.icmp.i8.eq v553, 0x1
      nextln:   v576 = bool.and v574, v575
      nextln:   jumpif v576, addr_0_block_110, addr_0_block_111
      check: addr_0_block_110: // preds: addr_0_block_109
      nextln:   jump addr_0_block_112
      check: addr_0_block_111: // preds: addr_0_block_109
      nextln:   jump addr_0_block_112
      check: addr_0_block_112: // preds: addr_0_block_110 addr_0_block_111
      nextln:   v577 = bool.icmp.i8.ne v541, 0x0
      nextln:   v578 = bool.bitwise_not v577
      nextln:   v579 = bool.icmp.i8.ne v541, 0x0
      nextln:   v580 = bool.bitwise_not v579
      nextln:   v581 = bool.icmp.i8.eq v553, 0x1
      nextln:   v582 = bool.and v580, v581
      nextln:   jumpif v512, addr_0_block_113, addr_0_block_114
      check: addr_0_block_113: // preds: addr_0_block_112
      nextln:   v583 = bool.icmp.i8.eq v541, 0x0
      nextln:   jump addr_0_block_115(0x1)
      check: addr_0_block_114: // preds: addr_0_block_112
      nextln:   jump addr_0_block_115(0x0)
      check: addr_0_block_115(v584: bool): // preds: addr_0_block_113 addr_0_block_114
      nextln:   v585 = bool.icmp.i8.eq v541, 0x0
      nextln:   v586 = bool.and v513, v585
      nextln:   jumpif v586, addr_0_block_116, addr_0_block_117
      check: addr_0_block_116: // preds: addr_0_block_115
      nextln:   jump addr_0_block_118(0x0, 0x0)
      check: addr_0_block_117: // preds: addr_0_block_115
      nextln:   jump addr_0_block_118(0x0, 0x0)
      check: addr_0_block_118(v587: bool, v588: bool): // preds: addr_0_block_116 addr_0_block_117
      nextln:   v589 = bool.or v584, v587
      nextln:   jumpif v589, addr_0_block_119, addr_0_block_132
      check: addr_0_block_119: // preds: addr_0_block_118
      nextln:   v590 = i52.unsigned_from_bits v537
      nextln:   v591 = int.modulo v590, 0x8
      nextln:   v592 = int.sub v590, v591
      nextln:   v593 = i52.to_bits v592
      nextln:   v594 = bool.icmp.i52.eq v537, v593
      nextln:   v595 = i64.load v537
      nextln:   jumpif v584, addr_0_block_120, addr_0_block_121
      nextln:   jump addr_0_block_133(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v595, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v538, v539, 0x0, 0x0)
      check: addr_0_block_120: // no preds!
      nextln:   jump addr_0_block_122
      check: addr_0_block_121: // no preds!
      nextln:   jump addr_0_block_122
      check: addr_0_block_122: // preds: addr_0_block_120 addr_0_block_121
      nextln:   jumpif v587, addr_0_block_123, addr_0_block_124
      check: addr_0_block_123: // preds: addr_0_block_122
      nextln:   jump addr_0_block_125
      check: addr_0_block_124: // preds: addr_0_block_122
      nextln:   jump addr_0_block_125
      check: addr_0_block_125: // preds: addr_0_block_123 addr_0_block_124
      nextln:   v1347 = i52.unsigned_from_bits v537
      nextln:   v1348 = int.modulo v1347, 0x8
      nextln:   v1349 = int.sub v1347, v1348
      nextln:   v1350 = i52.to_bits v1349
      nextln:   v1351 = bool.icmp.i52.eq v537, v1350
      nextln:   v1352 = bool.icmp.i52.eq v537, 0x13000000
      nextln:   jumpif v1352, addr_0_block_126, addr_0_block_130
      check: addr_0_block_126: // preds: addr_0_block_125
      nextln:   v1353 = i64.unsigned_from_bits v595
      nextln:   v1354 = bool.icmp.int.eq v1353, 0x4
      nextln:   jumpif v1354, addr_0_block_127, addr_0_block_128
      nextln:   jump addr_0_block_131
      check: addr_0_block_127: // no preds!
      nextln:   jump addr_0_block_129
      check: addr_0_block_128: // no preds!
      nextln:   v1355 = i8.trunc.i64 v595
      nextln:   v1356 = i8.unsigned_from_bits v1355
      nextln:   jump addr_0_block_129
      check: addr_0_block_129: // preds: addr_0_block_127 addr_0_block_128
      check: addr_0_block_130: // preds: addr_0_block_125
      nextln:   store.i64 v595, v537
      nextln:   jump addr_0_block_131
      check: addr_0_block_131: // preds: addr_0_block_126 addr_0_block_130
      check: addr_0_block_132: // preds: addr_0_block_118
      nextln:   jump addr_0_block_133(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_133(v596: i8, v597: i1, v598: i16, v599: i8, v600: bool, v601: bool, v602: bool, v603: int, v604: i64, v605: i8, v606: i8, v607: i52, v608: i1, v609: bool, v610: bool, v611: int, v612: i1, v613: bool, v614: i4, v615: i2, v616: i4, v617: i8, v618: i8, v619: i2, v620: i2, v621: bool, v622: i2, v623: i2, v624: bool, v625: bool, v626: bool, v627: bool, v628: i52, v629: i1, v630: i64, v631: i2, v632: bool): // preds: addr_0_block_119 addr_0_block_132
      nextln:   v633 = bool.icmp.i8.ne v541, 0x0
      nextln:   v634 = bool.bitwise_not v633
      nextln:   v635 = bool.and v634, 0x1
      nextln:   v636 = bool.icmp.i8.ne v541, 0x0
      nextln:   v637 = bool.bitwise_not v636
      nextln:   v638 = bool.and 0x1, v637
      nextln:   jumpif v638, addr_0_block_134, addr_0_block_135
      check: addr_0_block_134: // preds: addr_0_block_133
      nextln:   jump addr_0_block_136
      check: addr_0_block_135: // preds: addr_0_block_133
      nextln:   jump addr_0_block_136
      check: addr_0_block_136: // preds: addr_0_block_134 addr_0_block_135
      nextln:   v639 = bool.icmp.i8.ne v541, 0x0
      nextln:   jumpif v639, addr_0_block_137, addr_0_block_138
      check: addr_0_block_137: // preds: addr_0_block_136
      nextln:   jump addr_0_block_139
      check: addr_0_block_138: // preds: addr_0_block_136
      nextln:   jump addr_0_block_139
      check: addr_0_block_139: // preds: addr_0_block_137 addr_0_block_138
      nextln:   v640 = i52.unsigned_from_bits v564
      nextln:   v641 = int.modulo v640, 0x1
      nextln:   v642 = int.sub v640, v641
      nextln:   v643 = i52.to_bits v642
      nextln:   v644 = bool.icmp.i52.eq v564, v643
      nextln:   v645 = i8.load v564
      nextln:   v646 = i64.and v491, 0xffffffff00ffffff
      nextln:   v647 = i8.lshl v645, 0x18
      nextln:   v648 = i64.or v646, v647
      nextln:   v649 = i64.wrapping_add v1, 0x4
      nextln:   v650 = i64.unsigned_from_bits v649
      nextln:   v651 = int.modulo v650, 0x1
      nextln:   v652 = int.sub v650, v651
      nextln:   v653 = i64.to_bits v652
      nextln:   v654 = bool.icmp.i64.eq v649, v653
      nextln:   v655 = i64.lshr v649, 0x30
      nextln:   v656 = i16.trunc.i64 v655
      nextln:   v657 = bool.icmp.i16.eq v656, 0x0
      nextln:   v658 = bool.bitwise_not v657
      nextln:   jumpif v658, addr_0_block_140, addr_0_block_141
      check: addr_0_block_140: // preds: addr_0_block_139
      nextln:   jump addr_0_block_142(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_143(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_141: // preds: addr_0_block_139
      nextln:   jump addr_0_block_142(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_142(v1292: i52, v1293: int, v1294: bool, v1295: bool): // preds: addr_0_block_141
      nextln:   v1296 = i52.trunc.i64 v649
      nextln:   jump addr_0_block_143(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1296, 0x1, 0x0)
      check: addr_0_block_143(v659: i3, v660: i1, v661: i1, v662: i1, v663: i1, v664: i4, v665: i1, v666: bool, v667: int, v668: int, v669: bool, v670: bool, v671: i8, v672: i8, v673: i52, v674: i1, v675: bool, v676: bool, v677: int, v678: i1, v679: bool, v680: i4, v681: i2, v682: i4, v683: i8, v684: i8, v685: i2, v686: i2, v687: bool, v688: i2, v689: i2, v690: bool, v691: bool, v692: bool, v693: bool, v694: i52, v695: i1, v696: i64, v697: i1, v698: i8, v699: i8, v700: i52, v701: i1, v702: bool, v703: bool, v704: int, v705: i1, v706: bool, v707: i4, v708: i2, v709: i4, v710: i8, v711: i8, v712: i2, v713: i2, v714: bool, v715: i2, v716: i2, v717: bool, v718: bool, v719: bool, v720: bool, v721: i52, v722: i1, v723: i64): // preds: addr_0_block_140 addr_0_block_142
      nextln:   v724 = bool.icmp.i8.ne v698, 0x0
      nextln:   v725 = bool.bitwise_not v724
      nextln:   v726 = bool.bitwise_not v6
      nextln:   v727 = bool.and v726, 0x1
      nextln:   v728 = bool.or v727, 0x0
      nextln:   v729 = bool.icmp.i8.ne v698, 0x0
      nextln:   v730 = bool.bitwise_not v729
      nextln:   v731 = bool.and v728, v730
      nextln:   v732 = bool.icmp.i8.eq v710, 0x1
      nextln:   v733 = bool.and v731, v732
      nextln:   jumpif v733, addr_0_block_144, addr_0_block_145
      check: addr_0_block_144: // preds: addr_0_block_143
      nextln:   jump addr_0_block_146
      check: addr_0_block_145: // preds: addr_0_block_143
      nextln:   jump addr_0_block_146
      check: addr_0_block_146: // preds: addr_0_block_144 addr_0_block_145
      nextln:   v734 = bool.icmp.i8.ne v698, 0x0
      nextln:   v735 = bool.bitwise_not v734
      nextln:   v736 = bool.icmp.i8.ne v698, 0x0
      nextln:   v737 = bool.bitwise_not v736
      nextln:   v738 = bool.icmp.i8.eq v710, 0x1
      nextln:   v739 = bool.and v737, v738
      nextln:   jumpif v669, addr_0_block_147, addr_0_block_148
      check: addr_0_block_147: // preds: addr_0_block_146
      nextln:   v740 = bool.icmp.i8.eq v698, 0x0
      nextln:   jump addr_0_block_149(0x1)
      check: addr_0_block_148: // preds: addr_0_block_146
      nextln:   jump addr_0_block_149(0x0)
      check: addr_0_block_149(v741: bool): // preds: addr_0_block_147 addr_0_block_148
      nextln:   v742 = bool.icmp.i8.eq v698, 0x0
      nextln:   v743 = bool.and v670, v742
      nextln:   jumpif v743, addr_0_block_150, addr_0_block_151
      check: addr_0_block_150: // preds: addr_0_block_149
      nextln:   jump addr_0_block_152(0x0, 0x0)
      check: addr_0_block_151: // preds: addr_0_block_149
      nextln:   jump addr_0_block_152(0x0, 0x0)
      check: addr_0_block_152(v744: bool, v745: bool): // preds: addr_0_block_150 addr_0_block_151
      nextln:   v746 = bool.or v741, v744
      nextln:   jumpif v746, addr_0_block_153, addr_0_block_166
      check: addr_0_block_153: // preds: addr_0_block_152
      nextln:   v747 = i52.unsigned_from_bits v694
      nextln:   v748 = int.modulo v747, 0x8
      nextln:   v749 = int.sub v747, v748
      nextln:   v750 = i52.to_bits v749
      nextln:   v751 = bool.icmp.i52.eq v694, v750
      nextln:   v752 = i64.load v694
      nextln:   jumpif v741, addr_0_block_154, addr_0_block_155
      nextln:   jump addr_0_block_167(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v752, v671, v672, v673, v674, v675, v676, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, v689, v690, v691, v692, v693, v694, v695, v696, 0x0, 0x0)
      check: addr_0_block_154: // no preds!
      nextln:   jump addr_0_block_156
      check: addr_0_block_155: // no preds!
      nextln:   jump addr_0_block_156
      check: addr_0_block_156: // preds: addr_0_block_154 addr_0_block_155
      nextln:   jumpif v744, addr_0_block_157, addr_0_block_158
      check: addr_0_block_157: // preds: addr_0_block_156
      nextln:   jump addr_0_block_159
      check: addr_0_block_158: // preds: addr_0_block_156
      nextln:   jump addr_0_block_159
      check: addr_0_block_159: // preds: addr_0_block_157 addr_0_block_158
      nextln:   v1357 = i52.unsigned_from_bits v694
      nextln:   v1358 = int.modulo v1357, 0x8
      nextln:   v1359 = int.sub v1357, v1358
      nextln:   v1360 = i52.to_bits v1359
      nextln:   v1361 = bool.icmp.i52.eq v694, v1360
      nextln:   v1362 = bool.icmp.i52.eq v694, 0x13000000
      nextln:   jumpif v1362, addr_0_block_160, addr_0_block_164
      check: addr_0_block_160: // preds: addr_0_block_159
      nextln:   v1363 = i64.unsigned_from_bits v752
      nextln:   v1364 = bool.icmp.int.eq v1363, 0x4
      nextln:   jumpif v1364, addr_0_block_161, addr_0_block_162
      nextln:   jump addr_0_block_165
      check: addr_0_block_161: // no preds!
      nextln:   jump addr_0_block_163
      check: addr_0_block_162: // no preds!
      nextln:   v1365 = i8.trunc.i64 v752
      nextln:   v1366 = i8.unsigned_from_bits v1365
      nextln:   jump addr_0_block_163
      check: addr_0_block_163: // preds: addr_0_block_161 addr_0_block_162
      check: addr_0_block_164: // preds: addr_0_block_159
      nextln:   store.i64 v752, v694
      nextln:   jump addr_0_block_165
      check: addr_0_block_165: // preds: addr_0_block_160 addr_0_block_164
      check: addr_0_block_166: // preds: addr_0_block_152
      nextln:   jump addr_0_block_167(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_167(v753: i8, v754: i1, v755: i16, v756: i8, v757: bool, v758: bool, v759: bool, v760: int, v761: i64, v762: i8, v763: i8, v764: i52, v765: i1, v766: bool, v767: bool, v768: int, v769: i1, v770: bool, v771: i4, v772: i2, v773: i4, v774: i8, v775: i8, v776: i2, v777: i2, v778: bool, v779: i2, v780: i2, v781: bool, v782: bool, v783: bool, v784: bool, v785: i52, v786: i1, v787: i64, v788: i2, v789: bool): // preds: addr_0_block_153 addr_0_block_166
      nextln:   v790 = bool.icmp.i8.ne v698, 0x0
      nextln:   v791 = bool.bitwise_not v790
      nextln:   v792 = bool.and v791, 0x1
      nextln:   v793 = bool.icmp.i8.ne v698, 0x0
      nextln:   v794 = bool.bitwise_not v793
      nextln:   v795 = bool.and 0x1, v794
      nextln:   jumpif v795, addr_0_block_168, addr_0_block_169
      check: addr_0_block_168: // preds: addr_0_block_167
      nextln:   jump addr_0_block_170
      check: addr_0_block_169: // preds: addr_0_block_167
      nextln:   jump addr_0_block_170
      check: addr_0_block_170: // preds: addr_0_block_168 addr_0_block_169
      nextln:   v796 = bool.icmp.i8.ne v698, 0x0
      nextln:   jumpif v796, addr_0_block_171, addr_0_block_172
      check: addr_0_block_171: // preds: addr_0_block_170
      nextln:   jump addr_0_block_173
      check: addr_0_block_172: // preds: addr_0_block_170
      nextln:   jump addr_0_block_173
      check: addr_0_block_173: // preds: addr_0_block_171 addr_0_block_172
      nextln:   v797 = i52.unsigned_from_bits v721
      nextln:   v798 = int.modulo v797, 0x1
      nextln:   v799 = int.sub v797, v798
      nextln:   v800 = i52.to_bits v799
      nextln:   v801 = bool.icmp.i52.eq v721, v800
      nextln:   v802 = i8.load v721
      nextln:   v803 = i64.and v648, 0xffffff00ffffffff
      nextln:   v804 = i8.lshl v802, 0x20
      nextln:   v805 = i64.or v803, v804
      nextln:   v806 = i64.wrapping_add v1, 0x5
      nextln:   v807 = i64.unsigned_from_bits v806
      nextln:   v808 = int.modulo v807, 0x1
      nextln:   v809 = int.sub v807, v808
      nextln:   v810 = i64.to_bits v809
      nextln:   v811 = bool.icmp.i64.eq v806, v810
      nextln:   v812 = i64.lshr v806, 0x30
      nextln:   v813 = i16.trunc.i64 v812
      nextln:   v814 = bool.icmp.i16.eq v813, 0x0
      nextln:   v815 = bool.bitwise_not v814
      nextln:   jumpif v815, addr_0_block_174, addr_0_block_175
      check: addr_0_block_174: // preds: addr_0_block_173
      nextln:   jump addr_0_block_176(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_177(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_175: // preds: addr_0_block_173
      nextln:   jump addr_0_block_176(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_176(v1287: i52, v1288: int, v1289: bool, v1290: bool): // preds: addr_0_block_175
      nextln:   v1291 = i52.trunc.i64 v806
      nextln:   jump addr_0_block_177(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1291, 0x1, 0x0)
      check: addr_0_block_177(v816: i3, v817: i1, v818: i1, v819: i1, v820: i1, v821: i4, v822: i1, v823: bool, v824: int, v825: int, v826: bool, v827: bool, v828: i8, v829: i8, v830: i52, v831: i1, v832: bool, v833: bool, v834: int, v835: i1, v836: bool, v837: i4, v838: i2, v839: i4, v840: i8, v841: i8, v842: i2, v843: i2, v844: bool, v845: i2, v846: i2, v847: bool, v848: bool, v849: bool, v850: bool, v851: i52, v852: i1, v853: i64, v854: i1, v855: i8, v856: i8, v857: i52, v858: i1, v859: bool, v860: bool, v861: int, v862: i1, v863: bool, v864: i4, v865: i2, v866: i4, v867: i8, v868: i8, v869: i2, v870: i2, v871: bool, v872: i2, v873: i2, v874: bool, v875: bool, v876: bool, v877: bool, v878: i52, v879: i1, v880: i64): // preds: addr_0_block_174 addr_0_block_176
      nextln:   v881 = bool.icmp.i8.ne v855, 0x0
      nextln:   v882 = bool.bitwise_not v881
      nextln:   v883 = bool.bitwise_not v6
      nextln:   v884 = bool.and v883, 0x1
      nextln:   v885 = bool.or v884, 0x0
      nextln:   v886 = bool.icmp.i8.ne v855, 0x0
      nextln:   v887 = bool.bitwise_not v886
      nextln:   v888 = bool.and v885, v887
      nextln:   v889 = bool.icmp.i8.eq v867, 0x1
      nextln:   v890 = bool.and v888, v889
      nextln:   jumpif v890, addr_0_block_178, addr_0_block_179
      check: addr_0_block_178: // preds: addr_0_block_177
      nextln:   jump addr_0_block_180
      check: addr_0_block_179: // preds: addr_0_block_177
      nextln:   jump addr_0_block_180
      check: addr_0_block_180: // preds: addr_0_block_178 addr_0_block_179
      nextln:   v891 = bool.icmp.i8.ne v855, 0x0
      nextln:   v892 = bool.bitwise_not v891
      nextln:   v893 = bool.icmp.i8.ne v855, 0x0
      nextln:   v894 = bool.bitwise_not v893
      nextln:   v895 = bool.icmp.i8.eq v867, 0x1
      nextln:   v896 = bool.and v894, v895
      nextln:   jumpif v826, addr_0_block_181, addr_0_block_182
      check: addr_0_block_181: // preds: addr_0_block_180
      nextln:   v897 = bool.icmp.i8.eq v855, 0x0
      nextln:   jump addr_0_block_183(0x1)
      check: addr_0_block_182: // preds: addr_0_block_180
      nextln:   jump addr_0_block_183(0x0)
      check: addr_0_block_183(v898: bool): // preds: addr_0_block_181 addr_0_block_182
      nextln:   v899 = bool.icmp.i8.eq v855, 0x0
      nextln:   v900 = bool.and v827, v899
      nextln:   jumpif v900, addr_0_block_184, addr_0_block_185
      check: addr_0_block_184: // preds: addr_0_block_183
      nextln:   jump addr_0_block_186(0x0, 0x0)
      check: addr_0_block_185: // preds: addr_0_block_183
      nextln:   jump addr_0_block_186(0x0, 0x0)
      check: addr_0_block_186(v901: bool, v902: bool): // preds: addr_0_block_184 addr_0_block_185
      nextln:   v903 = bool.or v898, v901
      nextln:   jumpif v903, addr_0_block_187, addr_0_block_200
      check: addr_0_block_187: // preds: addr_0_block_186
      nextln:   v904 = i52.unsigned_from_bits v851
      nextln:   v905 = int.modulo v904, 0x8
      nextln:   v906 = int.sub v904, v905
      nextln:   v907 = i52.to_bits v906
      nextln:   v908 = bool.icmp.i52.eq v851, v907
      nextln:   v909 = i64.load v851
      nextln:   jumpif v898, addr_0_block_188, addr_0_block_189
      nextln:   jump addr_0_block_201(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v909, v828, v829, v830, v831, v832, v833, v834, v835, v836, v837, v838, v839, v840, v841, v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v852, v853, 0x0, 0x0)
      check: addr_0_block_188: // no preds!
      nextln:   jump addr_0_block_190
      check: addr_0_block_189: // no preds!
      nextln:   jump addr_0_block_190
      check: addr_0_block_190: // preds: addr_0_block_188 addr_0_block_189
      nextln:   jumpif v901, addr_0_block_191, addr_0_block_192
      check: addr_0_block_191: // preds: addr_0_block_190
      nextln:   jump addr_0_block_193
      check: addr_0_block_192: // preds: addr_0_block_190
      nextln:   jump addr_0_block_193
      check: addr_0_block_193: // preds: addr_0_block_191 addr_0_block_192
      nextln:   v1367 = i52.unsigned_from_bits v851
      nextln:   v1368 = int.modulo v1367, 0x8
      nextln:   v1369 = int.sub v1367, v1368
      nextln:   v1370 = i52.to_bits v1369
      nextln:   v1371 = bool.icmp.i52.eq v851, v1370
      nextln:   v1372 = bool.icmp.i52.eq v851, 0x13000000
      nextln:   jumpif v1372, addr_0_block_194, addr_0_block_198
      check: addr_0_block_194: // preds: addr_0_block_193
      nextln:   v1373 = i64.unsigned_from_bits v909
      nextln:   v1374 = bool.icmp.int.eq v1373, 0x4
      nextln:   jumpif v1374, addr_0_block_195, addr_0_block_196
      nextln:   jump addr_0_block_199
      check: addr_0_block_195: // no preds!
      nextln:   jump addr_0_block_197
      check: addr_0_block_196: // no preds!
      nextln:   v1375 = i8.trunc.i64 v909
      nextln:   v1376 = i8.unsigned_from_bits v1375
      nextln:   jump addr_0_block_197
      check: addr_0_block_197: // preds: addr_0_block_195 addr_0_block_196
      check: addr_0_block_198: // preds: addr_0_block_193
      nextln:   store.i64 v909, v851
      nextln:   jump addr_0_block_199
      check: addr_0_block_199: // preds: addr_0_block_194 addr_0_block_198
      check: addr_0_block_200: // preds: addr_0_block_186
      nextln:   jump addr_0_block_201(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_201(v910: i8, v911: i1, v912: i16, v913: i8, v914: bool, v915: bool, v916: bool, v917: int, v918: i64, v919: i8, v920: i8, v921: i52, v922: i1, v923: bool, v924: bool, v925: int, v926: i1, v927: bool, v928: i4, v929: i2, v930: i4, v931: i8, v932: i8, v933: i2, v934: i2, v935: bool, v936: i2, v937: i2, v938: bool, v939: bool, v940: bool, v941: bool, v942: i52, v943: i1, v944: i64, v945: i2, v946: bool): // preds: addr_0_block_187 addr_0_block_200
      nextln:   v947 = bool.icmp.i8.ne v855, 0x0
      nextln:   v948 = bool.bitwise_not v947
      nextln:   v949 = bool.and v948, 0x1
      nextln:   v950 = bool.icmp.i8.ne v855, 0x0
      nextln:   v951 = bool.bitwise_not v950
      nextln:   v952 = bool.and 0x1, v951
      nextln:   jumpif v952, addr_0_block_202, addr_0_block_203
      check: addr_0_block_202: // preds: addr_0_block_201
      nextln:   jump addr_0_block_204
      check: addr_0_block_203: // preds: addr_0_block_201
      nextln:   jump addr_0_block_204
      check: addr_0_block_204: // preds: addr_0_block_202 addr_0_block_203
      nextln:   v953 = bool.icmp.i8.ne v855, 0x0
      nextln:   jumpif v953, addr_0_block_205, addr_0_block_206
      check: addr_0_block_205: // preds: addr_0_block_204
      nextln:   jump addr_0_block_207
      check: addr_0_block_206: // preds: addr_0_block_204
      nextln:   jump addr_0_block_207
      check: addr_0_block_207: // preds: addr_0_block_205 addr_0_block_206
      nextln:   v954 = i52.unsigned_from_bits v878
      nextln:   v955 = int.modulo v954, 0x1
      nextln:   v956 = int.sub v954, v955
      nextln:   v957 = i52.to_bits v956
      nextln:   v958 = bool.icmp.i52.eq v878, v957
      nextln:   v959 = i8.load v878
      nextln:   v960 = i64.and v805, 0xffff00ffffffffff
      nextln:   v961 = i8.lshl v959, 0x28
      nextln:   v962 = i64.or v960, v961
      nextln:   v963 = i64.wrapping_add v1, 0x6
      nextln:   v964 = i64.unsigned_from_bits v963
      nextln:   v965 = int.modulo v964, 0x1
      nextln:   v966 = int.sub v964, v965
      nextln:   v967 = i64.to_bits v966
      nextln:   v968 = bool.icmp.i64.eq v963, v967
      nextln:   v969 = i64.lshr v963, 0x30
      nextln:   v970 = i16.trunc.i64 v969
      nextln:   v971 = bool.icmp.i16.eq v970, 0x0
      nextln:   v972 = bool.bitwise_not v971
      nextln:   jumpif v972, addr_0_block_208, addr_0_block_209
      check: addr_0_block_208: // preds: addr_0_block_207
      nextln:   jump addr_0_block_210(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_211(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_209: // preds: addr_0_block_207
      nextln:   jump addr_0_block_210(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_210(v1282: i52, v1283: int, v1284: bool, v1285: bool): // preds: addr_0_block_209
      nextln:   v1286 = i52.trunc.i64 v963
      nextln:   jump addr_0_block_211(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1286, 0x1, 0x0)
      check: addr_0_block_211(v973: i3, v974: i1, v975: i1, v976: i1, v977: i1, v978: i4, v979: i1, v980: bool, v981: int, v982: int, v983: bool, v984: bool, v985: i8, v986: i8, v987: i52, v988: i1, v989: bool, v990: bool, v991: int, v992: i1, v993: bool, v994: i4, v995: i2, v996: i4, v997: i8, v998: i8, v999: i2, v1000: i2, v1001: bool, v1002: i2, v1003: i2, v1004: bool, v1005: bool, v1006: bool, v1007: bool, v1008: i52, v1009: i1, v1010: i64, v1011: i1, v1012: i8, v1013: i8, v1014: i52, v1015: i1, v1016: bool, v1017: bool, v1018: int, v1019: i1, v1020: bool, v1021: i4, v1022: i2, v1023: i4, v1024: i8, v1025: i8, v1026: i2, v1027: i2, v1028: bool, v1029: i2, v1030: i2, v1031: bool, v1032: bool, v1033: bool, v1034: bool, v1035: i52, v1036: i1, v1037: i64): // preds: addr_0_block_208 addr_0_block_210
      nextln:   v1038 = bool.icmp.i8.ne v1012, 0x0
      nextln:   v1039 = bool.bitwise_not v1038
      nextln:   v1040 = bool.bitwise_not v6
      nextln:   v1041 = bool.and v1040, 0x1
      nextln:   v1042 = bool.or v1041, 0x0
      nextln:   v1043 = bool.icmp.i8.ne v1012, 0x0
      nextln:   v1044 = bool.bitwise_not v1043
      nextln:   v1045 = bool.and v1042, v1044
      nextln:   v1046 = bool.icmp.i8.eq v1024, 0x1
      nextln:   v1047 = bool.and v1045, v1046
      nextln:   jumpif v1047, addr_0_block_212, addr_0_block_213
      check: addr_0_block_212: // preds: addr_0_block_211
      nextln:   jump addr_0_block_214
      check: addr_0_block_213: // preds: addr_0_block_211
      nextln:   jump addr_0_block_214
      check: addr_0_block_214: // preds: addr_0_block_212 addr_0_block_213
      nextln:   v1048 = bool.icmp.i8.ne v1012, 0x0
      nextln:   v1049 = bool.bitwise_not v1048
      nextln:   v1050 = bool.icmp.i8.ne v1012, 0x0
      nextln:   v1051 = bool.bitwise_not v1050
      nextln:   v1052 = bool.icmp.i8.eq v1024, 0x1
      nextln:   v1053 = bool.and v1051, v1052
      nextln:   jumpif v983, addr_0_block_215, addr_0_block_216
      check: addr_0_block_215: // preds: addr_0_block_214
      nextln:   v1054 = bool.icmp.i8.eq v1012, 0x0
      nextln:   jump addr_0_block_217(0x1)
      check: addr_0_block_216: // preds: addr_0_block_214
      nextln:   jump addr_0_block_217(0x0)
      check: addr_0_block_217(v1055: bool): // preds: addr_0_block_215 addr_0_block_216
      nextln:   v1056 = bool.icmp.i8.eq v1012, 0x0
      nextln:   v1057 = bool.and v984, v1056
      nextln:   jumpif v1057, addr_0_block_218, addr_0_block_219
      check: addr_0_block_218: // preds: addr_0_block_217
      nextln:   jump addr_0_block_220(0x0, 0x0)
      check: addr_0_block_219: // preds: addr_0_block_217
      nextln:   jump addr_0_block_220(0x0, 0x0)
      check: addr_0_block_220(v1058: bool, v1059: bool): // preds: addr_0_block_218 addr_0_block_219
      nextln:   v1060 = bool.or v1055, v1058
      nextln:   jumpif v1060, addr_0_block_221, addr_0_block_234
      check: addr_0_block_221: // preds: addr_0_block_220
      nextln:   v1061 = i52.unsigned_from_bits v1008
      nextln:   v1062 = int.modulo v1061, 0x8
      nextln:   v1063 = int.sub v1061, v1062
      nextln:   v1064 = i52.to_bits v1063
      nextln:   v1065 = bool.icmp.i52.eq v1008, v1064
      nextln:   v1066 = i64.load v1008
      nextln:   jumpif v1055, addr_0_block_222, addr_0_block_223
      nextln:   jump addr_0_block_235(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v1066, v985, v986, v987, v988, v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010, 0x0, 0x0)
      check: addr_0_block_222: // no preds!
      nextln:   jump addr_0_block_224
      check: addr_0_block_223: // no preds!
      nextln:   jump addr_0_block_224
      check: addr_0_block_224: // preds: addr_0_block_222 addr_0_block_223
      nextln:   jumpif v1058, addr_0_block_225, addr_0_block_226
      check: addr_0_block_225: // preds: addr_0_block_224
      nextln:   jump addr_0_block_227
      check: addr_0_block_226: // preds: addr_0_block_224
      nextln:   jump addr_0_block_227
      check: addr_0_block_227: // preds: addr_0_block_225 addr_0_block_226
      nextln:   v1377 = i52.unsigned_from_bits v1008
      nextln:   v1378 = int.modulo v1377, 0x8
      nextln:   v1379 = int.sub v1377, v1378
      nextln:   v1380 = i52.to_bits v1379
      nextln:   v1381 = bool.icmp.i52.eq v1008, v1380
      nextln:   v1382 = bool.icmp.i52.eq v1008, 0x13000000
      nextln:   jumpif v1382, addr_0_block_228, addr_0_block_232
      check: addr_0_block_228: // preds: addr_0_block_227
      nextln:   v1383 = i64.unsigned_from_bits v1066
      nextln:   v1384 = bool.icmp.int.eq v1383, 0x4
      nextln:   jumpif v1384, addr_0_block_229, addr_0_block_230
      nextln:   jump addr_0_block_233
      check: addr_0_block_229: // no preds!
      nextln:   jump addr_0_block_231
      check: addr_0_block_230: // no preds!
      nextln:   v1385 = i8.trunc.i64 v1066
      nextln:   v1386 = i8.unsigned_from_bits v1385
      nextln:   jump addr_0_block_231
      check: addr_0_block_231: // preds: addr_0_block_229 addr_0_block_230
      check: addr_0_block_232: // preds: addr_0_block_227
      nextln:   store.i64 v1066, v1008
      nextln:   jump addr_0_block_233
      check: addr_0_block_233: // preds: addr_0_block_228 addr_0_block_232
      check: addr_0_block_234: // preds: addr_0_block_220
      nextln:   jump addr_0_block_235(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_235(v1067: i8, v1068: i1, v1069: i16, v1070: i8, v1071: bool, v1072: bool, v1073: bool, v1074: int, v1075: i64, v1076: i8, v1077: i8, v1078: i52, v1079: i1, v1080: bool, v1081: bool, v1082: int, v1083: i1, v1084: bool, v1085: i4, v1086: i2, v1087: i4, v1088: i8, v1089: i8, v1090: i2, v1091: i2, v1092: bool, v1093: i2, v1094: i2, v1095: bool, v1096: bool, v1097: bool, v1098: bool, v1099: i52, v1100: i1, v1101: i64, v1102: i2, v1103: bool): // preds: addr_0_block_221 addr_0_block_234
      nextln:   v1104 = bool.icmp.i8.ne v1012, 0x0
      nextln:   v1105 = bool.bitwise_not v1104
      nextln:   v1106 = bool.and v1105, 0x1
      nextln:   v1107 = bool.icmp.i8.ne v1012, 0x0
      nextln:   v1108 = bool.bitwise_not v1107
      nextln:   v1109 = bool.and 0x1, v1108
      nextln:   jumpif v1109, addr_0_block_236, addr_0_block_237
      check: addr_0_block_236: // preds: addr_0_block_235
      nextln:   jump addr_0_block_238
      check: addr_0_block_237: // preds: addr_0_block_235
      nextln:   jump addr_0_block_238
      check: addr_0_block_238: // preds: addr_0_block_236 addr_0_block_237
      nextln:   v1110 = bool.icmp.i8.ne v1012, 0x0
      nextln:   jumpif v1110, addr_0_block_239, addr_0_block_240
      check: addr_0_block_239: // preds: addr_0_block_238
      nextln:   jump addr_0_block_241
      check: addr_0_block_240: // preds: addr_0_block_238
      nextln:   jump addr_0_block_241
      check: addr_0_block_241: // preds: addr_0_block_239 addr_0_block_240
      nextln:   v1111 = i52.unsigned_from_bits v1035
      nextln:   v1112 = int.modulo v1111, 0x1
      nextln:   v1113 = int.sub v1111, v1112
      nextln:   v1114 = i52.to_bits v1113
      nextln:   v1115 = bool.icmp.i52.eq v1035, v1114
      nextln:   v1116 = i8.load v1035
      nextln:   v1117 = i64.and v962, 0xff00ffffffffffff
      nextln:   v1118 = i8.lshl v1116, 0x30
      nextln:   v1119 = i64.or v1117, v1118
      nextln:   v1120 = i64.wrapping_add v1, 0x7
      nextln:   v1121 = i64.unsigned_from_bits v1120
      nextln:   v1122 = int.modulo v1121, 0x1
      nextln:   v1123 = int.sub v1121, v1122
      nextln:   v1124 = i64.to_bits v1123
      nextln:   v1125 = bool.icmp.i64.eq v1120, v1124
      nextln:   v1126 = i64.lshr v1120, 0x30
      nextln:   v1127 = i16.trunc.i64 v1126
      nextln:   v1128 = bool.icmp.i16.eq v1127, 0x0
      nextln:   v1129 = bool.bitwise_not v1128
      nextln:   jumpif v1129, addr_0_block_242, addr_0_block_243
      check: addr_0_block_242: // preds: addr_0_block_241
      nextln:   jump addr_0_block_244(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_245(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_243: // preds: addr_0_block_241
      nextln:   jump addr_0_block_244(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_244(v1277: i52, v1278: int, v1279: bool, v1280: bool): // preds: addr_0_block_243
      nextln:   v1281 = i52.trunc.i64 v1120
      nextln:   jump addr_0_block_245(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1281, 0x1, 0x0)
      check: addr_0_block_245(v1130: i3, v1131: i1, v1132: i1, v1133: i1, v1134: i1, v1135: i4, v1136: i1, v1137: bool, v1138: int, v1139: int, v1140: bool, v1141: bool, v1142: i8, v1143: i8, v1144: i52, v1145: i1, v1146: bool, v1147: bool, v1148: int, v1149: i1, v1150: bool, v1151: i4, v1152: i2, v1153: i4, v1154: i8, v1155: i8, v1156: i2, v1157: i2, v1158: bool, v1159: i2, v1160: i2, v1161: bool, v1162: bool, v1163: bool, v1164: bool, v1165: i52, v1166: i1, v1167: i64, v1168: i1, v1169: i8, v1170: i8, v1171: i52, v1172: i1, v1173: bool, v1174: bool, v1175: int, v1176: i1, v1177: bool, v1178: i4, v1179: i2, v1180: i4, v1181: i8, v1182: i8, v1183: i2, v1184: i2, v1185: bool, v1186: i2, v1187: i2, v1188: bool, v1189: bool, v1190: bool, v1191: bool, v1192: i52, v1193: i1, v1194: i64): // preds: addr_0_block_242 addr_0_block_244
      nextln:   v1195 = bool.icmp.i8.ne v1169, 0x0
      nextln:   v1196 = bool.bitwise_not v1195
      nextln:   v1197 = bool.bitwise_not v6
      nextln:   v1198 = bool.and v1197, 0x1
      nextln:   v1199 = bool.or v1198, 0x0
      nextln:   v1200 = bool.icmp.i8.ne v1169, 0x0
      nextln:   v1201 = bool.bitwise_not v1200
      nextln:   v1202 = bool.and v1199, v1201
      nextln:   v1203 = bool.icmp.i8.eq v1181, 0x1
      nextln:   v1204 = bool.and v1202, v1203
      nextln:   jumpif v1204, addr_0_block_246, addr_0_block_247
      check: addr_0_block_246: // preds: addr_0_block_245
      nextln:   jump addr_0_block_248
      check: addr_0_block_247: // preds: addr_0_block_245
      nextln:   jump addr_0_block_248
      check: addr_0_block_248: // preds: addr_0_block_246 addr_0_block_247
      nextln:   v1205 = bool.icmp.i8.ne v1169, 0x0
      nextln:   v1206 = bool.bitwise_not v1205
      nextln:   v1207 = bool.icmp.i8.ne v1169, 0x0
      nextln:   v1208 = bool.bitwise_not v1207
      nextln:   v1209 = bool.icmp.i8.eq v1181, 0x1
      nextln:   v1210 = bool.and v1208, v1209
      nextln:   jumpif v1140, addr_0_block_249, addr_0_block_250
      check: addr_0_block_249: // preds: addr_0_block_248
      nextln:   v1211 = bool.icmp.i8.eq v1169, 0x0
      nextln:   jump addr_0_block_251(0x1)
      check: addr_0_block_250: // preds: addr_0_block_248
      nextln:   jump addr_0_block_251(0x0)
      check: addr_0_block_251(v1212: bool): // preds: addr_0_block_249 addr_0_block_250
      nextln:   v1213 = bool.icmp.i8.eq v1169, 0x0
      nextln:   v1214 = bool.and v1141, v1213
      nextln:   jumpif v1214, addr_0_block_252, addr_0_block_253
      check: addr_0_block_252: // preds: addr_0_block_251
      nextln:   jump addr_0_block_254(0x0, 0x0)
      check: addr_0_block_253: // preds: addr_0_block_251
      nextln:   jump addr_0_block_254(0x0, 0x0)
      check: addr_0_block_254(v1215: bool, v1216: bool): // preds: addr_0_block_252 addr_0_block_253
      nextln:   v1217 = bool.or v1212, v1215
      nextln:   jumpif v1217, addr_0_block_255, addr_0_block_268
      check: addr_0_block_255: // preds: addr_0_block_254
      nextln:   v1218 = i52.unsigned_from_bits v1165
      nextln:   v1219 = int.modulo v1218, 0x8
      nextln:   v1220 = int.sub v1218, v1219
      nextln:   v1221 = i52.to_bits v1220
      nextln:   v1222 = bool.icmp.i52.eq v1165, v1221
      nextln:   v1223 = i64.load v1165
      nextln:   jumpif v1212, addr_0_block_256, addr_0_block_257
      nextln:   jump addr_0_block_269(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v1223, v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, v1161, v1162, v1163, v1164, v1165, v1166, v1167, 0x0, 0x0)
      check: addr_0_block_256: // no preds!
      nextln:   jump addr_0_block_258
      check: addr_0_block_257: // no preds!
      nextln:   jump addr_0_block_258
      check: addr_0_block_258: // preds: addr_0_block_256 addr_0_block_257
      nextln:   jumpif v1215, addr_0_block_259, addr_0_block_260
      check: addr_0_block_259: // preds: addr_0_block_258
      nextln:   jump addr_0_block_261
      check: addr_0_block_260: // preds: addr_0_block_258
      nextln:   jump addr_0_block_261
      check: addr_0_block_261: // preds: addr_0_block_259 addr_0_block_260
      nextln:   v1387 = i52.unsigned_from_bits v1165
      nextln:   v1388 = int.modulo v1387, 0x8
      nextln:   v1389 = int.sub v1387, v1388
      nextln:   v1390 = i52.to_bits v1389
      nextln:   v1391 = bool.icmp.i52.eq v1165, v1390
      nextln:   v1392 = bool.icmp.i52.eq v1165, 0x13000000
      nextln:   jumpif v1392, addr_0_block_262, addr_0_block_266
      check: addr_0_block_262: // preds: addr_0_block_261
      nextln:   v1393 = i64.unsigned_from_bits v1223
      nextln:   v1394 = bool.icmp.int.eq v1393, 0x4
      nextln:   jumpif v1394, addr_0_block_263, addr_0_block_264
      nextln:   jump addr_0_block_267
      check: addr_0_block_263: // no preds!
      nextln:   jump addr_0_block_265
      check: addr_0_block_264: // no preds!
      nextln:   v1395 = i8.trunc.i64 v1223
      nextln:   v1396 = i8.unsigned_from_bits v1395
      nextln:   jump addr_0_block_265
      check: addr_0_block_265: // preds: addr_0_block_263 addr_0_block_264
      check: addr_0_block_266: // preds: addr_0_block_261
      nextln:   store.i64 v1223, v1165
      nextln:   jump addr_0_block_267
      check: addr_0_block_267: // preds: addr_0_block_262 addr_0_block_266
      check: addr_0_block_268: // preds: addr_0_block_254
      nextln:   jump addr_0_block_269(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_269(v1224: i8, v1225: i1, v1226: i16, v1227: i8, v1228: bool, v1229: bool, v1230: bool, v1231: int, v1232: i64, v1233: i8, v1234: i8, v1235: i52, v1236: i1, v1237: bool, v1238: bool, v1239: int, v1240: i1, v1241: bool, v1242: i4, v1243: i2, v1244: i4, v1245: i8, v1246: i8, v1247: i2, v1248: i2, v1249: bool, v1250: i2, v1251: i2, v1252: bool, v1253: bool, v1254: bool, v1255: bool, v1256: i52, v1257: i1, v1258: i64, v1259: i2, v1260: bool): // preds: addr_0_block_255 addr_0_block_268
      nextln:   v1261 = bool.icmp.i8.ne v1169, 0x0
      nextln:   v1262 = bool.bitwise_not v1261
      nextln:   v1263 = bool.and v1262, 0x1
      nextln:   v1264 = bool.icmp.i8.ne v1169, 0x0
      nextln:   v1265 = bool.bitwise_not v1264
      nextln:   v1266 = bool.and 0x1, v1265
      nextln:   jumpif v1266, addr_0_block_270, addr_0_block_271
      check: addr_0_block_270: // preds: addr_0_block_269
      nextln:   jump addr_0_block_272
      check: addr_0_block_271: // preds: addr_0_block_269
      nextln:   jump addr_0_block_272
      check: addr_0_block_272: // preds: addr_0_block_270 addr_0_block_271
      nextln:   v1267 = bool.icmp.i8.ne v1169, 0x0
      nextln:   jumpif v1267, addr_0_block_273, addr_0_block_274
      check: addr_0_block_273: // preds: addr_0_block_272
      nextln:   jump addr_0_block_275
      check: addr_0_block_274: // preds: addr_0_block_272
      nextln:   jump addr_0_block_275
      check: addr_0_block_275: // preds: addr_0_block_273 addr_0_block_274
      nextln:   v1268 = i52.unsigned_from_bits v1192
      nextln:   v1269 = int.modulo v1268, 0x1
      nextln:   v1270 = int.sub v1268, v1269
      nextln:   v1271 = i52.to_bits v1270
      nextln:   v1272 = bool.icmp.i52.eq v1192, v1271
      nextln:   v1273 = i8.load v1192
      nextln:   v1274 = i64.and v1119, 0xffffffffffffff
      nextln:   v1275 = i8.lshl v1273, 0x38
      nextln:   v1276 = i64.or v1274, v1275
      check: addr_0_block_276: // preds: entry
      nextln:   v21 = i64.unsigned_from_bits v1
      nextln:   v22 = int.modulo v21, 0x8
      nextln:   v23 = int.sub v21, v22
      nextln:   v24 = i64.to_bits v23
      nextln:   v25 = bool.icmp.i64.eq v1, v24
      nextln:   v26 = i64.lshr v1, 0x30
      nextln:   v27 = i16.trunc.i64 v26
      nextln:   v28 = bool.icmp.i16.eq v27, 0x0
      nextln:   v29 = bool.bitwise_not v28
      nextln:   jumpif v29, addr_0_block_277, addr_0_block_278
      nextln:   jump addr_0_block_311(v6, 0x0, v1540)
      check: addr_0_block_277: // no preds!
      nextln:   jump addr_0_block_279(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_280(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_278: // no preds!
      nextln:   jump addr_0_block_279(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_279(v1541: i52, v1542: int, v1543: bool, v1544: bool): // preds: addr_0_block_278
      nextln:   v1545 = i52.trunc.i64 v1
      nextln:   jump addr_0_block_280(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1545, 0x1, 0x0)
      check: addr_0_block_280(v1397: i3, v1398: i1, v1399: i1, v1400: i1, v1401: i1, v1402: i4, v1403: i1, v1404: bool, v1405: int, v1406: int, v1407: bool, v1408: bool, v1409: i8, v1410: i8, v1411: i52, v1412: i1, v1413: bool, v1414: bool, v1415: int, v1416: i1, v1417: bool, v1418: i4, v1419: i2, v1420: i4, v1421: i8, v1422: i8, v1423: i2, v1424: i2, v1425: bool, v1426: i2, v1427: i2, v1428: bool, v1429: bool, v1430: bool, v1431: bool, v1432: i52, v1433: i1, v1434: i64, v1435: i1, v1436: i8, v1437: i8, v1438: i52, v1439: i1, v1440: bool, v1441: bool, v1442: int, v1443: i1, v1444: bool, v1445: i4, v1446: i2, v1447: i4, v1448: i8, v1449: i8, v1450: i2, v1451: i2, v1452: bool, v1453: i2, v1454: i2, v1455: bool, v1456: bool, v1457: bool, v1458: bool, v1459: i52, v1460: i1, v1461: i64): // preds: addr_0_block_277 addr_0_block_279
      nextln:   v1462 = bool.icmp.i8.ne v1436, 0x0
      nextln:   v1463 = bool.bitwise_not v1462
      nextln:   v1464 = bool.bitwise_not v6
      nextln:   v1465 = bool.and v1464, 0x1
      nextln:   v1466 = bool.or v1465, 0x0
      nextln:   v1467 = bool.icmp.i8.ne v1436, 0x0
      nextln:   v1468 = bool.bitwise_not v1467
      nextln:   v1469 = bool.and v1466, v1468
      nextln:   v1470 = bool.icmp.i8.eq v1448, 0x1
      nextln:   v1471 = bool.and v1469, v1470
      nextln:   jumpif v1471, addr_0_block_281, addr_0_block_282
      check: addr_0_block_281: // preds: addr_0_block_280
      nextln:   jump addr_0_block_283
      check: addr_0_block_282: // preds: addr_0_block_280
      nextln:   jump addr_0_block_283
      check: addr_0_block_283: // preds: addr_0_block_281 addr_0_block_282
      nextln:   v1472 = bool.icmp.i8.ne v1436, 0x0
      nextln:   v1473 = bool.bitwise_not v1472
      nextln:   v1474 = bool.icmp.i8.ne v1436, 0x0
      nextln:   v1475 = bool.bitwise_not v1474
      nextln:   v1476 = bool.icmp.i8.eq v1448, 0x1
      nextln:   v1477 = bool.and v1475, v1476
      nextln:   jumpif v1407, addr_0_block_284, addr_0_block_285
      check: addr_0_block_284: // preds: addr_0_block_283
      nextln:   v1478 = bool.icmp.i8.eq v1436, 0x0
      nextln:   jump addr_0_block_286(0x1)
      check: addr_0_block_285: // preds: addr_0_block_283
      nextln:   jump addr_0_block_286(0x0)
      check: addr_0_block_286(v1479: bool): // preds: addr_0_block_284 addr_0_block_285
      nextln:   v1480 = bool.icmp.i8.eq v1436, 0x0
      nextln:   v1481 = bool.and v1408, v1480
      nextln:   jumpif v1481, addr_0_block_287, addr_0_block_288
      check: addr_0_block_287: // preds: addr_0_block_286
      nextln:   jump addr_0_block_289(0x0, 0x0)
      check: addr_0_block_288: // preds: addr_0_block_286
      nextln:   jump addr_0_block_289(0x0, 0x0)
      check: addr_0_block_289(v1482: bool, v1483: bool): // preds: addr_0_block_287 addr_0_block_288
      nextln:   v1484 = bool.or v1479, v1482
      nextln:   jumpif v1484, addr_0_block_290, addr_0_block_303
      check: addr_0_block_290: // preds: addr_0_block_289
      nextln:   v1485 = i52.unsigned_from_bits v1432
      nextln:   v1486 = int.modulo v1485, 0x8
      nextln:   v1487 = int.sub v1485, v1486
      nextln:   v1488 = i52.to_bits v1487
      nextln:   v1489 = bool.icmp.i52.eq v1432, v1488
      nextln:   v1490 = i64.load v1432
      nextln:   jumpif v1479, addr_0_block_291, addr_0_block_292
      nextln:   jump addr_0_block_304(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v1490, v1409, v1410, v1411, v1412, v1413, v1414, v1415, v1416, v1417, v1418, v1419, v1420, v1421, v1422, v1423, v1424, v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, 0x0, 0x0)
      check: addr_0_block_291: // no preds!
      nextln:   jump addr_0_block_293
      check: addr_0_block_292: // no preds!
      nextln:   jump addr_0_block_293
      check: addr_0_block_293: // preds: addr_0_block_291 addr_0_block_292
      nextln:   jumpif v1482, addr_0_block_294, addr_0_block_295
      check: addr_0_block_294: // preds: addr_0_block_293
      nextln:   jump addr_0_block_296
      check: addr_0_block_295: // preds: addr_0_block_293
      nextln:   jump addr_0_block_296
      check: addr_0_block_296: // preds: addr_0_block_294 addr_0_block_295
      nextln:   v1546 = i52.unsigned_from_bits v1432
      nextln:   v1547 = int.modulo v1546, 0x8
      nextln:   v1548 = int.sub v1546, v1547
      nextln:   v1549 = i52.to_bits v1548
      nextln:   v1550 = bool.icmp.i52.eq v1432, v1549
      nextln:   v1551 = bool.icmp.i52.eq v1432, 0x13000000
      nextln:   jumpif v1551, addr_0_block_297, addr_0_block_301
      check: addr_0_block_297: // preds: addr_0_block_296
      nextln:   v1552 = i64.unsigned_from_bits v1490
      nextln:   v1553 = bool.icmp.int.eq v1552, 0x4
      nextln:   jumpif v1553, addr_0_block_298, addr_0_block_299
      nextln:   jump addr_0_block_302
      check: addr_0_block_298: // no preds!
      nextln:   jump addr_0_block_300
      check: addr_0_block_299: // no preds!
      nextln:   v1554 = i8.trunc.i64 v1490
      nextln:   v1555 = i8.unsigned_from_bits v1554
      nextln:   jump addr_0_block_300
      check: addr_0_block_300: // preds: addr_0_block_298 addr_0_block_299
      check: addr_0_block_301: // preds: addr_0_block_296
      nextln:   store.i64 v1490, v1432
      nextln:   jump addr_0_block_302
      check: addr_0_block_302: // preds: addr_0_block_297 addr_0_block_301
      check: addr_0_block_303: // preds: addr_0_block_289
      nextln:   jump addr_0_block_304(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_304(v1491: i8, v1492: i1, v1493: i16, v1494: i8, v1495: bool, v1496: bool, v1497: bool, v1498: int, v1499: i64, v1500: i8, v1501: i8, v1502: i52, v1503: i1, v1504: bool, v1505: bool, v1506: int, v1507: i1, v1508: bool, v1509: i4, v1510: i2, v1511: i4, v1512: i8, v1513: i8, v1514: i2, v1515: i2, v1516: bool, v1517: i2, v1518: i2, v1519: bool, v1520: bool, v1521: bool, v1522: bool, v1523: i52, v1524: i1, v1525: i64, v1526: i2, v1527: bool): // preds: addr_0_block_290 addr_0_block_303
      nextln:   v1528 = bool.icmp.i8.ne v1436, 0x0
      nextln:   v1529 = bool.bitwise_not v1528
      nextln:   v1530 = bool.and v1529, 0x1
      nextln:   v1531 = bool.icmp.i8.ne v1436, 0x0
      nextln:   v1532 = bool.bitwise_not v1531
      nextln:   v1533 = bool.and 0x1, v1532
      nextln:   jumpif v1533, addr_0_block_305, addr_0_block_306
      check: addr_0_block_305: // preds: addr_0_block_304
      nextln:   jump addr_0_block_307
      check: addr_0_block_306: // preds: addr_0_block_304
      nextln:   jump addr_0_block_307
      check: addr_0_block_307: // preds: addr_0_block_305 addr_0_block_306
      nextln:   v1534 = bool.icmp.i8.ne v1436, 0x0
      nextln:   jumpif v1534, addr_0_block_308, addr_0_block_309
      check: addr_0_block_308: // preds: addr_0_block_307
      nextln:   jump addr_0_block_310
      check: addr_0_block_309: // preds: addr_0_block_307
      nextln:   jump addr_0_block_310
      check: addr_0_block_310: // preds: addr_0_block_308 addr_0_block_309
      nextln:   v1535 = i52.unsigned_from_bits v1459
      nextln:   v1536 = int.modulo v1535, 0x8
      nextln:   v1537 = int.sub v1535, v1536
      nextln:   v1538 = i52.to_bits v1537
      nextln:   v1539 = bool.icmp.i52.eq v1459, v1538
      nextln:   v1540 = i64.load v1459
      check: addr_0_block_311(v18: i64, v19: i8, v20: i64): // preds: addr_0_block_0 addr_0_block_276
      nextln:   write_reg.i64 v20, "x1"
