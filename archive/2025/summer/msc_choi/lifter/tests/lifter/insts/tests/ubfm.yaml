tests:
- name: ubfm_1
  bytes: [0x41, 0x2c, 0x4c, 0xd3]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x2"
      nextln:   v1 = i64.lshr v0, 0xc
      nextln:   v2 = int.sub 0xc, 0x1
      nextln:   v3 = i64.lshr v0, v2
      nextln:   v4 = i1.trunc.i64 v3
      nextln:   v5 = i64.lshl v0, 0x34
      nextln:   v6 = int.sub 0x40, 0x34
      nextln:   v7 = i64.lshr v0, v6
      nextln:   v8 = i1.trunc.i64 v7
      nextln:   v9 = i64.or v1, v5
      nextln:   v10 = i64.lshr v9, 0x3f
      nextln:   v11 = i1.trunc.i64 v10
      nextln:   v12 = i64.and v9, 0xfff0000000000000
      nextln:   v13 = i64.or 0x0, v12
      nextln:   v14 = i64.and v13, 0xffffffffffffffff
      nextln:   v15 = i64.or 0x0, v14
      nextln:   write_reg.i64 v15, "x1"
- name: ubfm_2
  bytes: [0x41, 0x2c, 0x4c, 0xd3]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x2"
      nextln:   v1 = i64.lshr v0, 0xc
      nextln:   v2 = int.sub 0xc, 0x1
      nextln:   v3 = i64.lshr v0, v2
      nextln:   v4 = i1.trunc.i64 v3
      nextln:   v5 = i64.lshl v0, 0x34
      nextln:   v6 = int.sub 0x40, 0x34
      nextln:   v7 = i64.lshr v0, v6
      nextln:   v8 = i1.trunc.i64 v7
      nextln:   v9 = i64.or v1, v5
      nextln:   v10 = i64.lshr v9, 0x3f
      nextln:   v11 = i1.trunc.i64 v10
      nextln:   v12 = i64.and v9, 0xfff0000000000000
      nextln:   v13 = i64.or 0x0, v12
      nextln:   v14 = i64.and v13, 0xffffffffffffffff
      nextln:   v15 = i64.or 0x0, v14
      nextln:   write_reg.i64 v15, "x1"
