tests:
- name: ccmp_1
  bytes: [0x03, 0x00, 0x41, 0xfa]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x0"
      nextln:   v1 = i64.read_reg "x1"
      nextln:   v2 = i1.read_reg "z"
      nextln:   v3 = bool.icmp.i1.eq v2, 0x1
      nextln:   jumpif v3, addr_0_block_0, addr_0_block_10
      check: addr_0_block_0: // preds: entry
      nextln:   v4 = i64.bitwise_not v1
      nextln:   v5 = i64.unsigned_from_bits v0
      nextln:   v6 = i64.unsigned_from_bits v4
      nextln:   v7 = int.add v5, v6
      nextln:   v8 = int.add v7, 0x1
      nextln:   v9 = i64.signed_from_bits v0
      nextln:   v10 = i64.signed_from_bits v4
      nextln:   v11 = int.add v9, v10
      nextln:   v12 = int.add v11, 0x1
      nextln:   v13 = i64.to_bits v8
      nextln:   v14 = i64.lshr v13, 0x3f
      nextln:   v15 = i1.trunc.i64 v14
      nextln:   v16 = bool.icmp.i64.eq v13, 0x0
      nextln:   jumpif v16, addr_0_block_1, addr_0_block_2
      nextln:   jump addr_0_block_11(0x1, v45, v4)
      check: addr_0_block_1: // no preds!
      nextln:   jump addr_0_block_3(0x1)
      check: addr_0_block_2: // no preds!
      nextln:   jump addr_0_block_3(0x0)
      check: addr_0_block_3(v27: i1): // preds: addr_0_block_1 addr_0_block_2
      nextln:   v28 = i64.unsigned_from_bits v13
      nextln:   v29 = bool.icmp.int.eq v28, v8
      nextln:   jumpif v29, addr_0_block_4, addr_0_block_5
      check: addr_0_block_4: // preds: addr_0_block_3
      nextln:   jump addr_0_block_6(0x0)
      check: addr_0_block_5: // preds: addr_0_block_3
      nextln:   jump addr_0_block_6(0x1)
      check: addr_0_block_6(v30: i1): // preds: addr_0_block_4 addr_0_block_5
      nextln:   v31 = i64.signed_from_bits v13
      nextln:   v32 = bool.icmp.int.eq v31, v12
      nextln:   jumpif v32, addr_0_block_7, addr_0_block_8
      check: addr_0_block_7: // preds: addr_0_block_6
      nextln:   jump addr_0_block_9(0x0)
      check: addr_0_block_8: // preds: addr_0_block_6
      nextln:   jump addr_0_block_9(0x1)
      check: addr_0_block_9(v33: i1): // preds: addr_0_block_7 addr_0_block_8
      nextln:   v34 = i2.zext.i1 v15
      nextln:   v35 = i2.lshl v34, 0x1
      nextln:   v36 = i2.zext.i1 v27
      nextln:   v37 = i2.or v35, v36
      nextln:   v38 = i3.zext.i2 v37
      nextln:   v39 = i3.lshl v38, 0x1
      nextln:   v40 = i3.zext.i1 v30
      nextln:   v41 = i3.or v39, v40
      nextln:   v42 = i4.zext.i3 v41
      nextln:   v43 = i4.lshl v42, 0x1
      nextln:   v44 = i4.zext.i1 v33
      nextln:   v45 = i4.or v43, v44
      check: addr_0_block_10: // preds: entry
      nextln:   jump addr_0_block_11(0x0, 0x3, v1)
      check: addr_0_block_11(v17: i1, v18: i4, v19: i64): // preds: addr_0_block_0 addr_0_block_10
      nextln:   v20 = i1.trunc.i4 v18
      nextln:   write_reg.i1 v20, "v"
      nextln:   v21 = i4.lshr v18, 0x1
      nextln:   v22 = i1.trunc.i4 v21
      nextln:   write_reg.i1 v22, "c"
      nextln:   v23 = i4.lshr v18, 0x2
      nextln:   v24 = i1.trunc.i4 v23
      nextln:   write_reg.i1 v24, "z"
      nextln:   v25 = i4.lshr v18, 0x3
      nextln:   v26 = i1.trunc.i4 v25
      nextln:   write_reg.i1 v26, "n"
- name: ccmp_2
  bytes: [0x04, 0x60, 0x42, 0x7a]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x0"
      nextln:   v1 = i32.trunc.i64 v0
      nextln:   v2 = i64.read_reg "x2"
      nextln:   v3 = i32.trunc.i64 v2
      nextln:   v4 = i1.read_reg "v"
      nextln:   v5 = bool.icmp.i1.eq v4, 0x1
      nextln:   jumpif v5, addr_0_block_0, addr_0_block_10
      check: addr_0_block_0: // preds: entry
      nextln:   v6 = i32.bitwise_not v3
      nextln:   v7 = i32.unsigned_from_bits v1
      nextln:   v8 = i32.unsigned_from_bits v6
      nextln:   v9 = int.add v7, v8
      nextln:   v10 = int.add v9, 0x1
      nextln:   v11 = i32.signed_from_bits v1
      nextln:   v12 = i32.signed_from_bits v6
      nextln:   v13 = int.add v11, v12
      nextln:   v14 = int.add v13, 0x1
      nextln:   v15 = i32.to_bits v10
      nextln:   v16 = i32.lshr v15, 0x1f
      nextln:   v17 = i1.trunc.i32 v16
      nextln:   v18 = bool.icmp.i32.eq v15, 0x0
      nextln:   jumpif v18, addr_0_block_1, addr_0_block_2
      nextln:   jump addr_0_block_11(0x1, v47, v6)
      check: addr_0_block_1: // no preds!
      nextln:   jump addr_0_block_3(0x1)
      check: addr_0_block_2: // no preds!
      nextln:   jump addr_0_block_3(0x0)
      check: addr_0_block_3(v29: i1): // preds: addr_0_block_1 addr_0_block_2
      nextln:   v30 = i32.unsigned_from_bits v15
      nextln:   v31 = bool.icmp.int.eq v30, v10
      nextln:   jumpif v31, addr_0_block_4, addr_0_block_5
      check: addr_0_block_4: // preds: addr_0_block_3
      nextln:   jump addr_0_block_6(0x0)
      check: addr_0_block_5: // preds: addr_0_block_3
      nextln:   jump addr_0_block_6(0x1)
      check: addr_0_block_6(v32: i1): // preds: addr_0_block_4 addr_0_block_5
      nextln:   v33 = i32.signed_from_bits v15
      nextln:   v34 = bool.icmp.int.eq v33, v14
      nextln:   jumpif v34, addr_0_block_7, addr_0_block_8
      check: addr_0_block_7: // preds: addr_0_block_6
      nextln:   jump addr_0_block_9(0x0)
      check: addr_0_block_8: // preds: addr_0_block_6
      nextln:   jump addr_0_block_9(0x1)
      check: addr_0_block_9(v35: i1): // preds: addr_0_block_7 addr_0_block_8
      nextln:   v36 = i2.zext.i1 v17
      nextln:   v37 = i2.lshl v36, 0x1
      nextln:   v38 = i2.zext.i1 v29
      nextln:   v39 = i2.or v37, v38
      nextln:   v40 = i3.zext.i2 v39
      nextln:   v41 = i3.lshl v40, 0x1
      nextln:   v42 = i3.zext.i1 v32
      nextln:   v43 = i3.or v41, v42
      nextln:   v44 = i4.zext.i3 v43
      nextln:   v45 = i4.lshl v44, 0x1
      nextln:   v46 = i4.zext.i1 v35
      nextln:   v47 = i4.or v45, v46
      check: addr_0_block_10: // preds: entry
      nextln:   jump addr_0_block_11(0x0, 0x4, v3)
      check: addr_0_block_11(v19: i1, v20: i4, v21: i32): // preds: addr_0_block_0 addr_0_block_10
      nextln:   v22 = i1.trunc.i4 v20
      nextln:   write_reg.i1 v22, "v"
      nextln:   v23 = i4.lshr v20, 0x1
      nextln:   v24 = i1.trunc.i4 v23
      nextln:   write_reg.i1 v24, "c"
      nextln:   v25 = i4.lshr v20, 0x2
      nextln:   v26 = i1.trunc.i4 v25
      nextln:   write_reg.i1 v26, "z"
      nextln:   v27 = i4.lshr v20, 0x3
      nextln:   v28 = i1.trunc.i4 v27
      nextln:   write_reg.i1 v28, "n"
- name: ccmp_3
  bytes: [0xc0, 0xe0, 0x46, 0xfa]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x6"
      nextln:   v1 = i64.read_reg "x6"
      nextln:   v2 = i64.bitwise_not v1
      nextln:   v3 = i64.unsigned_from_bits v0
      nextln:   v4 = i64.unsigned_from_bits v2
      nextln:   v5 = int.add v3, v4
      nextln:   v6 = int.add v5, 0x1
      nextln:   v7 = i64.signed_from_bits v0
      nextln:   v8 = i64.signed_from_bits v2
      nextln:   v9 = int.add v7, v8
      nextln:   v10 = int.add v9, 0x1
      nextln:   v11 = i64.to_bits v6
      nextln:   v12 = i64.lshr v11, 0x3f
      nextln:   v13 = i1.trunc.i64 v12
      nextln:   v14 = bool.icmp.i64.eq v11, 0x0
      nextln:   jumpif v14, addr_0_block_0, addr_0_block_1
      check: addr_0_block_0: // preds: entry
      nextln:   jump addr_0_block_2(0x1)
      check: addr_0_block_1: // preds: entry
      nextln:   jump addr_0_block_2(0x0)
      check: addr_0_block_2(v15: i1): // preds: addr_0_block_0 addr_0_block_1
      nextln:   v16 = i64.unsigned_from_bits v11
      nextln:   v17 = bool.icmp.int.eq v16, v6
      nextln:   jumpif v17, addr_0_block_3, addr_0_block_4
      check: addr_0_block_3: // preds: addr_0_block_2
      nextln:   jump addr_0_block_5(0x0)
      check: addr_0_block_4: // preds: addr_0_block_2
      nextln:   jump addr_0_block_5(0x1)
      check: addr_0_block_5(v18: i1): // preds: addr_0_block_3 addr_0_block_4
      nextln:   v19 = i64.signed_from_bits v11
      nextln:   v20 = bool.icmp.int.eq v19, v10
      nextln:   jumpif v20, addr_0_block_6, addr_0_block_7
      check: addr_0_block_6: // preds: addr_0_block_5
      nextln:   jump addr_0_block_8(0x0)
      check: addr_0_block_7: // preds: addr_0_block_5
      nextln:   jump addr_0_block_8(0x1)
      check: addr_0_block_8(v21: i1): // preds: addr_0_block_6 addr_0_block_7
      nextln:   v22 = i2.zext.i1 v13
      nextln:   v23 = i2.lshl v22, 0x1
      nextln:   v24 = i2.zext.i1 v15
      nextln:   v25 = i2.or v23, v24
      nextln:   v26 = i3.zext.i2 v25
      nextln:   v27 = i3.lshl v26, 0x1
      nextln:   v28 = i3.zext.i1 v18
      nextln:   v29 = i3.or v27, v28
      nextln:   v30 = i4.zext.i3 v29
      nextln:   v31 = i4.lshl v30, 0x1
      nextln:   v32 = i4.zext.i1 v21
      nextln:   v33 = i4.or v31, v32
      nextln:   v34 = i1.trunc.i4 v33
      nextln:   write_reg.i1 v34, "v"
      nextln:   v35 = i4.lshr v33, 0x1
      nextln:   v36 = i1.trunc.i4 v35
      nextln:   write_reg.i1 v36, "c"
      nextln:   v37 = i4.lshr v33, 0x2
      nextln:   v38 = i1.trunc.i4 v37
      nextln:   write_reg.i1 v38, "z"
      nextln:   v39 = i4.lshr v33, 0x3
      nextln:   v40 = i1.trunc.i4 v39
      nextln:   write_reg.i1 v40, "n"
