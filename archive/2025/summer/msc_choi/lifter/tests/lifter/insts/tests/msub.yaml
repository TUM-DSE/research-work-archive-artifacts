tests:
- name: msub_1
  bytes: [0x20, 0x8c, 0x02, 0x9b]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x1"
      nextln:   v1 = i64.read_reg "x2"
      nextln:   v2 = i64.read_reg "x3"
      nextln:   v3 = i64.unsigned_from_bits v2
      nextln:   v4 = i64.unsigned_from_bits v0
      nextln:   v5 = i64.unsigned_from_bits v1
      nextln:   v6 = int.mul v4, v5
      nextln:   v7 = int.sub v3, v6
      nextln:   v8 = i64.to_bits v7
      nextln:   write_reg.i64 v8, "x0"
- name: msub_2
  bytes: [0x20, 0x8c, 0x02, 0x1b]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x1"
      nextln:   v1 = i32.trunc.i64 v0
      nextln:   v2 = i64.read_reg "x2"
      nextln:   v3 = i32.trunc.i64 v2
      nextln:   v4 = i64.read_reg "x3"
      nextln:   v5 = i32.trunc.i64 v4
      nextln:   v6 = i32.unsigned_from_bits v5
      nextln:   v7 = i32.unsigned_from_bits v1
      nextln:   v8 = i32.unsigned_from_bits v3
      nextln:   v9 = int.mul v7, v8
      nextln:   v10 = int.sub v6, v9
      nextln:   v11 = i32.to_bits v10
      nextln:   v12 = i64.zext.i32 0x0
      nextln:   v13 = i64.lshl v12, 0x20
      nextln:   v14 = i64.zext.i32 v11
      nextln:   v15 = i64.or v13, v14
      nextln:   write_reg.i64 v15, "x0"
