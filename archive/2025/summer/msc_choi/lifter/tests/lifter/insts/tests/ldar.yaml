tests:
- name: ldar_1
  bytes: [0x21, 0xfc, 0xdf, 0x88]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x1"
      nextln:   v1 = i64.unsigned_from_bits v0
      nextln:   v2 = int.modulo v1, 0x4
      nextln:   v3 = int.sub v1, v2
      nextln:   v4 = i64.to_bits v3
      nextln:   v5 = bool.icmp.i64.eq v0, v4
      nextln:   v6 = bool.bitwise_not v5
      nextln:   v7 = bool.and 0x1, v6
      nextln:   jumpif v7, addr_0_block_0, addr_0_block_1
      check: addr_0_block_0: // preds: entry
      nextln:   jump addr_0_block_2(0x0)
      check: addr_0_block_1: // preds: entry
      nextln:   jump addr_0_block_2(0x0)
      check: addr_0_block_2(v8: bool): // preds: addr_0_block_0 addr_0_block_1
      nextln:   v9 = bool.bitwise_not v5
      nextln:   jumpif v9, addr_0_block_3, addr_0_block_143
      check: addr_0_block_3: // preds: addr_0_block_2
      nextln:   v10 = i64.unsigned_from_bits v0
      nextln:   v11 = int.modulo v10, 0x1
      nextln:   v12 = int.sub v10, v11
      nextln:   v13 = i64.to_bits v12
      nextln:   v14 = bool.icmp.i64.eq v0, v13
      nextln:   v15 = i64.lshr v0, 0x30
      nextln:   v16 = i16.trunc.i64 v15
      nextln:   v17 = bool.icmp.i16.eq v16, 0x0
      nextln:   v18 = bool.bitwise_not v17
      nextln:   jumpif v18, addr_0_block_4, addr_0_block_5
      nextln:   jump addr_0_block_178(v182, v183, v653)
      check: addr_0_block_4: // no preds!
      nextln:   jump addr_0_block_6(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_7(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_5: // no preds!
      nextln:   jump addr_0_block_6(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_6(v669: i52, v670: int, v671: bool, v672: bool): // preds: addr_0_block_5
      nextln:   v673 = i52.trunc.i64 v0
      nextln:   jump addr_0_block_7(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v673, 0x1, 0x0)
      check: addr_0_block_7(v35: i3, v36: i1, v37: i1, v38: i1, v39: i1, v40: i4, v41: i1, v42: bool, v43: int, v44: int, v45: bool, v46: bool, v47: i8, v48: i8, v49: i52, v50: i1, v51: bool, v52: bool, v53: int, v54: i1, v55: bool, v56: i4, v57: i2, v58: i4, v59: i8, v60: i8, v61: i2, v62: i2, v63: bool, v64: i2, v65: i2, v66: bool, v67: bool, v68: bool, v69: bool, v70: i52, v71: i1, v72: i64, v73: i1, v74: i8, v75: i8, v76: i52, v77: i1, v78: bool, v79: bool, v80: int, v81: i1, v82: bool, v83: i4, v84: i2, v85: i4, v86: i8, v87: i8, v88: i2, v89: i2, v90: bool, v91: i2, v92: i2, v93: bool, v94: bool, v95: bool, v96: bool, v97: i52, v98: i1, v99: i64): // preds: addr_0_block_4 addr_0_block_6
      nextln:   v100 = bool.icmp.i8.ne v74, 0x0
      nextln:   v101 = bool.bitwise_not v100
      nextln:   v102 = bool.bitwise_not v5
      nextln:   v103 = bool.and v102, 0x1
      nextln:   v104 = bool.or v103, 0x0
      nextln:   v105 = bool.icmp.i8.ne v74, 0x0
      nextln:   v106 = bool.bitwise_not v105
      nextln:   v107 = bool.and v104, v106
      nextln:   v108 = bool.icmp.i8.eq v86, 0x1
      nextln:   v109 = bool.and v107, v108
      nextln:   jumpif v109, addr_0_block_8, addr_0_block_9
      check: addr_0_block_8: // preds: addr_0_block_7
      nextln:   jump addr_0_block_10
      check: addr_0_block_9: // preds: addr_0_block_7
      nextln:   jump addr_0_block_10
      check: addr_0_block_10: // preds: addr_0_block_8 addr_0_block_9
      nextln:   v110 = bool.icmp.i8.ne v74, 0x0
      nextln:   v111 = bool.bitwise_not v110
      nextln:   v112 = bool.icmp.i8.ne v74, 0x0
      nextln:   v113 = bool.bitwise_not v112
      nextln:   v114 = bool.icmp.i8.eq v86, 0x1
      nextln:   v115 = bool.and v113, v114
      nextln:   jumpif v45, addr_0_block_11, addr_0_block_12
      check: addr_0_block_11: // preds: addr_0_block_10
      nextln:   v116 = bool.icmp.i8.eq v74, 0x0
      nextln:   jump addr_0_block_13(0x1)
      check: addr_0_block_12: // preds: addr_0_block_10
      nextln:   jump addr_0_block_13(0x0)
      check: addr_0_block_13(v117: bool): // preds: addr_0_block_11 addr_0_block_12
      nextln:   v118 = bool.icmp.i8.eq v74, 0x0
      nextln:   v119 = bool.and v46, v118
      nextln:   jumpif v119, addr_0_block_14, addr_0_block_15
      check: addr_0_block_14: // preds: addr_0_block_13
      nextln:   jump addr_0_block_16(0x0, 0x0)
      check: addr_0_block_15: // preds: addr_0_block_13
      nextln:   jump addr_0_block_16(0x0, 0x0)
      check: addr_0_block_16(v120: bool, v121: bool): // preds: addr_0_block_14 addr_0_block_15
      nextln:   v122 = bool.or v117, v120
      nextln:   jumpif v122, addr_0_block_17, addr_0_block_30
      check: addr_0_block_17: // preds: addr_0_block_16
      nextln:   v123 = i52.unsigned_from_bits v70
      nextln:   v124 = int.modulo v123, 0x8
      nextln:   v125 = int.sub v123, v124
      nextln:   v126 = i52.to_bits v125
      nextln:   v127 = bool.icmp.i52.eq v70, v126
      nextln:   v128 = i64.load v70
      nextln:   jumpif v117, addr_0_block_18, addr_0_block_19
      nextln:   jump addr_0_block_31(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v128, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, 0x0, 0x0)
      check: addr_0_block_18: // no preds!
      nextln:   jump addr_0_block_20
      check: addr_0_block_19: // no preds!
      nextln:   jump addr_0_block_20
      check: addr_0_block_20: // preds: addr_0_block_18 addr_0_block_19
      nextln:   jumpif v120, addr_0_block_21, addr_0_block_22
      check: addr_0_block_21: // preds: addr_0_block_20
      nextln:   jump addr_0_block_23
      check: addr_0_block_22: // preds: addr_0_block_20
      nextln:   jump addr_0_block_23
      check: addr_0_block_23: // preds: addr_0_block_21 addr_0_block_22
      nextln:   v674 = i52.unsigned_from_bits v70
      nextln:   v675 = int.modulo v674, 0x8
      nextln:   v676 = int.sub v674, v675
      nextln:   v677 = i52.to_bits v676
      nextln:   v678 = bool.icmp.i52.eq v70, v677
      nextln:   v679 = bool.icmp.i52.eq v70, 0x13000000
      nextln:   jumpif v679, addr_0_block_24, addr_0_block_28
      check: addr_0_block_24: // preds: addr_0_block_23
      nextln:   v680 = i64.unsigned_from_bits v128
      nextln:   v681 = bool.icmp.int.eq v680, 0x4
      nextln:   jumpif v681, addr_0_block_25, addr_0_block_26
      nextln:   jump addr_0_block_29
      check: addr_0_block_25: // no preds!
      nextln:   jump addr_0_block_27
      check: addr_0_block_26: // no preds!
      nextln:   v682 = i8.trunc.i64 v128
      nextln:   v683 = i8.unsigned_from_bits v682
      nextln:   jump addr_0_block_27
      check: addr_0_block_27: // preds: addr_0_block_25 addr_0_block_26
      check: addr_0_block_28: // preds: addr_0_block_23
      nextln:   store.i64 v128, v70
      nextln:   jump addr_0_block_29
      check: addr_0_block_29: // preds: addr_0_block_24 addr_0_block_28
      check: addr_0_block_30: // preds: addr_0_block_16
      nextln:   jump addr_0_block_31(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_31(v129: i8, v130: i1, v131: i16, v132: i8, v133: bool, v134: bool, v135: bool, v136: int, v137: i64, v138: i8, v139: i8, v140: i52, v141: i1, v142: bool, v143: bool, v144: int, v145: i1, v146: bool, v147: i4, v148: i2, v149: i4, v150: i8, v151: i8, v152: i2, v153: i2, v154: bool, v155: i2, v156: i2, v157: bool, v158: bool, v159: bool, v160: bool, v161: i52, v162: i1, v163: i64, v164: i2, v165: bool): // preds: addr_0_block_17 addr_0_block_30
      nextln:   v166 = bool.icmp.i8.ne v74, 0x0
      nextln:   v167 = bool.bitwise_not v166
      nextln:   v168 = bool.and v167, 0x1
      nextln:   v169 = bool.icmp.i8.ne v74, 0x0
      nextln:   v170 = bool.bitwise_not v169
      nextln:   v171 = bool.and 0x1, v170
      nextln:   jumpif v171, addr_0_block_32, addr_0_block_33
      check: addr_0_block_32: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_33: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_34: // preds: addr_0_block_32 addr_0_block_33
      nextln:   v172 = bool.icmp.i8.ne v74, 0x0
      nextln:   jumpif v172, addr_0_block_35, addr_0_block_36
      check: addr_0_block_35: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37
      check: addr_0_block_36: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37
      check: addr_0_block_37: // preds: addr_0_block_35 addr_0_block_36
      nextln:   v173 = i52.unsigned_from_bits v97
      nextln:   v174 = int.modulo v173, 0x1
      nextln:   v175 = int.sub v173, v174
      nextln:   v176 = i52.to_bits v175
      nextln:   v177 = bool.icmp.i52.eq v97, v176
      nextln:   v178 = i8.load v97
      nextln:   v179 = i8.lshl v178, 0x0
      nextln:   v180 = i32.or 0x0, v179
      nextln:   v181 = bool.bitwise_not v5
      nextln:   jumpif v181, addr_0_block_38, addr_0_block_39
      check: addr_0_block_38: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(v5, 0xc)
      check: addr_0_block_39: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(v5, 0x0)
      check: addr_0_block_40(v182: i64, v183: i8): // preds: addr_0_block_38 addr_0_block_39
      nextln:   v184 = i64.wrapping_add v0, 0x1
      nextln:   v185 = i64.unsigned_from_bits v184
      nextln:   v186 = int.modulo v185, 0x1
      nextln:   v187 = int.sub v185, v186
      nextln:   v188 = i64.to_bits v187
      nextln:   v189 = bool.icmp.i64.eq v184, v188
      nextln:   v190 = i64.lshr v184, 0x30
      nextln:   v191 = i16.trunc.i64 v190
      nextln:   v192 = bool.icmp.i16.eq v191, 0x0
      nextln:   v193 = bool.bitwise_not v192
      nextln:   jumpif v193, addr_0_block_41, addr_0_block_42
      check: addr_0_block_41: // preds: addr_0_block_40
      nextln:   jump addr_0_block_43(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_44(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_42: // preds: addr_0_block_40
      nextln:   jump addr_0_block_43(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_43(v664: i52, v665: int, v666: bool, v667: bool): // preds: addr_0_block_42
      nextln:   v668 = i52.trunc.i64 v184
      nextln:   jump addr_0_block_44(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v668, 0x1, 0x0)
      check: addr_0_block_44(v194: i3, v195: i1, v196: i1, v197: i1, v198: i1, v199: i4, v200: i1, v201: bool, v202: int, v203: int, v204: bool, v205: bool, v206: i8, v207: i8, v208: i52, v209: i1, v210: bool, v211: bool, v212: int, v213: i1, v214: bool, v215: i4, v216: i2, v217: i4, v218: i8, v219: i8, v220: i2, v221: i2, v222: bool, v223: i2, v224: i2, v225: bool, v226: bool, v227: bool, v228: bool, v229: i52, v230: i1, v231: i64, v232: i1, v233: i8, v234: i8, v235: i52, v236: i1, v237: bool, v238: bool, v239: int, v240: i1, v241: bool, v242: i4, v243: i2, v244: i4, v245: i8, v246: i8, v247: i2, v248: i2, v249: bool, v250: i2, v251: i2, v252: bool, v253: bool, v254: bool, v255: bool, v256: i52, v257: i1, v258: i64): // preds: addr_0_block_41 addr_0_block_43
      nextln:   v259 = bool.icmp.i8.ne v233, 0x0
      nextln:   v260 = bool.bitwise_not v259
      nextln:   v261 = bool.bitwise_not v5
      nextln:   v262 = bool.and v261, 0x1
      nextln:   v263 = bool.or v262, 0x0
      nextln:   v264 = bool.icmp.i8.ne v233, 0x0
      nextln:   v265 = bool.bitwise_not v264
      nextln:   v266 = bool.and v263, v265
      nextln:   v267 = bool.icmp.i8.eq v245, 0x1
      nextln:   v268 = bool.and v266, v267
      nextln:   jumpif v268, addr_0_block_45, addr_0_block_46
      check: addr_0_block_45: // preds: addr_0_block_44
      nextln:   jump addr_0_block_47
      check: addr_0_block_46: // preds: addr_0_block_44
      nextln:   jump addr_0_block_47
      check: addr_0_block_47: // preds: addr_0_block_45 addr_0_block_46
      nextln:   v269 = bool.icmp.i8.ne v233, 0x0
      nextln:   v270 = bool.bitwise_not v269
      nextln:   v271 = bool.icmp.i8.ne v233, 0x0
      nextln:   v272 = bool.bitwise_not v271
      nextln:   v273 = bool.icmp.i8.eq v245, 0x1
      nextln:   v274 = bool.and v272, v273
      nextln:   jumpif v204, addr_0_block_48, addr_0_block_49
      check: addr_0_block_48: // preds: addr_0_block_47
      nextln:   v275 = bool.icmp.i8.eq v233, 0x0
      nextln:   jump addr_0_block_50(0x1)
      check: addr_0_block_49: // preds: addr_0_block_47
      nextln:   jump addr_0_block_50(0x0)
      check: addr_0_block_50(v276: bool): // preds: addr_0_block_48 addr_0_block_49
      nextln:   v277 = bool.icmp.i8.eq v233, 0x0
      nextln:   v278 = bool.and v205, v277
      nextln:   jumpif v278, addr_0_block_51, addr_0_block_52
      check: addr_0_block_51: // preds: addr_0_block_50
      nextln:   jump addr_0_block_53(0x0, 0x0)
      check: addr_0_block_52: // preds: addr_0_block_50
      nextln:   jump addr_0_block_53(0x0, 0x0)
      check: addr_0_block_53(v279: bool, v280: bool): // preds: addr_0_block_51 addr_0_block_52
      nextln:   v281 = bool.or v276, v279
      nextln:   jumpif v281, addr_0_block_54, addr_0_block_67
      check: addr_0_block_54: // preds: addr_0_block_53
      nextln:   v282 = i52.unsigned_from_bits v229
      nextln:   v283 = int.modulo v282, 0x8
      nextln:   v284 = int.sub v282, v283
      nextln:   v285 = i52.to_bits v284
      nextln:   v286 = bool.icmp.i52.eq v229, v285
      nextln:   v287 = i64.load v229
      nextln:   jumpif v276, addr_0_block_55, addr_0_block_56
      nextln:   jump addr_0_block_68(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v287, v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, 0x0, 0x0)
      check: addr_0_block_55: // no preds!
      nextln:   jump addr_0_block_57
      check: addr_0_block_56: // no preds!
      nextln:   jump addr_0_block_57
      check: addr_0_block_57: // preds: addr_0_block_55 addr_0_block_56
      nextln:   jumpif v279, addr_0_block_58, addr_0_block_59
      check: addr_0_block_58: // preds: addr_0_block_57
      nextln:   jump addr_0_block_60
      check: addr_0_block_59: // preds: addr_0_block_57
      nextln:   jump addr_0_block_60
      check: addr_0_block_60: // preds: addr_0_block_58 addr_0_block_59
      nextln:   v684 = i52.unsigned_from_bits v229
      nextln:   v685 = int.modulo v684, 0x8
      nextln:   v686 = int.sub v684, v685
      nextln:   v687 = i52.to_bits v686
      nextln:   v688 = bool.icmp.i52.eq v229, v687
      nextln:   v689 = bool.icmp.i52.eq v229, 0x13000000
      nextln:   jumpif v689, addr_0_block_61, addr_0_block_65
      check: addr_0_block_61: // preds: addr_0_block_60
      nextln:   v690 = i64.unsigned_from_bits v287
      nextln:   v691 = bool.icmp.int.eq v690, 0x4
      nextln:   jumpif v691, addr_0_block_62, addr_0_block_63
      nextln:   jump addr_0_block_66
      check: addr_0_block_62: // no preds!
      nextln:   jump addr_0_block_64
      check: addr_0_block_63: // no preds!
      nextln:   v692 = i8.trunc.i64 v287
      nextln:   v693 = i8.unsigned_from_bits v692
      nextln:   jump addr_0_block_64
      check: addr_0_block_64: // preds: addr_0_block_62 addr_0_block_63
      check: addr_0_block_65: // preds: addr_0_block_60
      nextln:   store.i64 v287, v229
      nextln:   jump addr_0_block_66
      check: addr_0_block_66: // preds: addr_0_block_61 addr_0_block_65
      check: addr_0_block_67: // preds: addr_0_block_53
      nextln:   jump addr_0_block_68(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_68(v288: i8, v289: i1, v290: i16, v291: i8, v292: bool, v293: bool, v294: bool, v295: int, v296: i64, v297: i8, v298: i8, v299: i52, v300: i1, v301: bool, v302: bool, v303: int, v304: i1, v305: bool, v306: i4, v307: i2, v308: i4, v309: i8, v310: i8, v311: i2, v312: i2, v313: bool, v314: i2, v315: i2, v316: bool, v317: bool, v318: bool, v319: bool, v320: i52, v321: i1, v322: i64, v323: i2, v324: bool): // preds: addr_0_block_54 addr_0_block_67
      nextln:   v325 = bool.icmp.i8.ne v233, 0x0
      nextln:   v326 = bool.bitwise_not v325
      nextln:   v327 = bool.and v326, 0x1
      nextln:   v328 = bool.icmp.i8.ne v233, 0x0
      nextln:   v329 = bool.bitwise_not v328
      nextln:   v330 = bool.and 0x1, v329
      nextln:   jumpif v330, addr_0_block_69, addr_0_block_70
      check: addr_0_block_69: // preds: addr_0_block_68
      nextln:   jump addr_0_block_71
      check: addr_0_block_70: // preds: addr_0_block_68
      nextln:   jump addr_0_block_71
      check: addr_0_block_71: // preds: addr_0_block_69 addr_0_block_70
      nextln:   v331 = bool.icmp.i8.ne v233, 0x0
      nextln:   jumpif v331, addr_0_block_72, addr_0_block_73
      check: addr_0_block_72: // preds: addr_0_block_71
      nextln:   jump addr_0_block_74
      check: addr_0_block_73: // preds: addr_0_block_71
      nextln:   jump addr_0_block_74
      check: addr_0_block_74: // preds: addr_0_block_72 addr_0_block_73
      nextln:   v332 = i52.unsigned_from_bits v256
      nextln:   v333 = int.modulo v332, 0x1
      nextln:   v334 = int.sub v332, v333
      nextln:   v335 = i52.to_bits v334
      nextln:   v336 = bool.icmp.i52.eq v256, v335
      nextln:   v337 = i8.load v256
      nextln:   v338 = i8.lshl v337, 0x8
      nextln:   v339 = i32.or 0x0, v338
      nextln:   v340 = i64.wrapping_add v0, 0x2
      nextln:   v341 = i64.unsigned_from_bits v340
      nextln:   v342 = int.modulo v341, 0x1
      nextln:   v343 = int.sub v341, v342
      nextln:   v344 = i64.to_bits v343
      nextln:   v345 = bool.icmp.i64.eq v340, v344
      nextln:   v346 = i64.lshr v340, 0x30
      nextln:   v347 = i16.trunc.i64 v346
      nextln:   v348 = bool.icmp.i16.eq v347, 0x0
      nextln:   v349 = bool.bitwise_not v348
      nextln:   jumpif v349, addr_0_block_75, addr_0_block_76
      check: addr_0_block_75: // preds: addr_0_block_74
      nextln:   jump addr_0_block_77(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_78(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_76: // preds: addr_0_block_74
      nextln:   jump addr_0_block_77(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_77(v659: i52, v660: int, v661: bool, v662: bool): // preds: addr_0_block_76
      nextln:   v663 = i52.trunc.i64 v340
      nextln:   jump addr_0_block_78(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v663, 0x1, 0x0)
      check: addr_0_block_78(v350: i3, v351: i1, v352: i1, v353: i1, v354: i1, v355: i4, v356: i1, v357: bool, v358: int, v359: int, v360: bool, v361: bool, v362: i8, v363: i8, v364: i52, v365: i1, v366: bool, v367: bool, v368: int, v369: i1, v370: bool, v371: i4, v372: i2, v373: i4, v374: i8, v375: i8, v376: i2, v377: i2, v378: bool, v379: i2, v380: i2, v381: bool, v382: bool, v383: bool, v384: bool, v385: i52, v386: i1, v387: i64, v388: i1, v389: i8, v390: i8, v391: i52, v392: i1, v393: bool, v394: bool, v395: int, v396: i1, v397: bool, v398: i4, v399: i2, v400: i4, v401: i8, v402: i8, v403: i2, v404: i2, v405: bool, v406: i2, v407: i2, v408: bool, v409: bool, v410: bool, v411: bool, v412: i52, v413: i1, v414: i64): // preds: addr_0_block_75 addr_0_block_77
      nextln:   v415 = bool.icmp.i8.ne v389, 0x0
      nextln:   v416 = bool.bitwise_not v415
      nextln:   v417 = bool.bitwise_not v5
      nextln:   v418 = bool.and v417, 0x1
      nextln:   v419 = bool.or v418, 0x0
      nextln:   v420 = bool.icmp.i8.ne v389, 0x0
      nextln:   v421 = bool.bitwise_not v420
      nextln:   v422 = bool.and v419, v421
      nextln:   v423 = bool.icmp.i8.eq v401, 0x1
      nextln:   v424 = bool.and v422, v423
      nextln:   jumpif v424, addr_0_block_79, addr_0_block_80
      check: addr_0_block_79: // preds: addr_0_block_78
      nextln:   jump addr_0_block_81
      check: addr_0_block_80: // preds: addr_0_block_78
      nextln:   jump addr_0_block_81
      check: addr_0_block_81: // preds: addr_0_block_79 addr_0_block_80
      nextln:   v425 = bool.icmp.i8.ne v389, 0x0
      nextln:   v426 = bool.bitwise_not v425
      nextln:   v427 = bool.icmp.i8.ne v389, 0x0
      nextln:   v428 = bool.bitwise_not v427
      nextln:   v429 = bool.icmp.i8.eq v401, 0x1
      nextln:   v430 = bool.and v428, v429
      nextln:   jumpif v360, addr_0_block_82, addr_0_block_83
      check: addr_0_block_82: // preds: addr_0_block_81
      nextln:   v431 = bool.icmp.i8.eq v389, 0x0
      nextln:   jump addr_0_block_84(0x1)
      check: addr_0_block_83: // preds: addr_0_block_81
      nextln:   jump addr_0_block_84(0x0)
      check: addr_0_block_84(v432: bool): // preds: addr_0_block_82 addr_0_block_83
      nextln:   v433 = bool.icmp.i8.eq v389, 0x0
      nextln:   v434 = bool.and v361, v433
      nextln:   jumpif v434, addr_0_block_85, addr_0_block_86
      check: addr_0_block_85: // preds: addr_0_block_84
      nextln:   jump addr_0_block_87(0x0, 0x0)
      check: addr_0_block_86: // preds: addr_0_block_84
      nextln:   jump addr_0_block_87(0x0, 0x0)
      check: addr_0_block_87(v435: bool, v436: bool): // preds: addr_0_block_85 addr_0_block_86
      nextln:   v437 = bool.or v432, v435
      nextln:   jumpif v437, addr_0_block_88, addr_0_block_101
      check: addr_0_block_88: // preds: addr_0_block_87
      nextln:   v438 = i52.unsigned_from_bits v385
      nextln:   v439 = int.modulo v438, 0x8
      nextln:   v440 = int.sub v438, v439
      nextln:   v441 = i52.to_bits v440
      nextln:   v442 = bool.icmp.i52.eq v385, v441
      nextln:   v443 = i64.load v385
      nextln:   jumpif v432, addr_0_block_89, addr_0_block_90
      nextln:   jump addr_0_block_102(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v443, v362, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, v382, v383, v384, v385, v386, v387, 0x0, 0x0)
      check: addr_0_block_89: // no preds!
      nextln:   jump addr_0_block_91
      check: addr_0_block_90: // no preds!
      nextln:   jump addr_0_block_91
      check: addr_0_block_91: // preds: addr_0_block_89 addr_0_block_90
      nextln:   jumpif v435, addr_0_block_92, addr_0_block_93
      check: addr_0_block_92: // preds: addr_0_block_91
      nextln:   jump addr_0_block_94
      check: addr_0_block_93: // preds: addr_0_block_91
      nextln:   jump addr_0_block_94
      check: addr_0_block_94: // preds: addr_0_block_92 addr_0_block_93
      nextln:   v694 = i52.unsigned_from_bits v385
      nextln:   v695 = int.modulo v694, 0x8
      nextln:   v696 = int.sub v694, v695
      nextln:   v697 = i52.to_bits v696
      nextln:   v698 = bool.icmp.i52.eq v385, v697
      nextln:   v699 = bool.icmp.i52.eq v385, 0x13000000
      nextln:   jumpif v699, addr_0_block_95, addr_0_block_99
      check: addr_0_block_95: // preds: addr_0_block_94
      nextln:   v700 = i64.unsigned_from_bits v443
      nextln:   v701 = bool.icmp.int.eq v700, 0x4
      nextln:   jumpif v701, addr_0_block_96, addr_0_block_97
      nextln:   jump addr_0_block_100
      check: addr_0_block_96: // no preds!
      nextln:   jump addr_0_block_98
      check: addr_0_block_97: // no preds!
      nextln:   v702 = i8.trunc.i64 v443
      nextln:   v703 = i8.unsigned_from_bits v702
      nextln:   jump addr_0_block_98
      check: addr_0_block_98: // preds: addr_0_block_96 addr_0_block_97
      check: addr_0_block_99: // preds: addr_0_block_94
      nextln:   store.i64 v443, v385
      nextln:   jump addr_0_block_100
      check: addr_0_block_100: // preds: addr_0_block_95 addr_0_block_99
      check: addr_0_block_101: // preds: addr_0_block_87
      nextln:   jump addr_0_block_102(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_102(v444: i8, v445: i1, v446: i16, v447: i8, v448: bool, v449: bool, v450: bool, v451: int, v452: i64, v453: i8, v454: i8, v455: i52, v456: i1, v457: bool, v458: bool, v459: int, v460: i1, v461: bool, v462: i4, v463: i2, v464: i4, v465: i8, v466: i8, v467: i2, v468: i2, v469: bool, v470: i2, v471: i2, v472: bool, v473: bool, v474: bool, v475: bool, v476: i52, v477: i1, v478: i64, v479: i2, v480: bool): // preds: addr_0_block_88 addr_0_block_101
      nextln:   v481 = bool.icmp.i8.ne v389, 0x0
      nextln:   v482 = bool.bitwise_not v481
      nextln:   v483 = bool.and v482, 0x1
      nextln:   v484 = bool.icmp.i8.ne v389, 0x0
      nextln:   v485 = bool.bitwise_not v484
      nextln:   v486 = bool.and 0x1, v485
      nextln:   jumpif v486, addr_0_block_103, addr_0_block_104
      check: addr_0_block_103: // preds: addr_0_block_102
      nextln:   jump addr_0_block_105
      check: addr_0_block_104: // preds: addr_0_block_102
      nextln:   jump addr_0_block_105
      check: addr_0_block_105: // preds: addr_0_block_103 addr_0_block_104
      nextln:   v487 = bool.icmp.i8.ne v389, 0x0
      nextln:   jumpif v487, addr_0_block_106, addr_0_block_107
      check: addr_0_block_106: // preds: addr_0_block_105
      nextln:   jump addr_0_block_108
      check: addr_0_block_107: // preds: addr_0_block_105
      nextln:   jump addr_0_block_108
      check: addr_0_block_108: // preds: addr_0_block_106 addr_0_block_107
      nextln:   v488 = i52.unsigned_from_bits v412
      nextln:   v489 = int.modulo v488, 0x1
      nextln:   v490 = int.sub v488, v489
      nextln:   v491 = i52.to_bits v490
      nextln:   v492 = bool.icmp.i52.eq v412, v491
      nextln:   v493 = i8.load v412
      nextln:   v494 = i32.and v339, 0xff00ffff
      nextln:   v495 = i8.lshl v493, 0x10
      nextln:   v496 = i32.or v494, v495
      nextln:   v497 = i64.wrapping_add v0, 0x3
      nextln:   v498 = i64.unsigned_from_bits v497
      nextln:   v499 = int.modulo v498, 0x1
      nextln:   v500 = int.sub v498, v499
      nextln:   v501 = i64.to_bits v500
      nextln:   v502 = bool.icmp.i64.eq v497, v501
      nextln:   v503 = i64.lshr v497, 0x30
      nextln:   v504 = i16.trunc.i64 v503
      nextln:   v505 = bool.icmp.i16.eq v504, 0x0
      nextln:   v506 = bool.bitwise_not v505
      nextln:   jumpif v506, addr_0_block_109, addr_0_block_110
      check: addr_0_block_109: // preds: addr_0_block_108
      nextln:   jump addr_0_block_111(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_112(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_110: // preds: addr_0_block_108
      nextln:   jump addr_0_block_111(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_111(v654: i52, v655: int, v656: bool, v657: bool): // preds: addr_0_block_110
      nextln:   v658 = i52.trunc.i64 v497
      nextln:   jump addr_0_block_112(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v658, 0x1, 0x0)
      check: addr_0_block_112(v507: i3, v508: i1, v509: i1, v510: i1, v511: i1, v512: i4, v513: i1, v514: bool, v515: int, v516: int, v517: bool, v518: bool, v519: i8, v520: i8, v521: i52, v522: i1, v523: bool, v524: bool, v525: int, v526: i1, v527: bool, v528: i4, v529: i2, v530: i4, v531: i8, v532: i8, v533: i2, v534: i2, v535: bool, v536: i2, v537: i2, v538: bool, v539: bool, v540: bool, v541: bool, v542: i52, v543: i1, v544: i64, v545: i1, v546: i8, v547: i8, v548: i52, v549: i1, v550: bool, v551: bool, v552: int, v553: i1, v554: bool, v555: i4, v556: i2, v557: i4, v558: i8, v559: i8, v560: i2, v561: i2, v562: bool, v563: i2, v564: i2, v565: bool, v566: bool, v567: bool, v568: bool, v569: i52, v570: i1, v571: i64): // preds: addr_0_block_109 addr_0_block_111
      nextln:   v572 = bool.icmp.i8.ne v546, 0x0
      nextln:   v573 = bool.bitwise_not v572
      nextln:   v574 = bool.bitwise_not v5
      nextln:   v575 = bool.and v574, 0x1
      nextln:   v576 = bool.or v575, 0x0
      nextln:   v577 = bool.icmp.i8.ne v546, 0x0
      nextln:   v578 = bool.bitwise_not v577
      nextln:   v579 = bool.and v576, v578
      nextln:   v580 = bool.icmp.i8.eq v558, 0x1
      nextln:   v581 = bool.and v579, v580
      nextln:   jumpif v581, addr_0_block_113, addr_0_block_114
      check: addr_0_block_113: // preds: addr_0_block_112
      nextln:   jump addr_0_block_115
      check: addr_0_block_114: // preds: addr_0_block_112
      nextln:   jump addr_0_block_115
      check: addr_0_block_115: // preds: addr_0_block_113 addr_0_block_114
      nextln:   v582 = bool.icmp.i8.ne v546, 0x0
      nextln:   v583 = bool.bitwise_not v582
      nextln:   v584 = bool.icmp.i8.ne v546, 0x0
      nextln:   v585 = bool.bitwise_not v584
      nextln:   v586 = bool.icmp.i8.eq v558, 0x1
      nextln:   v587 = bool.and v585, v586
      nextln:   jumpif v517, addr_0_block_116, addr_0_block_117
      check: addr_0_block_116: // preds: addr_0_block_115
      nextln:   v588 = bool.icmp.i8.eq v546, 0x0
      nextln:   jump addr_0_block_118(0x1)
      check: addr_0_block_117: // preds: addr_0_block_115
      nextln:   jump addr_0_block_118(0x0)
      check: addr_0_block_118(v589: bool): // preds: addr_0_block_116 addr_0_block_117
      nextln:   v590 = bool.icmp.i8.eq v546, 0x0
      nextln:   v591 = bool.and v518, v590
      nextln:   jumpif v591, addr_0_block_119, addr_0_block_120
      check: addr_0_block_119: // preds: addr_0_block_118
      nextln:   jump addr_0_block_121(0x0, 0x0)
      check: addr_0_block_120: // preds: addr_0_block_118
      nextln:   jump addr_0_block_121(0x0, 0x0)
      check: addr_0_block_121(v592: bool, v593: bool): // preds: addr_0_block_119 addr_0_block_120
      nextln:   v594 = bool.or v589, v592
      nextln:   jumpif v594, addr_0_block_122, addr_0_block_135
      check: addr_0_block_122: // preds: addr_0_block_121
      nextln:   v595 = i52.unsigned_from_bits v542
      nextln:   v596 = int.modulo v595, 0x8
      nextln:   v597 = int.sub v595, v596
      nextln:   v598 = i52.to_bits v597
      nextln:   v599 = bool.icmp.i52.eq v542, v598
      nextln:   v600 = i64.load v542
      nextln:   jumpif v589, addr_0_block_123, addr_0_block_124
      nextln:   jump addr_0_block_136(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v600, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v538, v539, v540, v541, v542, v543, v544, 0x0, 0x0)
      check: addr_0_block_123: // no preds!
      nextln:   jump addr_0_block_125
      check: addr_0_block_124: // no preds!
      nextln:   jump addr_0_block_125
      check: addr_0_block_125: // preds: addr_0_block_123 addr_0_block_124
      nextln:   jumpif v592, addr_0_block_126, addr_0_block_127
      check: addr_0_block_126: // preds: addr_0_block_125
      nextln:   jump addr_0_block_128
      check: addr_0_block_127: // preds: addr_0_block_125
      nextln:   jump addr_0_block_128
      check: addr_0_block_128: // preds: addr_0_block_126 addr_0_block_127
      nextln:   v704 = i52.unsigned_from_bits v542
      nextln:   v705 = int.modulo v704, 0x8
      nextln:   v706 = int.sub v704, v705
      nextln:   v707 = i52.to_bits v706
      nextln:   v708 = bool.icmp.i52.eq v542, v707
      nextln:   v709 = bool.icmp.i52.eq v542, 0x13000000
      nextln:   jumpif v709, addr_0_block_129, addr_0_block_133
      check: addr_0_block_129: // preds: addr_0_block_128
      nextln:   v710 = i64.unsigned_from_bits v600
      nextln:   v711 = bool.icmp.int.eq v710, 0x4
      nextln:   jumpif v711, addr_0_block_130, addr_0_block_131
      nextln:   jump addr_0_block_134
      check: addr_0_block_130: // no preds!
      nextln:   jump addr_0_block_132
      check: addr_0_block_131: // no preds!
      nextln:   v712 = i8.trunc.i64 v600
      nextln:   v713 = i8.unsigned_from_bits v712
      nextln:   jump addr_0_block_132
      check: addr_0_block_132: // preds: addr_0_block_130 addr_0_block_131
      check: addr_0_block_133: // preds: addr_0_block_128
      nextln:   store.i64 v600, v542
      nextln:   jump addr_0_block_134
      check: addr_0_block_134: // preds: addr_0_block_129 addr_0_block_133
      check: addr_0_block_135: // preds: addr_0_block_121
      nextln:   jump addr_0_block_136(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_136(v601: i8, v602: i1, v603: i16, v604: i8, v605: bool, v606: bool, v607: bool, v608: int, v609: i64, v610: i8, v611: i8, v612: i52, v613: i1, v614: bool, v615: bool, v616: int, v617: i1, v618: bool, v619: i4, v620: i2, v621: i4, v622: i8, v623: i8, v624: i2, v625: i2, v626: bool, v627: i2, v628: i2, v629: bool, v630: bool, v631: bool, v632: bool, v633: i52, v634: i1, v635: i64, v636: i2, v637: bool): // preds: addr_0_block_122 addr_0_block_135
      nextln:   v638 = bool.icmp.i8.ne v546, 0x0
      nextln:   v639 = bool.bitwise_not v638
      nextln:   v640 = bool.and v639, 0x1
      nextln:   v641 = bool.icmp.i8.ne v546, 0x0
      nextln:   v642 = bool.bitwise_not v641
      nextln:   v643 = bool.and 0x1, v642
      nextln:   jumpif v643, addr_0_block_137, addr_0_block_138
      check: addr_0_block_137: // preds: addr_0_block_136
      nextln:   jump addr_0_block_139
      check: addr_0_block_138: // preds: addr_0_block_136
      nextln:   jump addr_0_block_139
      check: addr_0_block_139: // preds: addr_0_block_137 addr_0_block_138
      nextln:   v644 = bool.icmp.i8.ne v546, 0x0
      nextln:   jumpif v644, addr_0_block_140, addr_0_block_141
      check: addr_0_block_140: // preds: addr_0_block_139
      nextln:   jump addr_0_block_142
      check: addr_0_block_141: // preds: addr_0_block_139
      nextln:   jump addr_0_block_142
      check: addr_0_block_142: // preds: addr_0_block_140 addr_0_block_141
      nextln:   v645 = i52.unsigned_from_bits v569
      nextln:   v646 = int.modulo v645, 0x1
      nextln:   v647 = int.sub v645, v646
      nextln:   v648 = i52.to_bits v647
      nextln:   v649 = bool.icmp.i52.eq v569, v648
      nextln:   v650 = i8.load v569
      nextln:   v651 = i32.and v496, 0xffffff
      nextln:   v652 = i8.lshl v650, 0x18
      nextln:   v653 = i32.or v651, v652
      check: addr_0_block_143: // preds: addr_0_block_2
      nextln:   v26 = i64.unsigned_from_bits v0
      nextln:   v27 = int.modulo v26, 0x4
      nextln:   v28 = int.sub v26, v27
      nextln:   v29 = i64.to_bits v28
      nextln:   v30 = bool.icmp.i64.eq v0, v29
      nextln:   v31 = i64.lshr v0, 0x30
      nextln:   v32 = i16.trunc.i64 v31
      nextln:   v33 = bool.icmp.i16.eq v32, 0x0
      nextln:   v34 = bool.bitwise_not v33
      nextln:   jumpif v34, addr_0_block_144, addr_0_block_145
      nextln:   jump addr_0_block_178(v5, 0x0, v857)
      check: addr_0_block_144: // no preds!
      nextln:   jump addr_0_block_146(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_147(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_145: // no preds!
      nextln:   jump addr_0_block_146(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_146(v858: i52, v859: int, v860: bool, v861: bool): // preds: addr_0_block_145
      nextln:   v862 = i52.trunc.i64 v0
      nextln:   jump addr_0_block_147(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v862, 0x1, 0x0)
      check: addr_0_block_147(v714: i3, v715: i1, v716: i1, v717: i1, v718: i1, v719: i4, v720: i1, v721: bool, v722: int, v723: int, v724: bool, v725: bool, v726: i8, v727: i8, v728: i52, v729: i1, v730: bool, v731: bool, v732: int, v733: i1, v734: bool, v735: i4, v736: i2, v737: i4, v738: i8, v739: i8, v740: i2, v741: i2, v742: bool, v743: i2, v744: i2, v745: bool, v746: bool, v747: bool, v748: bool, v749: i52, v750: i1, v751: i64, v752: i1, v753: i8, v754: i8, v755: i52, v756: i1, v757: bool, v758: bool, v759: int, v760: i1, v761: bool, v762: i4, v763: i2, v764: i4, v765: i8, v766: i8, v767: i2, v768: i2, v769: bool, v770: i2, v771: i2, v772: bool, v773: bool, v774: bool, v775: bool, v776: i52, v777: i1, v778: i64): // preds: addr_0_block_144 addr_0_block_146
      nextln:   v779 = bool.icmp.i8.ne v753, 0x0
      nextln:   v780 = bool.bitwise_not v779
      nextln:   v781 = bool.bitwise_not v5
      nextln:   v782 = bool.and v781, 0x1
      nextln:   v783 = bool.or v782, 0x0
      nextln:   v784 = bool.icmp.i8.ne v753, 0x0
      nextln:   v785 = bool.bitwise_not v784
      nextln:   v786 = bool.and v783, v785
      nextln:   v787 = bool.icmp.i8.eq v765, 0x1
      nextln:   v788 = bool.and v786, v787
      nextln:   jumpif v788, addr_0_block_148, addr_0_block_149
      check: addr_0_block_148: // preds: addr_0_block_147
      nextln:   jump addr_0_block_150
      check: addr_0_block_149: // preds: addr_0_block_147
      nextln:   jump addr_0_block_150
      check: addr_0_block_150: // preds: addr_0_block_148 addr_0_block_149
      nextln:   v789 = bool.icmp.i8.ne v753, 0x0
      nextln:   v790 = bool.bitwise_not v789
      nextln:   v791 = bool.icmp.i8.ne v753, 0x0
      nextln:   v792 = bool.bitwise_not v791
      nextln:   v793 = bool.icmp.i8.eq v765, 0x1
      nextln:   v794 = bool.and v792, v793
      nextln:   jumpif v724, addr_0_block_151, addr_0_block_152
      check: addr_0_block_151: // preds: addr_0_block_150
      nextln:   v795 = bool.icmp.i8.eq v753, 0x0
      nextln:   jump addr_0_block_153(0x1)
      check: addr_0_block_152: // preds: addr_0_block_150
      nextln:   jump addr_0_block_153(0x0)
      check: addr_0_block_153(v796: bool): // preds: addr_0_block_151 addr_0_block_152
      nextln:   v797 = bool.icmp.i8.eq v753, 0x0
      nextln:   v798 = bool.and v725, v797
      nextln:   jumpif v798, addr_0_block_154, addr_0_block_155
      check: addr_0_block_154: // preds: addr_0_block_153
      nextln:   jump addr_0_block_156(0x0, 0x0)
      check: addr_0_block_155: // preds: addr_0_block_153
      nextln:   jump addr_0_block_156(0x0, 0x0)
      check: addr_0_block_156(v799: bool, v800: bool): // preds: addr_0_block_154 addr_0_block_155
      nextln:   v801 = bool.or v796, v799
      nextln:   jumpif v801, addr_0_block_157, addr_0_block_170
      check: addr_0_block_157: // preds: addr_0_block_156
      nextln:   v802 = i52.unsigned_from_bits v749
      nextln:   v803 = int.modulo v802, 0x8
      nextln:   v804 = int.sub v802, v803
      nextln:   v805 = i52.to_bits v804
      nextln:   v806 = bool.icmp.i52.eq v749, v805
      nextln:   v807 = i64.load v749
      nextln:   jumpif v796, addr_0_block_158, addr_0_block_159
      nextln:   jump addr_0_block_171(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v807, v726, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, v745, v746, v747, v748, v749, v750, v751, 0x0, 0x0)
      check: addr_0_block_158: // no preds!
      nextln:   jump addr_0_block_160
      check: addr_0_block_159: // no preds!
      nextln:   jump addr_0_block_160
      check: addr_0_block_160: // preds: addr_0_block_158 addr_0_block_159
      nextln:   jumpif v799, addr_0_block_161, addr_0_block_162
      check: addr_0_block_161: // preds: addr_0_block_160
      nextln:   jump addr_0_block_163
      check: addr_0_block_162: // preds: addr_0_block_160
      nextln:   jump addr_0_block_163
      check: addr_0_block_163: // preds: addr_0_block_161 addr_0_block_162
      nextln:   v863 = i52.unsigned_from_bits v749
      nextln:   v864 = int.modulo v863, 0x8
      nextln:   v865 = int.sub v863, v864
      nextln:   v866 = i52.to_bits v865
      nextln:   v867 = bool.icmp.i52.eq v749, v866
      nextln:   v868 = bool.icmp.i52.eq v749, 0x13000000
      nextln:   jumpif v868, addr_0_block_164, addr_0_block_168
      check: addr_0_block_164: // preds: addr_0_block_163
      nextln:   v869 = i64.unsigned_from_bits v807
      nextln:   v870 = bool.icmp.int.eq v869, 0x4
      nextln:   jumpif v870, addr_0_block_165, addr_0_block_166
      nextln:   jump addr_0_block_169
      check: addr_0_block_165: // no preds!
      nextln:   jump addr_0_block_167
      check: addr_0_block_166: // no preds!
      nextln:   v871 = i8.trunc.i64 v807
      nextln:   v872 = i8.unsigned_from_bits v871
      nextln:   jump addr_0_block_167
      check: addr_0_block_167: // preds: addr_0_block_165 addr_0_block_166
      check: addr_0_block_168: // preds: addr_0_block_163
      nextln:   store.i64 v807, v749
      nextln:   jump addr_0_block_169
      check: addr_0_block_169: // preds: addr_0_block_164 addr_0_block_168
      check: addr_0_block_170: // preds: addr_0_block_156
      nextln:   jump addr_0_block_171(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_171(v808: i8, v809: i1, v810: i16, v811: i8, v812: bool, v813: bool, v814: bool, v815: int, v816: i64, v817: i8, v818: i8, v819: i52, v820: i1, v821: bool, v822: bool, v823: int, v824: i1, v825: bool, v826: i4, v827: i2, v828: i4, v829: i8, v830: i8, v831: i2, v832: i2, v833: bool, v834: i2, v835: i2, v836: bool, v837: bool, v838: bool, v839: bool, v840: i52, v841: i1, v842: i64, v843: i2, v844: bool): // preds: addr_0_block_157 addr_0_block_170
      nextln:   v845 = bool.icmp.i8.ne v753, 0x0
      nextln:   v846 = bool.bitwise_not v845
      nextln:   v847 = bool.and v846, 0x1
      nextln:   v848 = bool.icmp.i8.ne v753, 0x0
      nextln:   v849 = bool.bitwise_not v848
      nextln:   v850 = bool.and 0x1, v849
      nextln:   jumpif v850, addr_0_block_172, addr_0_block_173
      check: addr_0_block_172: // preds: addr_0_block_171
      nextln:   jump addr_0_block_174
      check: addr_0_block_173: // preds: addr_0_block_171
      nextln:   jump addr_0_block_174
      check: addr_0_block_174: // preds: addr_0_block_172 addr_0_block_173
      nextln:   v851 = bool.icmp.i8.ne v753, 0x0
      nextln:   jumpif v851, addr_0_block_175, addr_0_block_176
      check: addr_0_block_175: // preds: addr_0_block_174
      nextln:   jump addr_0_block_177
      check: addr_0_block_176: // preds: addr_0_block_174
      nextln:   jump addr_0_block_177
      check: addr_0_block_177: // preds: addr_0_block_175 addr_0_block_176
      nextln:   v852 = i52.unsigned_from_bits v776
      nextln:   v853 = int.modulo v852, 0x4
      nextln:   v854 = int.sub v852, v853
      nextln:   v855 = i52.to_bits v854
      nextln:   v856 = bool.icmp.i52.eq v776, v855
      nextln:   v857 = i32.load v776
      check: addr_0_block_178(v19: i64, v20: i8, v21: i32): // preds: addr_0_block_3 addr_0_block_143
      nextln:   v22 = i64.zext.i32 0x0
      nextln:   v23 = i64.lshl v22, 0x20
      nextln:   v24 = i64.zext.i32 v21
      nextln:   v25 = i64.or v23, v24
      nextln:   write_reg.i64 v25, "x1"
- name: ldar_2
  bytes: [0xe1, 0xff, 0xdf, 0xc8]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "sp"
      nextln:   v1 = i64.unsigned_from_bits v0
      nextln:   v2 = int.modulo v1, 0x10
      nextln:   v3 = int.sub v1, v2
      nextln:   v4 = i64.to_bits v3
      nextln:   v5 = bool.icmp.i64.ne v0, v4
      nextln:   v6 = i64.read_reg "sp"
      nextln:   v7 = i64.unsigned_from_bits v6
      nextln:   v8 = int.modulo v7, 0x8
      nextln:   v9 = int.sub v7, v8
      nextln:   v10 = i64.to_bits v9
      nextln:   v11 = bool.icmp.i64.eq v6, v10
      nextln:   v12 = bool.bitwise_not v11
      nextln:   v13 = bool.and 0x1, v12
      nextln:   jumpif v13, addr_0_block_0, addr_0_block_1
      check: addr_0_block_0: // preds: entry
      nextln:   jump addr_0_block_2(0x0)
      check: addr_0_block_1: // preds: entry
      nextln:   jump addr_0_block_2(0x0)
      check: addr_0_block_2(v14: bool): // preds: addr_0_block_0 addr_0_block_1
      nextln:   v15 = bool.bitwise_not v11
      nextln:   jumpif v15, addr_0_block_3, addr_0_block_279
      check: addr_0_block_3: // preds: addr_0_block_2
      nextln:   v16 = i64.unsigned_from_bits v6
      nextln:   v17 = int.modulo v16, 0x1
      nextln:   v18 = int.sub v16, v17
      nextln:   v19 = i64.to_bits v18
      nextln:   v20 = bool.icmp.i64.eq v6, v19
      nextln:   v21 = i64.lshr v6, 0x30
      nextln:   v22 = i16.trunc.i64 v21
      nextln:   v23 = bool.icmp.i16.eq v22, 0x0
      nextln:   v24 = bool.bitwise_not v23
      nextln:   jumpif v24, addr_0_block_4, addr_0_block_5
      nextln:   jump addr_0_block_314(v184, v185, v1283)
      check: addr_0_block_4: // no preds!
      nextln:   jump addr_0_block_6(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_7(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_5: // no preds!
      nextln:   jump addr_0_block_6(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_6(v1319: i52, v1320: int, v1321: bool, v1322: bool): // preds: addr_0_block_5
      nextln:   v1323 = i52.trunc.i64 v6
      nextln:   jump addr_0_block_7(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1323, 0x1, 0x0)
      check: addr_0_block_7(v37: i3, v38: i1, v39: i1, v40: i1, v41: i1, v42: i4, v43: i1, v44: bool, v45: int, v46: int, v47: bool, v48: bool, v49: i8, v50: i8, v51: i52, v52: i1, v53: bool, v54: bool, v55: int, v56: i1, v57: bool, v58: i4, v59: i2, v60: i4, v61: i8, v62: i8, v63: i2, v64: i2, v65: bool, v66: i2, v67: i2, v68: bool, v69: bool, v70: bool, v71: bool, v72: i52, v73: i1, v74: i64, v75: i1, v76: i8, v77: i8, v78: i52, v79: i1, v80: bool, v81: bool, v82: int, v83: i1, v84: bool, v85: i4, v86: i2, v87: i4, v88: i8, v89: i8, v90: i2, v91: i2, v92: bool, v93: i2, v94: i2, v95: bool, v96: bool, v97: bool, v98: bool, v99: i52, v100: i1, v101: i64): // preds: addr_0_block_4 addr_0_block_6
      nextln:   v102 = bool.icmp.i8.ne v76, 0x0
      nextln:   v103 = bool.bitwise_not v102
      nextln:   v104 = bool.bitwise_not v11
      nextln:   v105 = bool.and v104, 0x1
      nextln:   v106 = bool.or v105, 0x0
      nextln:   v107 = bool.icmp.i8.ne v76, 0x0
      nextln:   v108 = bool.bitwise_not v107
      nextln:   v109 = bool.and v106, v108
      nextln:   v110 = bool.icmp.i8.eq v88, 0x1
      nextln:   v111 = bool.and v109, v110
      nextln:   jumpif v111, addr_0_block_8, addr_0_block_9
      check: addr_0_block_8: // preds: addr_0_block_7
      nextln:   jump addr_0_block_10
      check: addr_0_block_9: // preds: addr_0_block_7
      nextln:   jump addr_0_block_10
      check: addr_0_block_10: // preds: addr_0_block_8 addr_0_block_9
      nextln:   v112 = bool.icmp.i8.ne v76, 0x0
      nextln:   v113 = bool.bitwise_not v112
      nextln:   v114 = bool.icmp.i8.ne v76, 0x0
      nextln:   v115 = bool.bitwise_not v114
      nextln:   v116 = bool.icmp.i8.eq v88, 0x1
      nextln:   v117 = bool.and v115, v116
      nextln:   jumpif v47, addr_0_block_11, addr_0_block_12
      check: addr_0_block_11: // preds: addr_0_block_10
      nextln:   v118 = bool.icmp.i8.eq v76, 0x0
      nextln:   jump addr_0_block_13(0x1)
      check: addr_0_block_12: // preds: addr_0_block_10
      nextln:   jump addr_0_block_13(0x0)
      check: addr_0_block_13(v119: bool): // preds: addr_0_block_11 addr_0_block_12
      nextln:   v120 = bool.icmp.i8.eq v76, 0x0
      nextln:   v121 = bool.and v48, v120
      nextln:   jumpif v121, addr_0_block_14, addr_0_block_15
      check: addr_0_block_14: // preds: addr_0_block_13
      nextln:   jump addr_0_block_16(0x0, 0x0)
      check: addr_0_block_15: // preds: addr_0_block_13
      nextln:   jump addr_0_block_16(0x0, 0x0)
      check: addr_0_block_16(v122: bool, v123: bool): // preds: addr_0_block_14 addr_0_block_15
      nextln:   v124 = bool.or v119, v122
      nextln:   jumpif v124, addr_0_block_17, addr_0_block_30
      check: addr_0_block_17: // preds: addr_0_block_16
      nextln:   v125 = i52.unsigned_from_bits v72
      nextln:   v126 = int.modulo v125, 0x8
      nextln:   v127 = int.sub v125, v126
      nextln:   v128 = i52.to_bits v127
      nextln:   v129 = bool.icmp.i52.eq v72, v128
      nextln:   v130 = i64.load v72
      nextln:   jumpif v119, addr_0_block_18, addr_0_block_19
      nextln:   jump addr_0_block_31(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v130, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, 0x0, 0x0)
      check: addr_0_block_18: // no preds!
      nextln:   jump addr_0_block_20
      check: addr_0_block_19: // no preds!
      nextln:   jump addr_0_block_20
      check: addr_0_block_20: // preds: addr_0_block_18 addr_0_block_19
      nextln:   jumpif v122, addr_0_block_21, addr_0_block_22
      check: addr_0_block_21: // preds: addr_0_block_20
      nextln:   jump addr_0_block_23
      check: addr_0_block_22: // preds: addr_0_block_20
      nextln:   jump addr_0_block_23
      check: addr_0_block_23: // preds: addr_0_block_21 addr_0_block_22
      nextln:   v1324 = i52.unsigned_from_bits v72
      nextln:   v1325 = int.modulo v1324, 0x8
      nextln:   v1326 = int.sub v1324, v1325
      nextln:   v1327 = i52.to_bits v1326
      nextln:   v1328 = bool.icmp.i52.eq v72, v1327
      nextln:   v1329 = bool.icmp.i52.eq v72, 0x13000000
      nextln:   jumpif v1329, addr_0_block_24, addr_0_block_28
      check: addr_0_block_24: // preds: addr_0_block_23
      nextln:   v1330 = i64.unsigned_from_bits v130
      nextln:   v1331 = bool.icmp.int.eq v1330, 0x4
      nextln:   jumpif v1331, addr_0_block_25, addr_0_block_26
      nextln:   jump addr_0_block_29
      check: addr_0_block_25: // no preds!
      nextln:   jump addr_0_block_27
      check: addr_0_block_26: // no preds!
      nextln:   v1332 = i8.trunc.i64 v130
      nextln:   v1333 = i8.unsigned_from_bits v1332
      nextln:   jump addr_0_block_27
      check: addr_0_block_27: // preds: addr_0_block_25 addr_0_block_26
      check: addr_0_block_28: // preds: addr_0_block_23
      nextln:   store.i64 v130, v72
      nextln:   jump addr_0_block_29
      check: addr_0_block_29: // preds: addr_0_block_24 addr_0_block_28
      check: addr_0_block_30: // preds: addr_0_block_16
      nextln:   jump addr_0_block_31(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_31(v131: i8, v132: i1, v133: i16, v134: i8, v135: bool, v136: bool, v137: bool, v138: int, v139: i64, v140: i8, v141: i8, v142: i52, v143: i1, v144: bool, v145: bool, v146: int, v147: i1, v148: bool, v149: i4, v150: i2, v151: i4, v152: i8, v153: i8, v154: i2, v155: i2, v156: bool, v157: i2, v158: i2, v159: bool, v160: bool, v161: bool, v162: bool, v163: i52, v164: i1, v165: i64, v166: i2, v167: bool): // preds: addr_0_block_17 addr_0_block_30
      nextln:   v168 = bool.icmp.i8.ne v76, 0x0
      nextln:   v169 = bool.bitwise_not v168
      nextln:   v170 = bool.and v169, 0x1
      nextln:   v171 = bool.icmp.i8.ne v76, 0x0
      nextln:   v172 = bool.bitwise_not v171
      nextln:   v173 = bool.and 0x1, v172
      nextln:   jumpif v173, addr_0_block_32, addr_0_block_33
      check: addr_0_block_32: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_33: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_34: // preds: addr_0_block_32 addr_0_block_33
      nextln:   v174 = bool.icmp.i8.ne v76, 0x0
      nextln:   jumpif v174, addr_0_block_35, addr_0_block_36
      check: addr_0_block_35: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37
      check: addr_0_block_36: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37
      check: addr_0_block_37: // preds: addr_0_block_35 addr_0_block_36
      nextln:   v175 = i52.unsigned_from_bits v99
      nextln:   v176 = int.modulo v175, 0x1
      nextln:   v177 = int.sub v175, v176
      nextln:   v178 = i52.to_bits v177
      nextln:   v179 = bool.icmp.i52.eq v99, v178
      nextln:   v180 = i8.load v99
      nextln:   v181 = i8.lshl v180, 0x0
      nextln:   v182 = i64.or 0x0, v181
      nextln:   v183 = bool.bitwise_not v11
      nextln:   jumpif v183, addr_0_block_38, addr_0_block_39
      check: addr_0_block_38: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(v11, 0xc)
      check: addr_0_block_39: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(v11, 0x0)
      check: addr_0_block_40(v184: i64, v185: i8): // preds: addr_0_block_38 addr_0_block_39
      nextln:   v186 = i64.wrapping_add v6, 0x1
      nextln:   v187 = i64.unsigned_from_bits v186
      nextln:   v188 = int.modulo v187, 0x1
      nextln:   v189 = int.sub v187, v188
      nextln:   v190 = i64.to_bits v189
      nextln:   v191 = bool.icmp.i64.eq v186, v190
      nextln:   v192 = i64.lshr v186, 0x30
      nextln:   v193 = i16.trunc.i64 v192
      nextln:   v194 = bool.icmp.i16.eq v193, 0x0
      nextln:   v195 = bool.bitwise_not v194
      nextln:   jumpif v195, addr_0_block_41, addr_0_block_42
      check: addr_0_block_41: // preds: addr_0_block_40
      nextln:   jump addr_0_block_43(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_44(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_42: // preds: addr_0_block_40
      nextln:   jump addr_0_block_43(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_43(v1314: i52, v1315: int, v1316: bool, v1317: bool): // preds: addr_0_block_42
      nextln:   v1318 = i52.trunc.i64 v186
      nextln:   jump addr_0_block_44(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1318, 0x1, 0x0)
      check: addr_0_block_44(v196: i3, v197: i1, v198: i1, v199: i1, v200: i1, v201: i4, v202: i1, v203: bool, v204: int, v205: int, v206: bool, v207: bool, v208: i8, v209: i8, v210: i52, v211: i1, v212: bool, v213: bool, v214: int, v215: i1, v216: bool, v217: i4, v218: i2, v219: i4, v220: i8, v221: i8, v222: i2, v223: i2, v224: bool, v225: i2, v226: i2, v227: bool, v228: bool, v229: bool, v230: bool, v231: i52, v232: i1, v233: i64, v234: i1, v235: i8, v236: i8, v237: i52, v238: i1, v239: bool, v240: bool, v241: int, v242: i1, v243: bool, v244: i4, v245: i2, v246: i4, v247: i8, v248: i8, v249: i2, v250: i2, v251: bool, v252: i2, v253: i2, v254: bool, v255: bool, v256: bool, v257: bool, v258: i52, v259: i1, v260: i64): // preds: addr_0_block_41 addr_0_block_43
      nextln:   v261 = bool.icmp.i8.ne v235, 0x0
      nextln:   v262 = bool.bitwise_not v261
      nextln:   v263 = bool.bitwise_not v11
      nextln:   v264 = bool.and v263, 0x1
      nextln:   v265 = bool.or v264, 0x0
      nextln:   v266 = bool.icmp.i8.ne v235, 0x0
      nextln:   v267 = bool.bitwise_not v266
      nextln:   v268 = bool.and v265, v267
      nextln:   v269 = bool.icmp.i8.eq v247, 0x1
      nextln:   v270 = bool.and v268, v269
      nextln:   jumpif v270, addr_0_block_45, addr_0_block_46
      check: addr_0_block_45: // preds: addr_0_block_44
      nextln:   jump addr_0_block_47
      check: addr_0_block_46: // preds: addr_0_block_44
      nextln:   jump addr_0_block_47
      check: addr_0_block_47: // preds: addr_0_block_45 addr_0_block_46
      nextln:   v271 = bool.icmp.i8.ne v235, 0x0
      nextln:   v272 = bool.bitwise_not v271
      nextln:   v273 = bool.icmp.i8.ne v235, 0x0
      nextln:   v274 = bool.bitwise_not v273
      nextln:   v275 = bool.icmp.i8.eq v247, 0x1
      nextln:   v276 = bool.and v274, v275
      nextln:   jumpif v206, addr_0_block_48, addr_0_block_49
      check: addr_0_block_48: // preds: addr_0_block_47
      nextln:   v277 = bool.icmp.i8.eq v235, 0x0
      nextln:   jump addr_0_block_50(0x1)
      check: addr_0_block_49: // preds: addr_0_block_47
      nextln:   jump addr_0_block_50(0x0)
      check: addr_0_block_50(v278: bool): // preds: addr_0_block_48 addr_0_block_49
      nextln:   v279 = bool.icmp.i8.eq v235, 0x0
      nextln:   v280 = bool.and v207, v279
      nextln:   jumpif v280, addr_0_block_51, addr_0_block_52
      check: addr_0_block_51: // preds: addr_0_block_50
      nextln:   jump addr_0_block_53(0x0, 0x0)
      check: addr_0_block_52: // preds: addr_0_block_50
      nextln:   jump addr_0_block_53(0x0, 0x0)
      check: addr_0_block_53(v281: bool, v282: bool): // preds: addr_0_block_51 addr_0_block_52
      nextln:   v283 = bool.or v278, v281
      nextln:   jumpif v283, addr_0_block_54, addr_0_block_67
      check: addr_0_block_54: // preds: addr_0_block_53
      nextln:   v284 = i52.unsigned_from_bits v231
      nextln:   v285 = int.modulo v284, 0x8
      nextln:   v286 = int.sub v284, v285
      nextln:   v287 = i52.to_bits v286
      nextln:   v288 = bool.icmp.i52.eq v231, v287
      nextln:   v289 = i64.load v231
      nextln:   jumpif v278, addr_0_block_55, addr_0_block_56
      nextln:   jump addr_0_block_68(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v289, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, 0x0, 0x0)
      check: addr_0_block_55: // no preds!
      nextln:   jump addr_0_block_57
      check: addr_0_block_56: // no preds!
      nextln:   jump addr_0_block_57
      check: addr_0_block_57: // preds: addr_0_block_55 addr_0_block_56
      nextln:   jumpif v281, addr_0_block_58, addr_0_block_59
      check: addr_0_block_58: // preds: addr_0_block_57
      nextln:   jump addr_0_block_60
      check: addr_0_block_59: // preds: addr_0_block_57
      nextln:   jump addr_0_block_60
      check: addr_0_block_60: // preds: addr_0_block_58 addr_0_block_59
      nextln:   v1334 = i52.unsigned_from_bits v231
      nextln:   v1335 = int.modulo v1334, 0x8
      nextln:   v1336 = int.sub v1334, v1335
      nextln:   v1337 = i52.to_bits v1336
      nextln:   v1338 = bool.icmp.i52.eq v231, v1337
      nextln:   v1339 = bool.icmp.i52.eq v231, 0x13000000
      nextln:   jumpif v1339, addr_0_block_61, addr_0_block_65
      check: addr_0_block_61: // preds: addr_0_block_60
      nextln:   v1340 = i64.unsigned_from_bits v289
      nextln:   v1341 = bool.icmp.int.eq v1340, 0x4
      nextln:   jumpif v1341, addr_0_block_62, addr_0_block_63
      nextln:   jump addr_0_block_66
      check: addr_0_block_62: // no preds!
      nextln:   jump addr_0_block_64
      check: addr_0_block_63: // no preds!
      nextln:   v1342 = i8.trunc.i64 v289
      nextln:   v1343 = i8.unsigned_from_bits v1342
      nextln:   jump addr_0_block_64
      check: addr_0_block_64: // preds: addr_0_block_62 addr_0_block_63
      check: addr_0_block_65: // preds: addr_0_block_60
      nextln:   store.i64 v289, v231
      nextln:   jump addr_0_block_66
      check: addr_0_block_66: // preds: addr_0_block_61 addr_0_block_65
      check: addr_0_block_67: // preds: addr_0_block_53
      nextln:   jump addr_0_block_68(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_68(v290: i8, v291: i1, v292: i16, v293: i8, v294: bool, v295: bool, v296: bool, v297: int, v298: i64, v299: i8, v300: i8, v301: i52, v302: i1, v303: bool, v304: bool, v305: int, v306: i1, v307: bool, v308: i4, v309: i2, v310: i4, v311: i8, v312: i8, v313: i2, v314: i2, v315: bool, v316: i2, v317: i2, v318: bool, v319: bool, v320: bool, v321: bool, v322: i52, v323: i1, v324: i64, v325: i2, v326: bool): // preds: addr_0_block_54 addr_0_block_67
      nextln:   v327 = bool.icmp.i8.ne v235, 0x0
      nextln:   v328 = bool.bitwise_not v327
      nextln:   v329 = bool.and v328, 0x1
      nextln:   v330 = bool.icmp.i8.ne v235, 0x0
      nextln:   v331 = bool.bitwise_not v330
      nextln:   v332 = bool.and 0x1, v331
      nextln:   jumpif v332, addr_0_block_69, addr_0_block_70
      check: addr_0_block_69: // preds: addr_0_block_68
      nextln:   jump addr_0_block_71
      check: addr_0_block_70: // preds: addr_0_block_68
      nextln:   jump addr_0_block_71
      check: addr_0_block_71: // preds: addr_0_block_69 addr_0_block_70
      nextln:   v333 = bool.icmp.i8.ne v235, 0x0
      nextln:   jumpif v333, addr_0_block_72, addr_0_block_73
      check: addr_0_block_72: // preds: addr_0_block_71
      nextln:   jump addr_0_block_74
      check: addr_0_block_73: // preds: addr_0_block_71
      nextln:   jump addr_0_block_74
      check: addr_0_block_74: // preds: addr_0_block_72 addr_0_block_73
      nextln:   v334 = i52.unsigned_from_bits v258
      nextln:   v335 = int.modulo v334, 0x1
      nextln:   v336 = int.sub v334, v335
      nextln:   v337 = i52.to_bits v336
      nextln:   v338 = bool.icmp.i52.eq v258, v337
      nextln:   v339 = i8.load v258
      nextln:   v340 = i8.lshl v339, 0x8
      nextln:   v341 = i64.or 0x0, v340
      nextln:   v342 = i64.wrapping_add v6, 0x2
      nextln:   v343 = i64.unsigned_from_bits v342
      nextln:   v344 = int.modulo v343, 0x1
      nextln:   v345 = int.sub v343, v344
      nextln:   v346 = i64.to_bits v345
      nextln:   v347 = bool.icmp.i64.eq v342, v346
      nextln:   v348 = i64.lshr v342, 0x30
      nextln:   v349 = i16.trunc.i64 v348
      nextln:   v350 = bool.icmp.i16.eq v349, 0x0
      nextln:   v351 = bool.bitwise_not v350
      nextln:   jumpif v351, addr_0_block_75, addr_0_block_76
      check: addr_0_block_75: // preds: addr_0_block_74
      nextln:   jump addr_0_block_77(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_78(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_76: // preds: addr_0_block_74
      nextln:   jump addr_0_block_77(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_77(v1309: i52, v1310: int, v1311: bool, v1312: bool): // preds: addr_0_block_76
      nextln:   v1313 = i52.trunc.i64 v342
      nextln:   jump addr_0_block_78(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1313, 0x1, 0x0)
      check: addr_0_block_78(v352: i3, v353: i1, v354: i1, v355: i1, v356: i1, v357: i4, v358: i1, v359: bool, v360: int, v361: int, v362: bool, v363: bool, v364: i8, v365: i8, v366: i52, v367: i1, v368: bool, v369: bool, v370: int, v371: i1, v372: bool, v373: i4, v374: i2, v375: i4, v376: i8, v377: i8, v378: i2, v379: i2, v380: bool, v381: i2, v382: i2, v383: bool, v384: bool, v385: bool, v386: bool, v387: i52, v388: i1, v389: i64, v390: i1, v391: i8, v392: i8, v393: i52, v394: i1, v395: bool, v396: bool, v397: int, v398: i1, v399: bool, v400: i4, v401: i2, v402: i4, v403: i8, v404: i8, v405: i2, v406: i2, v407: bool, v408: i2, v409: i2, v410: bool, v411: bool, v412: bool, v413: bool, v414: i52, v415: i1, v416: i64): // preds: addr_0_block_75 addr_0_block_77
      nextln:   v417 = bool.icmp.i8.ne v391, 0x0
      nextln:   v418 = bool.bitwise_not v417
      nextln:   v419 = bool.bitwise_not v11
      nextln:   v420 = bool.and v419, 0x1
      nextln:   v421 = bool.or v420, 0x0
      nextln:   v422 = bool.icmp.i8.ne v391, 0x0
      nextln:   v423 = bool.bitwise_not v422
      nextln:   v424 = bool.and v421, v423
      nextln:   v425 = bool.icmp.i8.eq v403, 0x1
      nextln:   v426 = bool.and v424, v425
      nextln:   jumpif v426, addr_0_block_79, addr_0_block_80
      check: addr_0_block_79: // preds: addr_0_block_78
      nextln:   jump addr_0_block_81
      check: addr_0_block_80: // preds: addr_0_block_78
      nextln:   jump addr_0_block_81
      check: addr_0_block_81: // preds: addr_0_block_79 addr_0_block_80
      nextln:   v427 = bool.icmp.i8.ne v391, 0x0
      nextln:   v428 = bool.bitwise_not v427
      nextln:   v429 = bool.icmp.i8.ne v391, 0x0
      nextln:   v430 = bool.bitwise_not v429
      nextln:   v431 = bool.icmp.i8.eq v403, 0x1
      nextln:   v432 = bool.and v430, v431
      nextln:   jumpif v362, addr_0_block_82, addr_0_block_83
      check: addr_0_block_82: // preds: addr_0_block_81
      nextln:   v433 = bool.icmp.i8.eq v391, 0x0
      nextln:   jump addr_0_block_84(0x1)
      check: addr_0_block_83: // preds: addr_0_block_81
      nextln:   jump addr_0_block_84(0x0)
      check: addr_0_block_84(v434: bool): // preds: addr_0_block_82 addr_0_block_83
      nextln:   v435 = bool.icmp.i8.eq v391, 0x0
      nextln:   v436 = bool.and v363, v435
      nextln:   jumpif v436, addr_0_block_85, addr_0_block_86
      check: addr_0_block_85: // preds: addr_0_block_84
      nextln:   jump addr_0_block_87(0x0, 0x0)
      check: addr_0_block_86: // preds: addr_0_block_84
      nextln:   jump addr_0_block_87(0x0, 0x0)
      check: addr_0_block_87(v437: bool, v438: bool): // preds: addr_0_block_85 addr_0_block_86
      nextln:   v439 = bool.or v434, v437
      nextln:   jumpif v439, addr_0_block_88, addr_0_block_101
      check: addr_0_block_88: // preds: addr_0_block_87
      nextln:   v440 = i52.unsigned_from_bits v387
      nextln:   v441 = int.modulo v440, 0x8
      nextln:   v442 = int.sub v440, v441
      nextln:   v443 = i52.to_bits v442
      nextln:   v444 = bool.icmp.i52.eq v387, v443
      nextln:   v445 = i64.load v387
      nextln:   jumpif v434, addr_0_block_89, addr_0_block_90
      nextln:   jump addr_0_block_102(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v445, v364, v365, v366, v367, v368, v369, v370, v371, v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, v382, v383, v384, v385, v386, v387, v388, v389, 0x0, 0x0)
      check: addr_0_block_89: // no preds!
      nextln:   jump addr_0_block_91
      check: addr_0_block_90: // no preds!
      nextln:   jump addr_0_block_91
      check: addr_0_block_91: // preds: addr_0_block_89 addr_0_block_90
      nextln:   jumpif v437, addr_0_block_92, addr_0_block_93
      check: addr_0_block_92: // preds: addr_0_block_91
      nextln:   jump addr_0_block_94
      check: addr_0_block_93: // preds: addr_0_block_91
      nextln:   jump addr_0_block_94
      check: addr_0_block_94: // preds: addr_0_block_92 addr_0_block_93
      nextln:   v1344 = i52.unsigned_from_bits v387
      nextln:   v1345 = int.modulo v1344, 0x8
      nextln:   v1346 = int.sub v1344, v1345
      nextln:   v1347 = i52.to_bits v1346
      nextln:   v1348 = bool.icmp.i52.eq v387, v1347
      nextln:   v1349 = bool.icmp.i52.eq v387, 0x13000000
      nextln:   jumpif v1349, addr_0_block_95, addr_0_block_99
      check: addr_0_block_95: // preds: addr_0_block_94
      nextln:   v1350 = i64.unsigned_from_bits v445
      nextln:   v1351 = bool.icmp.int.eq v1350, 0x4
      nextln:   jumpif v1351, addr_0_block_96, addr_0_block_97
      nextln:   jump addr_0_block_100
      check: addr_0_block_96: // no preds!
      nextln:   jump addr_0_block_98
      check: addr_0_block_97: // no preds!
      nextln:   v1352 = i8.trunc.i64 v445
      nextln:   v1353 = i8.unsigned_from_bits v1352
      nextln:   jump addr_0_block_98
      check: addr_0_block_98: // preds: addr_0_block_96 addr_0_block_97
      check: addr_0_block_99: // preds: addr_0_block_94
      nextln:   store.i64 v445, v387
      nextln:   jump addr_0_block_100
      check: addr_0_block_100: // preds: addr_0_block_95 addr_0_block_99
      check: addr_0_block_101: // preds: addr_0_block_87
      nextln:   jump addr_0_block_102(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_102(v446: i8, v447: i1, v448: i16, v449: i8, v450: bool, v451: bool, v452: bool, v453: int, v454: i64, v455: i8, v456: i8, v457: i52, v458: i1, v459: bool, v460: bool, v461: int, v462: i1, v463: bool, v464: i4, v465: i2, v466: i4, v467: i8, v468: i8, v469: i2, v470: i2, v471: bool, v472: i2, v473: i2, v474: bool, v475: bool, v476: bool, v477: bool, v478: i52, v479: i1, v480: i64, v481: i2, v482: bool): // preds: addr_0_block_88 addr_0_block_101
      nextln:   v483 = bool.icmp.i8.ne v391, 0x0
      nextln:   v484 = bool.bitwise_not v483
      nextln:   v485 = bool.and v484, 0x1
      nextln:   v486 = bool.icmp.i8.ne v391, 0x0
      nextln:   v487 = bool.bitwise_not v486
      nextln:   v488 = bool.and 0x1, v487
      nextln:   jumpif v488, addr_0_block_103, addr_0_block_104
      check: addr_0_block_103: // preds: addr_0_block_102
      nextln:   jump addr_0_block_105
      check: addr_0_block_104: // preds: addr_0_block_102
      nextln:   jump addr_0_block_105
      check: addr_0_block_105: // preds: addr_0_block_103 addr_0_block_104
      nextln:   v489 = bool.icmp.i8.ne v391, 0x0
      nextln:   jumpif v489, addr_0_block_106, addr_0_block_107
      check: addr_0_block_106: // preds: addr_0_block_105
      nextln:   jump addr_0_block_108
      check: addr_0_block_107: // preds: addr_0_block_105
      nextln:   jump addr_0_block_108
      check: addr_0_block_108: // preds: addr_0_block_106 addr_0_block_107
      nextln:   v490 = i52.unsigned_from_bits v414
      nextln:   v491 = int.modulo v490, 0x1
      nextln:   v492 = int.sub v490, v491
      nextln:   v493 = i52.to_bits v492
      nextln:   v494 = bool.icmp.i52.eq v414, v493
      nextln:   v495 = i8.load v414
      nextln:   v496 = i64.and v341, 0xffffffffff00ffff
      nextln:   v497 = i8.lshl v495, 0x10
      nextln:   v498 = i64.or v496, v497
      nextln:   v499 = i64.wrapping_add v6, 0x3
      nextln:   v500 = i64.unsigned_from_bits v499
      nextln:   v501 = int.modulo v500, 0x1
      nextln:   v502 = int.sub v500, v501
      nextln:   v503 = i64.to_bits v502
      nextln:   v504 = bool.icmp.i64.eq v499, v503
      nextln:   v505 = i64.lshr v499, 0x30
      nextln:   v506 = i16.trunc.i64 v505
      nextln:   v507 = bool.icmp.i16.eq v506, 0x0
      nextln:   v508 = bool.bitwise_not v507
      nextln:   jumpif v508, addr_0_block_109, addr_0_block_110
      check: addr_0_block_109: // preds: addr_0_block_108
      nextln:   jump addr_0_block_111(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_112(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_110: // preds: addr_0_block_108
      nextln:   jump addr_0_block_111(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_111(v1304: i52, v1305: int, v1306: bool, v1307: bool): // preds: addr_0_block_110
      nextln:   v1308 = i52.trunc.i64 v499
      nextln:   jump addr_0_block_112(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1308, 0x1, 0x0)
      check: addr_0_block_112(v509: i3, v510: i1, v511: i1, v512: i1, v513: i1, v514: i4, v515: i1, v516: bool, v517: int, v518: int, v519: bool, v520: bool, v521: i8, v522: i8, v523: i52, v524: i1, v525: bool, v526: bool, v527: int, v528: i1, v529: bool, v530: i4, v531: i2, v532: i4, v533: i8, v534: i8, v535: i2, v536: i2, v537: bool, v538: i2, v539: i2, v540: bool, v541: bool, v542: bool, v543: bool, v544: i52, v545: i1, v546: i64, v547: i1, v548: i8, v549: i8, v550: i52, v551: i1, v552: bool, v553: bool, v554: int, v555: i1, v556: bool, v557: i4, v558: i2, v559: i4, v560: i8, v561: i8, v562: i2, v563: i2, v564: bool, v565: i2, v566: i2, v567: bool, v568: bool, v569: bool, v570: bool, v571: i52, v572: i1, v573: i64): // preds: addr_0_block_109 addr_0_block_111
      nextln:   v574 = bool.icmp.i8.ne v548, 0x0
      nextln:   v575 = bool.bitwise_not v574
      nextln:   v576 = bool.bitwise_not v11
      nextln:   v577 = bool.and v576, 0x1
      nextln:   v578 = bool.or v577, 0x0
      nextln:   v579 = bool.icmp.i8.ne v548, 0x0
      nextln:   v580 = bool.bitwise_not v579
      nextln:   v581 = bool.and v578, v580
      nextln:   v582 = bool.icmp.i8.eq v560, 0x1
      nextln:   v583 = bool.and v581, v582
      nextln:   jumpif v583, addr_0_block_113, addr_0_block_114
      check: addr_0_block_113: // preds: addr_0_block_112
      nextln:   jump addr_0_block_115
      check: addr_0_block_114: // preds: addr_0_block_112
      nextln:   jump addr_0_block_115
      check: addr_0_block_115: // preds: addr_0_block_113 addr_0_block_114
      nextln:   v584 = bool.icmp.i8.ne v548, 0x0
      nextln:   v585 = bool.bitwise_not v584
      nextln:   v586 = bool.icmp.i8.ne v548, 0x0
      nextln:   v587 = bool.bitwise_not v586
      nextln:   v588 = bool.icmp.i8.eq v560, 0x1
      nextln:   v589 = bool.and v587, v588
      nextln:   jumpif v519, addr_0_block_116, addr_0_block_117
      check: addr_0_block_116: // preds: addr_0_block_115
      nextln:   v590 = bool.icmp.i8.eq v548, 0x0
      nextln:   jump addr_0_block_118(0x1)
      check: addr_0_block_117: // preds: addr_0_block_115
      nextln:   jump addr_0_block_118(0x0)
      check: addr_0_block_118(v591: bool): // preds: addr_0_block_116 addr_0_block_117
      nextln:   v592 = bool.icmp.i8.eq v548, 0x0
      nextln:   v593 = bool.and v520, v592
      nextln:   jumpif v593, addr_0_block_119, addr_0_block_120
      check: addr_0_block_119: // preds: addr_0_block_118
      nextln:   jump addr_0_block_121(0x0, 0x0)
      check: addr_0_block_120: // preds: addr_0_block_118
      nextln:   jump addr_0_block_121(0x0, 0x0)
      check: addr_0_block_121(v594: bool, v595: bool): // preds: addr_0_block_119 addr_0_block_120
      nextln:   v596 = bool.or v591, v594
      nextln:   jumpif v596, addr_0_block_122, addr_0_block_135
      check: addr_0_block_122: // preds: addr_0_block_121
      nextln:   v597 = i52.unsigned_from_bits v544
      nextln:   v598 = int.modulo v597, 0x8
      nextln:   v599 = int.sub v597, v598
      nextln:   v600 = i52.to_bits v599
      nextln:   v601 = bool.icmp.i52.eq v544, v600
      nextln:   v602 = i64.load v544
      nextln:   jumpif v591, addr_0_block_123, addr_0_block_124
      nextln:   jump addr_0_block_136(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v602, v521, v522, v523, v524, v525, v526, v527, v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v538, v539, v540, v541, v542, v543, v544, v545, v546, 0x0, 0x0)
      check: addr_0_block_123: // no preds!
      nextln:   jump addr_0_block_125
      check: addr_0_block_124: // no preds!
      nextln:   jump addr_0_block_125
      check: addr_0_block_125: // preds: addr_0_block_123 addr_0_block_124
      nextln:   jumpif v594, addr_0_block_126, addr_0_block_127
      check: addr_0_block_126: // preds: addr_0_block_125
      nextln:   jump addr_0_block_128
      check: addr_0_block_127: // preds: addr_0_block_125
      nextln:   jump addr_0_block_128
      check: addr_0_block_128: // preds: addr_0_block_126 addr_0_block_127
      nextln:   v1354 = i52.unsigned_from_bits v544
      nextln:   v1355 = int.modulo v1354, 0x8
      nextln:   v1356 = int.sub v1354, v1355
      nextln:   v1357 = i52.to_bits v1356
      nextln:   v1358 = bool.icmp.i52.eq v544, v1357
      nextln:   v1359 = bool.icmp.i52.eq v544, 0x13000000
      nextln:   jumpif v1359, addr_0_block_129, addr_0_block_133
      check: addr_0_block_129: // preds: addr_0_block_128
      nextln:   v1360 = i64.unsigned_from_bits v602
      nextln:   v1361 = bool.icmp.int.eq v1360, 0x4
      nextln:   jumpif v1361, addr_0_block_130, addr_0_block_131
      nextln:   jump addr_0_block_134
      check: addr_0_block_130: // no preds!
      nextln:   jump addr_0_block_132
      check: addr_0_block_131: // no preds!
      nextln:   v1362 = i8.trunc.i64 v602
      nextln:   v1363 = i8.unsigned_from_bits v1362
      nextln:   jump addr_0_block_132
      check: addr_0_block_132: // preds: addr_0_block_130 addr_0_block_131
      check: addr_0_block_133: // preds: addr_0_block_128
      nextln:   store.i64 v602, v544
      nextln:   jump addr_0_block_134
      check: addr_0_block_134: // preds: addr_0_block_129 addr_0_block_133
      check: addr_0_block_135: // preds: addr_0_block_121
      nextln:   jump addr_0_block_136(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_136(v603: i8, v604: i1, v605: i16, v606: i8, v607: bool, v608: bool, v609: bool, v610: int, v611: i64, v612: i8, v613: i8, v614: i52, v615: i1, v616: bool, v617: bool, v618: int, v619: i1, v620: bool, v621: i4, v622: i2, v623: i4, v624: i8, v625: i8, v626: i2, v627: i2, v628: bool, v629: i2, v630: i2, v631: bool, v632: bool, v633: bool, v634: bool, v635: i52, v636: i1, v637: i64, v638: i2, v639: bool): // preds: addr_0_block_122 addr_0_block_135
      nextln:   v640 = bool.icmp.i8.ne v548, 0x0
      nextln:   v641 = bool.bitwise_not v640
      nextln:   v642 = bool.and v641, 0x1
      nextln:   v643 = bool.icmp.i8.ne v548, 0x0
      nextln:   v644 = bool.bitwise_not v643
      nextln:   v645 = bool.and 0x1, v644
      nextln:   jumpif v645, addr_0_block_137, addr_0_block_138
      check: addr_0_block_137: // preds: addr_0_block_136
      nextln:   jump addr_0_block_139
      check: addr_0_block_138: // preds: addr_0_block_136
      nextln:   jump addr_0_block_139
      check: addr_0_block_139: // preds: addr_0_block_137 addr_0_block_138
      nextln:   v646 = bool.icmp.i8.ne v548, 0x0
      nextln:   jumpif v646, addr_0_block_140, addr_0_block_141
      check: addr_0_block_140: // preds: addr_0_block_139
      nextln:   jump addr_0_block_142
      check: addr_0_block_141: // preds: addr_0_block_139
      nextln:   jump addr_0_block_142
      check: addr_0_block_142: // preds: addr_0_block_140 addr_0_block_141
      nextln:   v647 = i52.unsigned_from_bits v571
      nextln:   v648 = int.modulo v647, 0x1
      nextln:   v649 = int.sub v647, v648
      nextln:   v650 = i52.to_bits v649
      nextln:   v651 = bool.icmp.i52.eq v571, v650
      nextln:   v652 = i8.load v571
      nextln:   v653 = i64.and v498, 0xffffffff00ffffff
      nextln:   v654 = i8.lshl v652, 0x18
      nextln:   v655 = i64.or v653, v654
      nextln:   v656 = i64.wrapping_add v6, 0x4
      nextln:   v657 = i64.unsigned_from_bits v656
      nextln:   v658 = int.modulo v657, 0x1
      nextln:   v659 = int.sub v657, v658
      nextln:   v660 = i64.to_bits v659
      nextln:   v661 = bool.icmp.i64.eq v656, v660
      nextln:   v662 = i64.lshr v656, 0x30
      nextln:   v663 = i16.trunc.i64 v662
      nextln:   v664 = bool.icmp.i16.eq v663, 0x0
      nextln:   v665 = bool.bitwise_not v664
      nextln:   jumpif v665, addr_0_block_143, addr_0_block_144
      check: addr_0_block_143: // preds: addr_0_block_142
      nextln:   jump addr_0_block_145(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_146(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_144: // preds: addr_0_block_142
      nextln:   jump addr_0_block_145(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_145(v1299: i52, v1300: int, v1301: bool, v1302: bool): // preds: addr_0_block_144
      nextln:   v1303 = i52.trunc.i64 v656
      nextln:   jump addr_0_block_146(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1303, 0x1, 0x0)
      check: addr_0_block_146(v666: i3, v667: i1, v668: i1, v669: i1, v670: i1, v671: i4, v672: i1, v673: bool, v674: int, v675: int, v676: bool, v677: bool, v678: i8, v679: i8, v680: i52, v681: i1, v682: bool, v683: bool, v684: int, v685: i1, v686: bool, v687: i4, v688: i2, v689: i4, v690: i8, v691: i8, v692: i2, v693: i2, v694: bool, v695: i2, v696: i2, v697: bool, v698: bool, v699: bool, v700: bool, v701: i52, v702: i1, v703: i64, v704: i1, v705: i8, v706: i8, v707: i52, v708: i1, v709: bool, v710: bool, v711: int, v712: i1, v713: bool, v714: i4, v715: i2, v716: i4, v717: i8, v718: i8, v719: i2, v720: i2, v721: bool, v722: i2, v723: i2, v724: bool, v725: bool, v726: bool, v727: bool, v728: i52, v729: i1, v730: i64): // preds: addr_0_block_143 addr_0_block_145
      nextln:   v731 = bool.icmp.i8.ne v705, 0x0
      nextln:   v732 = bool.bitwise_not v731
      nextln:   v733 = bool.bitwise_not v11
      nextln:   v734 = bool.and v733, 0x1
      nextln:   v735 = bool.or v734, 0x0
      nextln:   v736 = bool.icmp.i8.ne v705, 0x0
      nextln:   v737 = bool.bitwise_not v736
      nextln:   v738 = bool.and v735, v737
      nextln:   v739 = bool.icmp.i8.eq v717, 0x1
      nextln:   v740 = bool.and v738, v739
      nextln:   jumpif v740, addr_0_block_147, addr_0_block_148
      check: addr_0_block_147: // preds: addr_0_block_146
      nextln:   jump addr_0_block_149
      check: addr_0_block_148: // preds: addr_0_block_146
      nextln:   jump addr_0_block_149
      check: addr_0_block_149: // preds: addr_0_block_147 addr_0_block_148
      nextln:   v741 = bool.icmp.i8.ne v705, 0x0
      nextln:   v742 = bool.bitwise_not v741
      nextln:   v743 = bool.icmp.i8.ne v705, 0x0
      nextln:   v744 = bool.bitwise_not v743
      nextln:   v745 = bool.icmp.i8.eq v717, 0x1
      nextln:   v746 = bool.and v744, v745
      nextln:   jumpif v676, addr_0_block_150, addr_0_block_151
      check: addr_0_block_150: // preds: addr_0_block_149
      nextln:   v747 = bool.icmp.i8.eq v705, 0x0
      nextln:   jump addr_0_block_152(0x1)
      check: addr_0_block_151: // preds: addr_0_block_149
      nextln:   jump addr_0_block_152(0x0)
      check: addr_0_block_152(v748: bool): // preds: addr_0_block_150 addr_0_block_151
      nextln:   v749 = bool.icmp.i8.eq v705, 0x0
      nextln:   v750 = bool.and v677, v749
      nextln:   jumpif v750, addr_0_block_153, addr_0_block_154
      check: addr_0_block_153: // preds: addr_0_block_152
      nextln:   jump addr_0_block_155(0x0, 0x0)
      check: addr_0_block_154: // preds: addr_0_block_152
      nextln:   jump addr_0_block_155(0x0, 0x0)
      check: addr_0_block_155(v751: bool, v752: bool): // preds: addr_0_block_153 addr_0_block_154
      nextln:   v753 = bool.or v748, v751
      nextln:   jumpif v753, addr_0_block_156, addr_0_block_169
      check: addr_0_block_156: // preds: addr_0_block_155
      nextln:   v754 = i52.unsigned_from_bits v701
      nextln:   v755 = int.modulo v754, 0x8
      nextln:   v756 = int.sub v754, v755
      nextln:   v757 = i52.to_bits v756
      nextln:   v758 = bool.icmp.i52.eq v701, v757
      nextln:   v759 = i64.load v701
      nextln:   jumpif v748, addr_0_block_157, addr_0_block_158
      nextln:   jump addr_0_block_170(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v759, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, v689, v690, v691, v692, v693, v694, v695, v696, v697, v698, v699, v700, v701, v702, v703, 0x0, 0x0)
      check: addr_0_block_157: // no preds!
      nextln:   jump addr_0_block_159
      check: addr_0_block_158: // no preds!
      nextln:   jump addr_0_block_159
      check: addr_0_block_159: // preds: addr_0_block_157 addr_0_block_158
      nextln:   jumpif v751, addr_0_block_160, addr_0_block_161
      check: addr_0_block_160: // preds: addr_0_block_159
      nextln:   jump addr_0_block_162
      check: addr_0_block_161: // preds: addr_0_block_159
      nextln:   jump addr_0_block_162
      check: addr_0_block_162: // preds: addr_0_block_160 addr_0_block_161
      nextln:   v1364 = i52.unsigned_from_bits v701
      nextln:   v1365 = int.modulo v1364, 0x8
      nextln:   v1366 = int.sub v1364, v1365
      nextln:   v1367 = i52.to_bits v1366
      nextln:   v1368 = bool.icmp.i52.eq v701, v1367
      nextln:   v1369 = bool.icmp.i52.eq v701, 0x13000000
      nextln:   jumpif v1369, addr_0_block_163, addr_0_block_167
      check: addr_0_block_163: // preds: addr_0_block_162
      nextln:   v1370 = i64.unsigned_from_bits v759
      nextln:   v1371 = bool.icmp.int.eq v1370, 0x4
      nextln:   jumpif v1371, addr_0_block_164, addr_0_block_165
      nextln:   jump addr_0_block_168
      check: addr_0_block_164: // no preds!
      nextln:   jump addr_0_block_166
      check: addr_0_block_165: // no preds!
      nextln:   v1372 = i8.trunc.i64 v759
      nextln:   v1373 = i8.unsigned_from_bits v1372
      nextln:   jump addr_0_block_166
      check: addr_0_block_166: // preds: addr_0_block_164 addr_0_block_165
      check: addr_0_block_167: // preds: addr_0_block_162
      nextln:   store.i64 v759, v701
      nextln:   jump addr_0_block_168
      check: addr_0_block_168: // preds: addr_0_block_163 addr_0_block_167
      check: addr_0_block_169: // preds: addr_0_block_155
      nextln:   jump addr_0_block_170(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_170(v760: i8, v761: i1, v762: i16, v763: i8, v764: bool, v765: bool, v766: bool, v767: int, v768: i64, v769: i8, v770: i8, v771: i52, v772: i1, v773: bool, v774: bool, v775: int, v776: i1, v777: bool, v778: i4, v779: i2, v780: i4, v781: i8, v782: i8, v783: i2, v784: i2, v785: bool, v786: i2, v787: i2, v788: bool, v789: bool, v790: bool, v791: bool, v792: i52, v793: i1, v794: i64, v795: i2, v796: bool): // preds: addr_0_block_156 addr_0_block_169
      nextln:   v797 = bool.icmp.i8.ne v705, 0x0
      nextln:   v798 = bool.bitwise_not v797
      nextln:   v799 = bool.and v798, 0x1
      nextln:   v800 = bool.icmp.i8.ne v705, 0x0
      nextln:   v801 = bool.bitwise_not v800
      nextln:   v802 = bool.and 0x1, v801
      nextln:   jumpif v802, addr_0_block_171, addr_0_block_172
      check: addr_0_block_171: // preds: addr_0_block_170
      nextln:   jump addr_0_block_173
      check: addr_0_block_172: // preds: addr_0_block_170
      nextln:   jump addr_0_block_173
      check: addr_0_block_173: // preds: addr_0_block_171 addr_0_block_172
      nextln:   v803 = bool.icmp.i8.ne v705, 0x0
      nextln:   jumpif v803, addr_0_block_174, addr_0_block_175
      check: addr_0_block_174: // preds: addr_0_block_173
      nextln:   jump addr_0_block_176
      check: addr_0_block_175: // preds: addr_0_block_173
      nextln:   jump addr_0_block_176
      check: addr_0_block_176: // preds: addr_0_block_174 addr_0_block_175
      nextln:   v804 = i52.unsigned_from_bits v728
      nextln:   v805 = int.modulo v804, 0x1
      nextln:   v806 = int.sub v804, v805
      nextln:   v807 = i52.to_bits v806
      nextln:   v808 = bool.icmp.i52.eq v728, v807
      nextln:   v809 = i8.load v728
      nextln:   v810 = i64.and v655, 0xffffff00ffffffff
      nextln:   v811 = i8.lshl v809, 0x20
      nextln:   v812 = i64.or v810, v811
      nextln:   v813 = i64.wrapping_add v6, 0x5
      nextln:   v814 = i64.unsigned_from_bits v813
      nextln:   v815 = int.modulo v814, 0x1
      nextln:   v816 = int.sub v814, v815
      nextln:   v817 = i64.to_bits v816
      nextln:   v818 = bool.icmp.i64.eq v813, v817
      nextln:   v819 = i64.lshr v813, 0x30
      nextln:   v820 = i16.trunc.i64 v819
      nextln:   v821 = bool.icmp.i16.eq v820, 0x0
      nextln:   v822 = bool.bitwise_not v821
      nextln:   jumpif v822, addr_0_block_177, addr_0_block_178
      check: addr_0_block_177: // preds: addr_0_block_176
      nextln:   jump addr_0_block_179(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_180(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_178: // preds: addr_0_block_176
      nextln:   jump addr_0_block_179(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_179(v1294: i52, v1295: int, v1296: bool, v1297: bool): // preds: addr_0_block_178
      nextln:   v1298 = i52.trunc.i64 v813
      nextln:   jump addr_0_block_180(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1298, 0x1, 0x0)
      check: addr_0_block_180(v823: i3, v824: i1, v825: i1, v826: i1, v827: i1, v828: i4, v829: i1, v830: bool, v831: int, v832: int, v833: bool, v834: bool, v835: i8, v836: i8, v837: i52, v838: i1, v839: bool, v840: bool, v841: int, v842: i1, v843: bool, v844: i4, v845: i2, v846: i4, v847: i8, v848: i8, v849: i2, v850: i2, v851: bool, v852: i2, v853: i2, v854: bool, v855: bool, v856: bool, v857: bool, v858: i52, v859: i1, v860: i64, v861: i1, v862: i8, v863: i8, v864: i52, v865: i1, v866: bool, v867: bool, v868: int, v869: i1, v870: bool, v871: i4, v872: i2, v873: i4, v874: i8, v875: i8, v876: i2, v877: i2, v878: bool, v879: i2, v880: i2, v881: bool, v882: bool, v883: bool, v884: bool, v885: i52, v886: i1, v887: i64): // preds: addr_0_block_177 addr_0_block_179
      nextln:   v888 = bool.icmp.i8.ne v862, 0x0
      nextln:   v889 = bool.bitwise_not v888
      nextln:   v890 = bool.bitwise_not v11
      nextln:   v891 = bool.and v890, 0x1
      nextln:   v892 = bool.or v891, 0x0
      nextln:   v893 = bool.icmp.i8.ne v862, 0x0
      nextln:   v894 = bool.bitwise_not v893
      nextln:   v895 = bool.and v892, v894
      nextln:   v896 = bool.icmp.i8.eq v874, 0x1
      nextln:   v897 = bool.and v895, v896
      nextln:   jumpif v897, addr_0_block_181, addr_0_block_182
      check: addr_0_block_181: // preds: addr_0_block_180
      nextln:   jump addr_0_block_183
      check: addr_0_block_182: // preds: addr_0_block_180
      nextln:   jump addr_0_block_183
      check: addr_0_block_183: // preds: addr_0_block_181 addr_0_block_182
      nextln:   v898 = bool.icmp.i8.ne v862, 0x0
      nextln:   v899 = bool.bitwise_not v898
      nextln:   v900 = bool.icmp.i8.ne v862, 0x0
      nextln:   v901 = bool.bitwise_not v900
      nextln:   v902 = bool.icmp.i8.eq v874, 0x1
      nextln:   v903 = bool.and v901, v902
      nextln:   jumpif v833, addr_0_block_184, addr_0_block_185
      check: addr_0_block_184: // preds: addr_0_block_183
      nextln:   v904 = bool.icmp.i8.eq v862, 0x0
      nextln:   jump addr_0_block_186(0x1)
      check: addr_0_block_185: // preds: addr_0_block_183
      nextln:   jump addr_0_block_186(0x0)
      check: addr_0_block_186(v905: bool): // preds: addr_0_block_184 addr_0_block_185
      nextln:   v906 = bool.icmp.i8.eq v862, 0x0
      nextln:   v907 = bool.and v834, v906
      nextln:   jumpif v907, addr_0_block_187, addr_0_block_188
      check: addr_0_block_187: // preds: addr_0_block_186
      nextln:   jump addr_0_block_189(0x0, 0x0)
      check: addr_0_block_188: // preds: addr_0_block_186
      nextln:   jump addr_0_block_189(0x0, 0x0)
      check: addr_0_block_189(v908: bool, v909: bool): // preds: addr_0_block_187 addr_0_block_188
      nextln:   v910 = bool.or v905, v908
      nextln:   jumpif v910, addr_0_block_190, addr_0_block_203
      check: addr_0_block_190: // preds: addr_0_block_189
      nextln:   v911 = i52.unsigned_from_bits v858
      nextln:   v912 = int.modulo v911, 0x8
      nextln:   v913 = int.sub v911, v912
      nextln:   v914 = i52.to_bits v913
      nextln:   v915 = bool.icmp.i52.eq v858, v914
      nextln:   v916 = i64.load v858
      nextln:   jumpif v905, addr_0_block_191, addr_0_block_192
      nextln:   jump addr_0_block_204(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v916, v835, v836, v837, v838, v839, v840, v841, v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v852, v853, v854, v855, v856, v857, v858, v859, v860, 0x0, 0x0)
      check: addr_0_block_191: // no preds!
      nextln:   jump addr_0_block_193
      check: addr_0_block_192: // no preds!
      nextln:   jump addr_0_block_193
      check: addr_0_block_193: // preds: addr_0_block_191 addr_0_block_192
      nextln:   jumpif v908, addr_0_block_194, addr_0_block_195
      check: addr_0_block_194: // preds: addr_0_block_193
      nextln:   jump addr_0_block_196
      check: addr_0_block_195: // preds: addr_0_block_193
      nextln:   jump addr_0_block_196
      check: addr_0_block_196: // preds: addr_0_block_194 addr_0_block_195
      nextln:   v1374 = i52.unsigned_from_bits v858
      nextln:   v1375 = int.modulo v1374, 0x8
      nextln:   v1376 = int.sub v1374, v1375
      nextln:   v1377 = i52.to_bits v1376
      nextln:   v1378 = bool.icmp.i52.eq v858, v1377
      nextln:   v1379 = bool.icmp.i52.eq v858, 0x13000000
      nextln:   jumpif v1379, addr_0_block_197, addr_0_block_201
      check: addr_0_block_197: // preds: addr_0_block_196
      nextln:   v1380 = i64.unsigned_from_bits v916
      nextln:   v1381 = bool.icmp.int.eq v1380, 0x4
      nextln:   jumpif v1381, addr_0_block_198, addr_0_block_199
      nextln:   jump addr_0_block_202
      check: addr_0_block_198: // no preds!
      nextln:   jump addr_0_block_200
      check: addr_0_block_199: // no preds!
      nextln:   v1382 = i8.trunc.i64 v916
      nextln:   v1383 = i8.unsigned_from_bits v1382
      nextln:   jump addr_0_block_200
      check: addr_0_block_200: // preds: addr_0_block_198 addr_0_block_199
      check: addr_0_block_201: // preds: addr_0_block_196
      nextln:   store.i64 v916, v858
      nextln:   jump addr_0_block_202
      check: addr_0_block_202: // preds: addr_0_block_197 addr_0_block_201
      check: addr_0_block_203: // preds: addr_0_block_189
      nextln:   jump addr_0_block_204(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_204(v917: i8, v918: i1, v919: i16, v920: i8, v921: bool, v922: bool, v923: bool, v924: int, v925: i64, v926: i8, v927: i8, v928: i52, v929: i1, v930: bool, v931: bool, v932: int, v933: i1, v934: bool, v935: i4, v936: i2, v937: i4, v938: i8, v939: i8, v940: i2, v941: i2, v942: bool, v943: i2, v944: i2, v945: bool, v946: bool, v947: bool, v948: bool, v949: i52, v950: i1, v951: i64, v952: i2, v953: bool): // preds: addr_0_block_190 addr_0_block_203
      nextln:   v954 = bool.icmp.i8.ne v862, 0x0
      nextln:   v955 = bool.bitwise_not v954
      nextln:   v956 = bool.and v955, 0x1
      nextln:   v957 = bool.icmp.i8.ne v862, 0x0
      nextln:   v958 = bool.bitwise_not v957
      nextln:   v959 = bool.and 0x1, v958
      nextln:   jumpif v959, addr_0_block_205, addr_0_block_206
      check: addr_0_block_205: // preds: addr_0_block_204
      nextln:   jump addr_0_block_207
      check: addr_0_block_206: // preds: addr_0_block_204
      nextln:   jump addr_0_block_207
      check: addr_0_block_207: // preds: addr_0_block_205 addr_0_block_206
      nextln:   v960 = bool.icmp.i8.ne v862, 0x0
      nextln:   jumpif v960, addr_0_block_208, addr_0_block_209
      check: addr_0_block_208: // preds: addr_0_block_207
      nextln:   jump addr_0_block_210
      check: addr_0_block_209: // preds: addr_0_block_207
      nextln:   jump addr_0_block_210
      check: addr_0_block_210: // preds: addr_0_block_208 addr_0_block_209
      nextln:   v961 = i52.unsigned_from_bits v885
      nextln:   v962 = int.modulo v961, 0x1
      nextln:   v963 = int.sub v961, v962
      nextln:   v964 = i52.to_bits v963
      nextln:   v965 = bool.icmp.i52.eq v885, v964
      nextln:   v966 = i8.load v885
      nextln:   v967 = i64.and v812, 0xffff00ffffffffff
      nextln:   v968 = i8.lshl v966, 0x28
      nextln:   v969 = i64.or v967, v968
      nextln:   v970 = i64.wrapping_add v6, 0x6
      nextln:   v971 = i64.unsigned_from_bits v970
      nextln:   v972 = int.modulo v971, 0x1
      nextln:   v973 = int.sub v971, v972
      nextln:   v974 = i64.to_bits v973
      nextln:   v975 = bool.icmp.i64.eq v970, v974
      nextln:   v976 = i64.lshr v970, 0x30
      nextln:   v977 = i16.trunc.i64 v976
      nextln:   v978 = bool.icmp.i16.eq v977, 0x0
      nextln:   v979 = bool.bitwise_not v978
      nextln:   jumpif v979, addr_0_block_211, addr_0_block_212
      check: addr_0_block_211: // preds: addr_0_block_210
      nextln:   jump addr_0_block_213(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_214(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_212: // preds: addr_0_block_210
      nextln:   jump addr_0_block_213(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_213(v1289: i52, v1290: int, v1291: bool, v1292: bool): // preds: addr_0_block_212
      nextln:   v1293 = i52.trunc.i64 v970
      nextln:   jump addr_0_block_214(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1293, 0x1, 0x0)
      check: addr_0_block_214(v980: i3, v981: i1, v982: i1, v983: i1, v984: i1, v985: i4, v986: i1, v987: bool, v988: int, v989: int, v990: bool, v991: bool, v992: i8, v993: i8, v994: i52, v995: i1, v996: bool, v997: bool, v998: int, v999: i1, v1000: bool, v1001: i4, v1002: i2, v1003: i4, v1004: i8, v1005: i8, v1006: i2, v1007: i2, v1008: bool, v1009: i2, v1010: i2, v1011: bool, v1012: bool, v1013: bool, v1014: bool, v1015: i52, v1016: i1, v1017: i64, v1018: i1, v1019: i8, v1020: i8, v1021: i52, v1022: i1, v1023: bool, v1024: bool, v1025: int, v1026: i1, v1027: bool, v1028: i4, v1029: i2, v1030: i4, v1031: i8, v1032: i8, v1033: i2, v1034: i2, v1035: bool, v1036: i2, v1037: i2, v1038: bool, v1039: bool, v1040: bool, v1041: bool, v1042: i52, v1043: i1, v1044: i64): // preds: addr_0_block_211 addr_0_block_213
      nextln:   v1045 = bool.icmp.i8.ne v1019, 0x0
      nextln:   v1046 = bool.bitwise_not v1045
      nextln:   v1047 = bool.bitwise_not v11
      nextln:   v1048 = bool.and v1047, 0x1
      nextln:   v1049 = bool.or v1048, 0x0
      nextln:   v1050 = bool.icmp.i8.ne v1019, 0x0
      nextln:   v1051 = bool.bitwise_not v1050
      nextln:   v1052 = bool.and v1049, v1051
      nextln:   v1053 = bool.icmp.i8.eq v1031, 0x1
      nextln:   v1054 = bool.and v1052, v1053
      nextln:   jumpif v1054, addr_0_block_215, addr_0_block_216
      check: addr_0_block_215: // preds: addr_0_block_214
      nextln:   jump addr_0_block_217
      check: addr_0_block_216: // preds: addr_0_block_214
      nextln:   jump addr_0_block_217
      check: addr_0_block_217: // preds: addr_0_block_215 addr_0_block_216
      nextln:   v1055 = bool.icmp.i8.ne v1019, 0x0
      nextln:   v1056 = bool.bitwise_not v1055
      nextln:   v1057 = bool.icmp.i8.ne v1019, 0x0
      nextln:   v1058 = bool.bitwise_not v1057
      nextln:   v1059 = bool.icmp.i8.eq v1031, 0x1
      nextln:   v1060 = bool.and v1058, v1059
      nextln:   jumpif v990, addr_0_block_218, addr_0_block_219
      check: addr_0_block_218: // preds: addr_0_block_217
      nextln:   v1061 = bool.icmp.i8.eq v1019, 0x0
      nextln:   jump addr_0_block_220(0x1)
      check: addr_0_block_219: // preds: addr_0_block_217
      nextln:   jump addr_0_block_220(0x0)
      check: addr_0_block_220(v1062: bool): // preds: addr_0_block_218 addr_0_block_219
      nextln:   v1063 = bool.icmp.i8.eq v1019, 0x0
      nextln:   v1064 = bool.and v991, v1063
      nextln:   jumpif v1064, addr_0_block_221, addr_0_block_222
      check: addr_0_block_221: // preds: addr_0_block_220
      nextln:   jump addr_0_block_223(0x0, 0x0)
      check: addr_0_block_222: // preds: addr_0_block_220
      nextln:   jump addr_0_block_223(0x0, 0x0)
      check: addr_0_block_223(v1065: bool, v1066: bool): // preds: addr_0_block_221 addr_0_block_222
      nextln:   v1067 = bool.or v1062, v1065
      nextln:   jumpif v1067, addr_0_block_224, addr_0_block_237
      check: addr_0_block_224: // preds: addr_0_block_223
      nextln:   v1068 = i52.unsigned_from_bits v1015
      nextln:   v1069 = int.modulo v1068, 0x8
      nextln:   v1070 = int.sub v1068, v1069
      nextln:   v1071 = i52.to_bits v1070
      nextln:   v1072 = bool.icmp.i52.eq v1015, v1071
      nextln:   v1073 = i64.load v1015
      nextln:   jumpif v1062, addr_0_block_225, addr_0_block_226
      nextln:   jump addr_0_block_238(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v1073, v992, v993, v994, v995, v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1016, v1017, 0x0, 0x0)
      check: addr_0_block_225: // no preds!
      nextln:   jump addr_0_block_227
      check: addr_0_block_226: // no preds!
      nextln:   jump addr_0_block_227
      check: addr_0_block_227: // preds: addr_0_block_225 addr_0_block_226
      nextln:   jumpif v1065, addr_0_block_228, addr_0_block_229
      check: addr_0_block_228: // preds: addr_0_block_227
      nextln:   jump addr_0_block_230
      check: addr_0_block_229: // preds: addr_0_block_227
      nextln:   jump addr_0_block_230
      check: addr_0_block_230: // preds: addr_0_block_228 addr_0_block_229
      nextln:   v1384 = i52.unsigned_from_bits v1015
      nextln:   v1385 = int.modulo v1384, 0x8
      nextln:   v1386 = int.sub v1384, v1385
      nextln:   v1387 = i52.to_bits v1386
      nextln:   v1388 = bool.icmp.i52.eq v1015, v1387
      nextln:   v1389 = bool.icmp.i52.eq v1015, 0x13000000
      nextln:   jumpif v1389, addr_0_block_231, addr_0_block_235
      check: addr_0_block_231: // preds: addr_0_block_230
      nextln:   v1390 = i64.unsigned_from_bits v1073
      nextln:   v1391 = bool.icmp.int.eq v1390, 0x4
      nextln:   jumpif v1391, addr_0_block_232, addr_0_block_233
      nextln:   jump addr_0_block_236
      check: addr_0_block_232: // no preds!
      nextln:   jump addr_0_block_234
      check: addr_0_block_233: // no preds!
      nextln:   v1392 = i8.trunc.i64 v1073
      nextln:   v1393 = i8.unsigned_from_bits v1392
      nextln:   jump addr_0_block_234
      check: addr_0_block_234: // preds: addr_0_block_232 addr_0_block_233
      check: addr_0_block_235: // preds: addr_0_block_230
      nextln:   store.i64 v1073, v1015
      nextln:   jump addr_0_block_236
      check: addr_0_block_236: // preds: addr_0_block_231 addr_0_block_235
      check: addr_0_block_237: // preds: addr_0_block_223
      nextln:   jump addr_0_block_238(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_238(v1074: i8, v1075: i1, v1076: i16, v1077: i8, v1078: bool, v1079: bool, v1080: bool, v1081: int, v1082: i64, v1083: i8, v1084: i8, v1085: i52, v1086: i1, v1087: bool, v1088: bool, v1089: int, v1090: i1, v1091: bool, v1092: i4, v1093: i2, v1094: i4, v1095: i8, v1096: i8, v1097: i2, v1098: i2, v1099: bool, v1100: i2, v1101: i2, v1102: bool, v1103: bool, v1104: bool, v1105: bool, v1106: i52, v1107: i1, v1108: i64, v1109: i2, v1110: bool): // preds: addr_0_block_224 addr_0_block_237
      nextln:   v1111 = bool.icmp.i8.ne v1019, 0x0
      nextln:   v1112 = bool.bitwise_not v1111
      nextln:   v1113 = bool.and v1112, 0x1
      nextln:   v1114 = bool.icmp.i8.ne v1019, 0x0
      nextln:   v1115 = bool.bitwise_not v1114
      nextln:   v1116 = bool.and 0x1, v1115
      nextln:   jumpif v1116, addr_0_block_239, addr_0_block_240
      check: addr_0_block_239: // preds: addr_0_block_238
      nextln:   jump addr_0_block_241
      check: addr_0_block_240: // preds: addr_0_block_238
      nextln:   jump addr_0_block_241
      check: addr_0_block_241: // preds: addr_0_block_239 addr_0_block_240
      nextln:   v1117 = bool.icmp.i8.ne v1019, 0x0
      nextln:   jumpif v1117, addr_0_block_242, addr_0_block_243
      check: addr_0_block_242: // preds: addr_0_block_241
      nextln:   jump addr_0_block_244
      check: addr_0_block_243: // preds: addr_0_block_241
      nextln:   jump addr_0_block_244
      check: addr_0_block_244: // preds: addr_0_block_242 addr_0_block_243
      nextln:   v1118 = i52.unsigned_from_bits v1042
      nextln:   v1119 = int.modulo v1118, 0x1
      nextln:   v1120 = int.sub v1118, v1119
      nextln:   v1121 = i52.to_bits v1120
      nextln:   v1122 = bool.icmp.i52.eq v1042, v1121
      nextln:   v1123 = i8.load v1042
      nextln:   v1124 = i64.and v969, 0xff00ffffffffffff
      nextln:   v1125 = i8.lshl v1123, 0x30
      nextln:   v1126 = i64.or v1124, v1125
      nextln:   v1127 = i64.wrapping_add v6, 0x7
      nextln:   v1128 = i64.unsigned_from_bits v1127
      nextln:   v1129 = int.modulo v1128, 0x1
      nextln:   v1130 = int.sub v1128, v1129
      nextln:   v1131 = i64.to_bits v1130
      nextln:   v1132 = bool.icmp.i64.eq v1127, v1131
      nextln:   v1133 = i64.lshr v1127, 0x30
      nextln:   v1134 = i16.trunc.i64 v1133
      nextln:   v1135 = bool.icmp.i16.eq v1134, 0x0
      nextln:   v1136 = bool.bitwise_not v1135
      nextln:   jumpif v1136, addr_0_block_245, addr_0_block_246
      check: addr_0_block_245: // preds: addr_0_block_244
      nextln:   jump addr_0_block_247(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_248(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_246: // preds: addr_0_block_244
      nextln:   jump addr_0_block_247(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_247(v1284: i52, v1285: int, v1286: bool, v1287: bool): // preds: addr_0_block_246
      nextln:   v1288 = i52.trunc.i64 v1127
      nextln:   jump addr_0_block_248(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1288, 0x1, 0x0)
      check: addr_0_block_248(v1137: i3, v1138: i1, v1139: i1, v1140: i1, v1141: i1, v1142: i4, v1143: i1, v1144: bool, v1145: int, v1146: int, v1147: bool, v1148: bool, v1149: i8, v1150: i8, v1151: i52, v1152: i1, v1153: bool, v1154: bool, v1155: int, v1156: i1, v1157: bool, v1158: i4, v1159: i2, v1160: i4, v1161: i8, v1162: i8, v1163: i2, v1164: i2, v1165: bool, v1166: i2, v1167: i2, v1168: bool, v1169: bool, v1170: bool, v1171: bool, v1172: i52, v1173: i1, v1174: i64, v1175: i1, v1176: i8, v1177: i8, v1178: i52, v1179: i1, v1180: bool, v1181: bool, v1182: int, v1183: i1, v1184: bool, v1185: i4, v1186: i2, v1187: i4, v1188: i8, v1189: i8, v1190: i2, v1191: i2, v1192: bool, v1193: i2, v1194: i2, v1195: bool, v1196: bool, v1197: bool, v1198: bool, v1199: i52, v1200: i1, v1201: i64): // preds: addr_0_block_245 addr_0_block_247
      nextln:   v1202 = bool.icmp.i8.ne v1176, 0x0
      nextln:   v1203 = bool.bitwise_not v1202
      nextln:   v1204 = bool.bitwise_not v11
      nextln:   v1205 = bool.and v1204, 0x1
      nextln:   v1206 = bool.or v1205, 0x0
      nextln:   v1207 = bool.icmp.i8.ne v1176, 0x0
      nextln:   v1208 = bool.bitwise_not v1207
      nextln:   v1209 = bool.and v1206, v1208
      nextln:   v1210 = bool.icmp.i8.eq v1188, 0x1
      nextln:   v1211 = bool.and v1209, v1210
      nextln:   jumpif v1211, addr_0_block_249, addr_0_block_250
      check: addr_0_block_249: // preds: addr_0_block_248
      nextln:   jump addr_0_block_251
      check: addr_0_block_250: // preds: addr_0_block_248
      nextln:   jump addr_0_block_251
      check: addr_0_block_251: // preds: addr_0_block_249 addr_0_block_250
      nextln:   v1212 = bool.icmp.i8.ne v1176, 0x0
      nextln:   v1213 = bool.bitwise_not v1212
      nextln:   v1214 = bool.icmp.i8.ne v1176, 0x0
      nextln:   v1215 = bool.bitwise_not v1214
      nextln:   v1216 = bool.icmp.i8.eq v1188, 0x1
      nextln:   v1217 = bool.and v1215, v1216
      nextln:   jumpif v1147, addr_0_block_252, addr_0_block_253
      check: addr_0_block_252: // preds: addr_0_block_251
      nextln:   v1218 = bool.icmp.i8.eq v1176, 0x0
      nextln:   jump addr_0_block_254(0x1)
      check: addr_0_block_253: // preds: addr_0_block_251
      nextln:   jump addr_0_block_254(0x0)
      check: addr_0_block_254(v1219: bool): // preds: addr_0_block_252 addr_0_block_253
      nextln:   v1220 = bool.icmp.i8.eq v1176, 0x0
      nextln:   v1221 = bool.and v1148, v1220
      nextln:   jumpif v1221, addr_0_block_255, addr_0_block_256
      check: addr_0_block_255: // preds: addr_0_block_254
      nextln:   jump addr_0_block_257(0x0, 0x0)
      check: addr_0_block_256: // preds: addr_0_block_254
      nextln:   jump addr_0_block_257(0x0, 0x0)
      check: addr_0_block_257(v1222: bool, v1223: bool): // preds: addr_0_block_255 addr_0_block_256
      nextln:   v1224 = bool.or v1219, v1222
      nextln:   jumpif v1224, addr_0_block_258, addr_0_block_271
      check: addr_0_block_258: // preds: addr_0_block_257
      nextln:   v1225 = i52.unsigned_from_bits v1172
      nextln:   v1226 = int.modulo v1225, 0x8
      nextln:   v1227 = int.sub v1225, v1226
      nextln:   v1228 = i52.to_bits v1227
      nextln:   v1229 = bool.icmp.i52.eq v1172, v1228
      nextln:   v1230 = i64.load v1172
      nextln:   jumpif v1219, addr_0_block_259, addr_0_block_260
      nextln:   jump addr_0_block_272(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v1230, v1149, v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, v1161, v1162, v1163, v1164, v1165, v1166, v1167, v1168, v1169, v1170, v1171, v1172, v1173, v1174, 0x0, 0x0)
      check: addr_0_block_259: // no preds!
      nextln:   jump addr_0_block_261
      check: addr_0_block_260: // no preds!
      nextln:   jump addr_0_block_261
      check: addr_0_block_261: // preds: addr_0_block_259 addr_0_block_260
      nextln:   jumpif v1222, addr_0_block_262, addr_0_block_263
      check: addr_0_block_262: // preds: addr_0_block_261
      nextln:   jump addr_0_block_264
      check: addr_0_block_263: // preds: addr_0_block_261
      nextln:   jump addr_0_block_264
      check: addr_0_block_264: // preds: addr_0_block_262 addr_0_block_263
      nextln:   v1394 = i52.unsigned_from_bits v1172
      nextln:   v1395 = int.modulo v1394, 0x8
      nextln:   v1396 = int.sub v1394, v1395
      nextln:   v1397 = i52.to_bits v1396
      nextln:   v1398 = bool.icmp.i52.eq v1172, v1397
      nextln:   v1399 = bool.icmp.i52.eq v1172, 0x13000000
      nextln:   jumpif v1399, addr_0_block_265, addr_0_block_269
      check: addr_0_block_265: // preds: addr_0_block_264
      nextln:   v1400 = i64.unsigned_from_bits v1230
      nextln:   v1401 = bool.icmp.int.eq v1400, 0x4
      nextln:   jumpif v1401, addr_0_block_266, addr_0_block_267
      nextln:   jump addr_0_block_270
      check: addr_0_block_266: // no preds!
      nextln:   jump addr_0_block_268
      check: addr_0_block_267: // no preds!
      nextln:   v1402 = i8.trunc.i64 v1230
      nextln:   v1403 = i8.unsigned_from_bits v1402
      nextln:   jump addr_0_block_268
      check: addr_0_block_268: // preds: addr_0_block_266 addr_0_block_267
      check: addr_0_block_269: // preds: addr_0_block_264
      nextln:   store.i64 v1230, v1172
      nextln:   jump addr_0_block_270
      check: addr_0_block_270: // preds: addr_0_block_265 addr_0_block_269
      check: addr_0_block_271: // preds: addr_0_block_257
      nextln:   jump addr_0_block_272(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_272(v1231: i8, v1232: i1, v1233: i16, v1234: i8, v1235: bool, v1236: bool, v1237: bool, v1238: int, v1239: i64, v1240: i8, v1241: i8, v1242: i52, v1243: i1, v1244: bool, v1245: bool, v1246: int, v1247: i1, v1248: bool, v1249: i4, v1250: i2, v1251: i4, v1252: i8, v1253: i8, v1254: i2, v1255: i2, v1256: bool, v1257: i2, v1258: i2, v1259: bool, v1260: bool, v1261: bool, v1262: bool, v1263: i52, v1264: i1, v1265: i64, v1266: i2, v1267: bool): // preds: addr_0_block_258 addr_0_block_271
      nextln:   v1268 = bool.icmp.i8.ne v1176, 0x0
      nextln:   v1269 = bool.bitwise_not v1268
      nextln:   v1270 = bool.and v1269, 0x1
      nextln:   v1271 = bool.icmp.i8.ne v1176, 0x0
      nextln:   v1272 = bool.bitwise_not v1271
      nextln:   v1273 = bool.and 0x1, v1272
      nextln:   jumpif v1273, addr_0_block_273, addr_0_block_274
      check: addr_0_block_273: // preds: addr_0_block_272
      nextln:   jump addr_0_block_275
      check: addr_0_block_274: // preds: addr_0_block_272
      nextln:   jump addr_0_block_275
      check: addr_0_block_275: // preds: addr_0_block_273 addr_0_block_274
      nextln:   v1274 = bool.icmp.i8.ne v1176, 0x0
      nextln:   jumpif v1274, addr_0_block_276, addr_0_block_277
      check: addr_0_block_276: // preds: addr_0_block_275
      nextln:   jump addr_0_block_278
      check: addr_0_block_277: // preds: addr_0_block_275
      nextln:   jump addr_0_block_278
      check: addr_0_block_278: // preds: addr_0_block_276 addr_0_block_277
      nextln:   v1275 = i52.unsigned_from_bits v1199
      nextln:   v1276 = int.modulo v1275, 0x1
      nextln:   v1277 = int.sub v1275, v1276
      nextln:   v1278 = i52.to_bits v1277
      nextln:   v1279 = bool.icmp.i52.eq v1199, v1278
      nextln:   v1280 = i8.load v1199
      nextln:   v1281 = i64.and v1126, 0xffffffffffffff
      nextln:   v1282 = i8.lshl v1280, 0x38
      nextln:   v1283 = i64.or v1281, v1282
      check: addr_0_block_279: // preds: addr_0_block_2
      nextln:   v28 = i64.unsigned_from_bits v6
      nextln:   v29 = int.modulo v28, 0x8
      nextln:   v30 = int.sub v28, v29
      nextln:   v31 = i64.to_bits v30
      nextln:   v32 = bool.icmp.i64.eq v6, v31
      nextln:   v33 = i64.lshr v6, 0x30
      nextln:   v34 = i16.trunc.i64 v33
      nextln:   v35 = bool.icmp.i16.eq v34, 0x0
      nextln:   v36 = bool.bitwise_not v35
      nextln:   jumpif v36, addr_0_block_280, addr_0_block_281
      nextln:   jump addr_0_block_314(v11, 0x0, v1547)
      check: addr_0_block_280: // no preds!
      nextln:   jump addr_0_block_282(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_283(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_281: // no preds!
      nextln:   jump addr_0_block_282(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_282(v1548: i52, v1549: int, v1550: bool, v1551: bool): // preds: addr_0_block_281
      nextln:   v1552 = i52.trunc.i64 v6
      nextln:   jump addr_0_block_283(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1552, 0x1, 0x0)
      check: addr_0_block_283(v1404: i3, v1405: i1, v1406: i1, v1407: i1, v1408: i1, v1409: i4, v1410: i1, v1411: bool, v1412: int, v1413: int, v1414: bool, v1415: bool, v1416: i8, v1417: i8, v1418: i52, v1419: i1, v1420: bool, v1421: bool, v1422: int, v1423: i1, v1424: bool, v1425: i4, v1426: i2, v1427: i4, v1428: i8, v1429: i8, v1430: i2, v1431: i2, v1432: bool, v1433: i2, v1434: i2, v1435: bool, v1436: bool, v1437: bool, v1438: bool, v1439: i52, v1440: i1, v1441: i64, v1442: i1, v1443: i8, v1444: i8, v1445: i52, v1446: i1, v1447: bool, v1448: bool, v1449: int, v1450: i1, v1451: bool, v1452: i4, v1453: i2, v1454: i4, v1455: i8, v1456: i8, v1457: i2, v1458: i2, v1459: bool, v1460: i2, v1461: i2, v1462: bool, v1463: bool, v1464: bool, v1465: bool, v1466: i52, v1467: i1, v1468: i64): // preds: addr_0_block_280 addr_0_block_282
      nextln:   v1469 = bool.icmp.i8.ne v1443, 0x0
      nextln:   v1470 = bool.bitwise_not v1469
      nextln:   v1471 = bool.bitwise_not v11
      nextln:   v1472 = bool.and v1471, 0x1
      nextln:   v1473 = bool.or v1472, 0x0
      nextln:   v1474 = bool.icmp.i8.ne v1443, 0x0
      nextln:   v1475 = bool.bitwise_not v1474
      nextln:   v1476 = bool.and v1473, v1475
      nextln:   v1477 = bool.icmp.i8.eq v1455, 0x1
      nextln:   v1478 = bool.and v1476, v1477
      nextln:   jumpif v1478, addr_0_block_284, addr_0_block_285
      check: addr_0_block_284: // preds: addr_0_block_283
      nextln:   jump addr_0_block_286
      check: addr_0_block_285: // preds: addr_0_block_283
      nextln:   jump addr_0_block_286
      check: addr_0_block_286: // preds: addr_0_block_284 addr_0_block_285
      nextln:   v1479 = bool.icmp.i8.ne v1443, 0x0
      nextln:   v1480 = bool.bitwise_not v1479
      nextln:   v1481 = bool.icmp.i8.ne v1443, 0x0
      nextln:   v1482 = bool.bitwise_not v1481
      nextln:   v1483 = bool.icmp.i8.eq v1455, 0x1
      nextln:   v1484 = bool.and v1482, v1483
      nextln:   jumpif v1414, addr_0_block_287, addr_0_block_288
      check: addr_0_block_287: // preds: addr_0_block_286
      nextln:   v1485 = bool.icmp.i8.eq v1443, 0x0
      nextln:   jump addr_0_block_289(0x1)
      check: addr_0_block_288: // preds: addr_0_block_286
      nextln:   jump addr_0_block_289(0x0)
      check: addr_0_block_289(v1486: bool): // preds: addr_0_block_287 addr_0_block_288
      nextln:   v1487 = bool.icmp.i8.eq v1443, 0x0
      nextln:   v1488 = bool.and v1415, v1487
      nextln:   jumpif v1488, addr_0_block_290, addr_0_block_291
      check: addr_0_block_290: // preds: addr_0_block_289
      nextln:   jump addr_0_block_292(0x0, 0x0)
      check: addr_0_block_291: // preds: addr_0_block_289
      nextln:   jump addr_0_block_292(0x0, 0x0)
      check: addr_0_block_292(v1489: bool, v1490: bool): // preds: addr_0_block_290 addr_0_block_291
      nextln:   v1491 = bool.or v1486, v1489
      nextln:   jumpif v1491, addr_0_block_293, addr_0_block_306
      check: addr_0_block_293: // preds: addr_0_block_292
      nextln:   v1492 = i52.unsigned_from_bits v1439
      nextln:   v1493 = int.modulo v1492, 0x8
      nextln:   v1494 = int.sub v1492, v1493
      nextln:   v1495 = i52.to_bits v1494
      nextln:   v1496 = bool.icmp.i52.eq v1439, v1495
      nextln:   v1497 = i64.load v1439
      nextln:   jumpif v1486, addr_0_block_294, addr_0_block_295
      nextln:   jump addr_0_block_307(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v1497, v1416, v1417, v1418, v1419, v1420, v1421, v1422, v1423, v1424, v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439, v1440, v1441, 0x0, 0x0)
      check: addr_0_block_294: // no preds!
      nextln:   jump addr_0_block_296
      check: addr_0_block_295: // no preds!
      nextln:   jump addr_0_block_296
      check: addr_0_block_296: // preds: addr_0_block_294 addr_0_block_295
      nextln:   jumpif v1489, addr_0_block_297, addr_0_block_298
      check: addr_0_block_297: // preds: addr_0_block_296
      nextln:   jump addr_0_block_299
      check: addr_0_block_298: // preds: addr_0_block_296
      nextln:   jump addr_0_block_299
      check: addr_0_block_299: // preds: addr_0_block_297 addr_0_block_298
      nextln:   v1553 = i52.unsigned_from_bits v1439
      nextln:   v1554 = int.modulo v1553, 0x8
      nextln:   v1555 = int.sub v1553, v1554
      nextln:   v1556 = i52.to_bits v1555
      nextln:   v1557 = bool.icmp.i52.eq v1439, v1556
      nextln:   v1558 = bool.icmp.i52.eq v1439, 0x13000000
      nextln:   jumpif v1558, addr_0_block_300, addr_0_block_304
      check: addr_0_block_300: // preds: addr_0_block_299
      nextln:   v1559 = i64.unsigned_from_bits v1497
      nextln:   v1560 = bool.icmp.int.eq v1559, 0x4
      nextln:   jumpif v1560, addr_0_block_301, addr_0_block_302
      nextln:   jump addr_0_block_305
      check: addr_0_block_301: // no preds!
      nextln:   jump addr_0_block_303
      check: addr_0_block_302: // no preds!
      nextln:   v1561 = i8.trunc.i64 v1497
      nextln:   v1562 = i8.unsigned_from_bits v1561
      nextln:   jump addr_0_block_303
      check: addr_0_block_303: // preds: addr_0_block_301 addr_0_block_302
      check: addr_0_block_304: // preds: addr_0_block_299
      nextln:   store.i64 v1497, v1439
      nextln:   jump addr_0_block_305
      check: addr_0_block_305: // preds: addr_0_block_300 addr_0_block_304
      check: addr_0_block_306: // preds: addr_0_block_292
      nextln:   jump addr_0_block_307(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_307(v1498: i8, v1499: i1, v1500: i16, v1501: i8, v1502: bool, v1503: bool, v1504: bool, v1505: int, v1506: i64, v1507: i8, v1508: i8, v1509: i52, v1510: i1, v1511: bool, v1512: bool, v1513: int, v1514: i1, v1515: bool, v1516: i4, v1517: i2, v1518: i4, v1519: i8, v1520: i8, v1521: i2, v1522: i2, v1523: bool, v1524: i2, v1525: i2, v1526: bool, v1527: bool, v1528: bool, v1529: bool, v1530: i52, v1531: i1, v1532: i64, v1533: i2, v1534: bool): // preds: addr_0_block_293 addr_0_block_306
      nextln:   v1535 = bool.icmp.i8.ne v1443, 0x0
      nextln:   v1536 = bool.bitwise_not v1535
      nextln:   v1537 = bool.and v1536, 0x1
      nextln:   v1538 = bool.icmp.i8.ne v1443, 0x0
      nextln:   v1539 = bool.bitwise_not v1538
      nextln:   v1540 = bool.and 0x1, v1539
      nextln:   jumpif v1540, addr_0_block_308, addr_0_block_309
      check: addr_0_block_308: // preds: addr_0_block_307
      nextln:   jump addr_0_block_310
      check: addr_0_block_309: // preds: addr_0_block_307
      nextln:   jump addr_0_block_310
      check: addr_0_block_310: // preds: addr_0_block_308 addr_0_block_309
      nextln:   v1541 = bool.icmp.i8.ne v1443, 0x0
      nextln:   jumpif v1541, addr_0_block_311, addr_0_block_312
      check: addr_0_block_311: // preds: addr_0_block_310
      nextln:   jump addr_0_block_313
      check: addr_0_block_312: // preds: addr_0_block_310
      nextln:   jump addr_0_block_313
      check: addr_0_block_313: // preds: addr_0_block_311 addr_0_block_312
      nextln:   v1542 = i52.unsigned_from_bits v1466
      nextln:   v1543 = int.modulo v1542, 0x8
      nextln:   v1544 = int.sub v1542, v1543
      nextln:   v1545 = i52.to_bits v1544
      nextln:   v1546 = bool.icmp.i52.eq v1466, v1545
      nextln:   v1547 = i64.load v1466
      check: addr_0_block_314(v25: i64, v26: i8, v27: i64): // preds: addr_0_block_3 addr_0_block_279
      nextln:   write_reg.i64 v27, "x1"
- name: ldar_3
  bytes: [0x21, 0xfc, 0xdf, 0xc8]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x1"
      nextln:   v1 = i64.unsigned_from_bits v0
      nextln:   v2 = int.modulo v1, 0x8
      nextln:   v3 = int.sub v1, v2
      nextln:   v4 = i64.to_bits v3
      nextln:   v5 = bool.icmp.i64.eq v0, v4
      nextln:   v6 = bool.bitwise_not v5
      nextln:   v7 = bool.and 0x1, v6
      nextln:   jumpif v7, addr_0_block_0, addr_0_block_1
      check: addr_0_block_0: // preds: entry
      nextln:   jump addr_0_block_2(0x0)
      check: addr_0_block_1: // preds: entry
      nextln:   jump addr_0_block_2(0x0)
      check: addr_0_block_2(v8: bool): // preds: addr_0_block_0 addr_0_block_1
      nextln:   v9 = bool.bitwise_not v5
      nextln:   jumpif v9, addr_0_block_3, addr_0_block_279
      check: addr_0_block_3: // preds: addr_0_block_2
      nextln:   v10 = i64.unsigned_from_bits v0
      nextln:   v11 = int.modulo v10, 0x1
      nextln:   v12 = int.sub v10, v11
      nextln:   v13 = i64.to_bits v12
      nextln:   v14 = bool.icmp.i64.eq v0, v13
      nextln:   v15 = i64.lshr v0, 0x30
      nextln:   v16 = i16.trunc.i64 v15
      nextln:   v17 = bool.icmp.i16.eq v16, 0x0
      nextln:   v18 = bool.bitwise_not v17
      nextln:   jumpif v18, addr_0_block_4, addr_0_block_5
      nextln:   jump addr_0_block_314(v178, v179, v1277)
      check: addr_0_block_4: // no preds!
      nextln:   jump addr_0_block_6(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_7(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_5: // no preds!
      nextln:   jump addr_0_block_6(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_6(v1313: i52, v1314: int, v1315: bool, v1316: bool): // preds: addr_0_block_5
      nextln:   v1317 = i52.trunc.i64 v0
      nextln:   jump addr_0_block_7(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1317, 0x1, 0x0)
      check: addr_0_block_7(v31: i3, v32: i1, v33: i1, v34: i1, v35: i1, v36: i4, v37: i1, v38: bool, v39: int, v40: int, v41: bool, v42: bool, v43: i8, v44: i8, v45: i52, v46: i1, v47: bool, v48: bool, v49: int, v50: i1, v51: bool, v52: i4, v53: i2, v54: i4, v55: i8, v56: i8, v57: i2, v58: i2, v59: bool, v60: i2, v61: i2, v62: bool, v63: bool, v64: bool, v65: bool, v66: i52, v67: i1, v68: i64, v69: i1, v70: i8, v71: i8, v72: i52, v73: i1, v74: bool, v75: bool, v76: int, v77: i1, v78: bool, v79: i4, v80: i2, v81: i4, v82: i8, v83: i8, v84: i2, v85: i2, v86: bool, v87: i2, v88: i2, v89: bool, v90: bool, v91: bool, v92: bool, v93: i52, v94: i1, v95: i64): // preds: addr_0_block_4 addr_0_block_6
      nextln:   v96 = bool.icmp.i8.ne v70, 0x0
      nextln:   v97 = bool.bitwise_not v96
      nextln:   v98 = bool.bitwise_not v5
      nextln:   v99 = bool.and v98, 0x1
      nextln:   v100 = bool.or v99, 0x0
      nextln:   v101 = bool.icmp.i8.ne v70, 0x0
      nextln:   v102 = bool.bitwise_not v101
      nextln:   v103 = bool.and v100, v102
      nextln:   v104 = bool.icmp.i8.eq v82, 0x1
      nextln:   v105 = bool.and v103, v104
      nextln:   jumpif v105, addr_0_block_8, addr_0_block_9
      check: addr_0_block_8: // preds: addr_0_block_7
      nextln:   jump addr_0_block_10
      check: addr_0_block_9: // preds: addr_0_block_7
      nextln:   jump addr_0_block_10
      check: addr_0_block_10: // preds: addr_0_block_8 addr_0_block_9
      nextln:   v106 = bool.icmp.i8.ne v70, 0x0
      nextln:   v107 = bool.bitwise_not v106
      nextln:   v108 = bool.icmp.i8.ne v70, 0x0
      nextln:   v109 = bool.bitwise_not v108
      nextln:   v110 = bool.icmp.i8.eq v82, 0x1
      nextln:   v111 = bool.and v109, v110
      nextln:   jumpif v41, addr_0_block_11, addr_0_block_12
      check: addr_0_block_11: // preds: addr_0_block_10
      nextln:   v112 = bool.icmp.i8.eq v70, 0x0
      nextln:   jump addr_0_block_13(0x1)
      check: addr_0_block_12: // preds: addr_0_block_10
      nextln:   jump addr_0_block_13(0x0)
      check: addr_0_block_13(v113: bool): // preds: addr_0_block_11 addr_0_block_12
      nextln:   v114 = bool.icmp.i8.eq v70, 0x0
      nextln:   v115 = bool.and v42, v114
      nextln:   jumpif v115, addr_0_block_14, addr_0_block_15
      check: addr_0_block_14: // preds: addr_0_block_13
      nextln:   jump addr_0_block_16(0x0, 0x0)
      check: addr_0_block_15: // preds: addr_0_block_13
      nextln:   jump addr_0_block_16(0x0, 0x0)
      check: addr_0_block_16(v116: bool, v117: bool): // preds: addr_0_block_14 addr_0_block_15
      nextln:   v118 = bool.or v113, v116
      nextln:   jumpif v118, addr_0_block_17, addr_0_block_30
      check: addr_0_block_17: // preds: addr_0_block_16
      nextln:   v119 = i52.unsigned_from_bits v66
      nextln:   v120 = int.modulo v119, 0x8
      nextln:   v121 = int.sub v119, v120
      nextln:   v122 = i52.to_bits v121
      nextln:   v123 = bool.icmp.i52.eq v66, v122
      nextln:   v124 = i64.load v66
      nextln:   jumpif v113, addr_0_block_18, addr_0_block_19
      nextln:   jump addr_0_block_31(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v124, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, 0x0, 0x0)
      check: addr_0_block_18: // no preds!
      nextln:   jump addr_0_block_20
      check: addr_0_block_19: // no preds!
      nextln:   jump addr_0_block_20
      check: addr_0_block_20: // preds: addr_0_block_18 addr_0_block_19
      nextln:   jumpif v116, addr_0_block_21, addr_0_block_22
      check: addr_0_block_21: // preds: addr_0_block_20
      nextln:   jump addr_0_block_23
      check: addr_0_block_22: // preds: addr_0_block_20
      nextln:   jump addr_0_block_23
      check: addr_0_block_23: // preds: addr_0_block_21 addr_0_block_22
      nextln:   v1318 = i52.unsigned_from_bits v66
      nextln:   v1319 = int.modulo v1318, 0x8
      nextln:   v1320 = int.sub v1318, v1319
      nextln:   v1321 = i52.to_bits v1320
      nextln:   v1322 = bool.icmp.i52.eq v66, v1321
      nextln:   v1323 = bool.icmp.i52.eq v66, 0x13000000
      nextln:   jumpif v1323, addr_0_block_24, addr_0_block_28
      check: addr_0_block_24: // preds: addr_0_block_23
      nextln:   v1324 = i64.unsigned_from_bits v124
      nextln:   v1325 = bool.icmp.int.eq v1324, 0x4
      nextln:   jumpif v1325, addr_0_block_25, addr_0_block_26
      nextln:   jump addr_0_block_29
      check: addr_0_block_25: // no preds!
      nextln:   jump addr_0_block_27
      check: addr_0_block_26: // no preds!
      nextln:   v1326 = i8.trunc.i64 v124
      nextln:   v1327 = i8.unsigned_from_bits v1326
      nextln:   jump addr_0_block_27
      check: addr_0_block_27: // preds: addr_0_block_25 addr_0_block_26
      check: addr_0_block_28: // preds: addr_0_block_23
      nextln:   store.i64 v124, v66
      nextln:   jump addr_0_block_29
      check: addr_0_block_29: // preds: addr_0_block_24 addr_0_block_28
      check: addr_0_block_30: // preds: addr_0_block_16
      nextln:   jump addr_0_block_31(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_31(v125: i8, v126: i1, v127: i16, v128: i8, v129: bool, v130: bool, v131: bool, v132: int, v133: i64, v134: i8, v135: i8, v136: i52, v137: i1, v138: bool, v139: bool, v140: int, v141: i1, v142: bool, v143: i4, v144: i2, v145: i4, v146: i8, v147: i8, v148: i2, v149: i2, v150: bool, v151: i2, v152: i2, v153: bool, v154: bool, v155: bool, v156: bool, v157: i52, v158: i1, v159: i64, v160: i2, v161: bool): // preds: addr_0_block_17 addr_0_block_30
      nextln:   v162 = bool.icmp.i8.ne v70, 0x0
      nextln:   v163 = bool.bitwise_not v162
      nextln:   v164 = bool.and v163, 0x1
      nextln:   v165 = bool.icmp.i8.ne v70, 0x0
      nextln:   v166 = bool.bitwise_not v165
      nextln:   v167 = bool.and 0x1, v166
      nextln:   jumpif v167, addr_0_block_32, addr_0_block_33
      check: addr_0_block_32: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_33: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_34: // preds: addr_0_block_32 addr_0_block_33
      nextln:   v168 = bool.icmp.i8.ne v70, 0x0
      nextln:   jumpif v168, addr_0_block_35, addr_0_block_36
      check: addr_0_block_35: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37
      check: addr_0_block_36: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37
      check: addr_0_block_37: // preds: addr_0_block_35 addr_0_block_36
      nextln:   v169 = i52.unsigned_from_bits v93
      nextln:   v170 = int.modulo v169, 0x1
      nextln:   v171 = int.sub v169, v170
      nextln:   v172 = i52.to_bits v171
      nextln:   v173 = bool.icmp.i52.eq v93, v172
      nextln:   v174 = i8.load v93
      nextln:   v175 = i8.lshl v174, 0x0
      nextln:   v176 = i64.or 0x0, v175
      nextln:   v177 = bool.bitwise_not v5
      nextln:   jumpif v177, addr_0_block_38, addr_0_block_39
      check: addr_0_block_38: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(v5, 0xc)
      check: addr_0_block_39: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(v5, 0x0)
      check: addr_0_block_40(v178: i64, v179: i8): // preds: addr_0_block_38 addr_0_block_39
      nextln:   v180 = i64.wrapping_add v0, 0x1
      nextln:   v181 = i64.unsigned_from_bits v180
      nextln:   v182 = int.modulo v181, 0x1
      nextln:   v183 = int.sub v181, v182
      nextln:   v184 = i64.to_bits v183
      nextln:   v185 = bool.icmp.i64.eq v180, v184
      nextln:   v186 = i64.lshr v180, 0x30
      nextln:   v187 = i16.trunc.i64 v186
      nextln:   v188 = bool.icmp.i16.eq v187, 0x0
      nextln:   v189 = bool.bitwise_not v188
      nextln:   jumpif v189, addr_0_block_41, addr_0_block_42
      check: addr_0_block_41: // preds: addr_0_block_40
      nextln:   jump addr_0_block_43(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_44(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_42: // preds: addr_0_block_40
      nextln:   jump addr_0_block_43(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_43(v1308: i52, v1309: int, v1310: bool, v1311: bool): // preds: addr_0_block_42
      nextln:   v1312 = i52.trunc.i64 v180
      nextln:   jump addr_0_block_44(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1312, 0x1, 0x0)
      check: addr_0_block_44(v190: i3, v191: i1, v192: i1, v193: i1, v194: i1, v195: i4, v196: i1, v197: bool, v198: int, v199: int, v200: bool, v201: bool, v202: i8, v203: i8, v204: i52, v205: i1, v206: bool, v207: bool, v208: int, v209: i1, v210: bool, v211: i4, v212: i2, v213: i4, v214: i8, v215: i8, v216: i2, v217: i2, v218: bool, v219: i2, v220: i2, v221: bool, v222: bool, v223: bool, v224: bool, v225: i52, v226: i1, v227: i64, v228: i1, v229: i8, v230: i8, v231: i52, v232: i1, v233: bool, v234: bool, v235: int, v236: i1, v237: bool, v238: i4, v239: i2, v240: i4, v241: i8, v242: i8, v243: i2, v244: i2, v245: bool, v246: i2, v247: i2, v248: bool, v249: bool, v250: bool, v251: bool, v252: i52, v253: i1, v254: i64): // preds: addr_0_block_41 addr_0_block_43
      nextln:   v255 = bool.icmp.i8.ne v229, 0x0
      nextln:   v256 = bool.bitwise_not v255
      nextln:   v257 = bool.bitwise_not v5
      nextln:   v258 = bool.and v257, 0x1
      nextln:   v259 = bool.or v258, 0x0
      nextln:   v260 = bool.icmp.i8.ne v229, 0x0
      nextln:   v261 = bool.bitwise_not v260
      nextln:   v262 = bool.and v259, v261
      nextln:   v263 = bool.icmp.i8.eq v241, 0x1
      nextln:   v264 = bool.and v262, v263
      nextln:   jumpif v264, addr_0_block_45, addr_0_block_46
      check: addr_0_block_45: // preds: addr_0_block_44
      nextln:   jump addr_0_block_47
      check: addr_0_block_46: // preds: addr_0_block_44
      nextln:   jump addr_0_block_47
      check: addr_0_block_47: // preds: addr_0_block_45 addr_0_block_46
      nextln:   v265 = bool.icmp.i8.ne v229, 0x0
      nextln:   v266 = bool.bitwise_not v265
      nextln:   v267 = bool.icmp.i8.ne v229, 0x0
      nextln:   v268 = bool.bitwise_not v267
      nextln:   v269 = bool.icmp.i8.eq v241, 0x1
      nextln:   v270 = bool.and v268, v269
      nextln:   jumpif v200, addr_0_block_48, addr_0_block_49
      check: addr_0_block_48: // preds: addr_0_block_47
      nextln:   v271 = bool.icmp.i8.eq v229, 0x0
      nextln:   jump addr_0_block_50(0x1)
      check: addr_0_block_49: // preds: addr_0_block_47
      nextln:   jump addr_0_block_50(0x0)
      check: addr_0_block_50(v272: bool): // preds: addr_0_block_48 addr_0_block_49
      nextln:   v273 = bool.icmp.i8.eq v229, 0x0
      nextln:   v274 = bool.and v201, v273
      nextln:   jumpif v274, addr_0_block_51, addr_0_block_52
      check: addr_0_block_51: // preds: addr_0_block_50
      nextln:   jump addr_0_block_53(0x0, 0x0)
      check: addr_0_block_52: // preds: addr_0_block_50
      nextln:   jump addr_0_block_53(0x0, 0x0)
      check: addr_0_block_53(v275: bool, v276: bool): // preds: addr_0_block_51 addr_0_block_52
      nextln:   v277 = bool.or v272, v275
      nextln:   jumpif v277, addr_0_block_54, addr_0_block_67
      check: addr_0_block_54: // preds: addr_0_block_53
      nextln:   v278 = i52.unsigned_from_bits v225
      nextln:   v279 = int.modulo v278, 0x8
      nextln:   v280 = int.sub v278, v279
      nextln:   v281 = i52.to_bits v280
      nextln:   v282 = bool.icmp.i52.eq v225, v281
      nextln:   v283 = i64.load v225
      nextln:   jumpif v272, addr_0_block_55, addr_0_block_56
      nextln:   jump addr_0_block_68(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v283, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, 0x0, 0x0)
      check: addr_0_block_55: // no preds!
      nextln:   jump addr_0_block_57
      check: addr_0_block_56: // no preds!
      nextln:   jump addr_0_block_57
      check: addr_0_block_57: // preds: addr_0_block_55 addr_0_block_56
      nextln:   jumpif v275, addr_0_block_58, addr_0_block_59
      check: addr_0_block_58: // preds: addr_0_block_57
      nextln:   jump addr_0_block_60
      check: addr_0_block_59: // preds: addr_0_block_57
      nextln:   jump addr_0_block_60
      check: addr_0_block_60: // preds: addr_0_block_58 addr_0_block_59
      nextln:   v1328 = i52.unsigned_from_bits v225
      nextln:   v1329 = int.modulo v1328, 0x8
      nextln:   v1330 = int.sub v1328, v1329
      nextln:   v1331 = i52.to_bits v1330
      nextln:   v1332 = bool.icmp.i52.eq v225, v1331
      nextln:   v1333 = bool.icmp.i52.eq v225, 0x13000000
      nextln:   jumpif v1333, addr_0_block_61, addr_0_block_65
      check: addr_0_block_61: // preds: addr_0_block_60
      nextln:   v1334 = i64.unsigned_from_bits v283
      nextln:   v1335 = bool.icmp.int.eq v1334, 0x4
      nextln:   jumpif v1335, addr_0_block_62, addr_0_block_63
      nextln:   jump addr_0_block_66
      check: addr_0_block_62: // no preds!
      nextln:   jump addr_0_block_64
      check: addr_0_block_63: // no preds!
      nextln:   v1336 = i8.trunc.i64 v283
      nextln:   v1337 = i8.unsigned_from_bits v1336
      nextln:   jump addr_0_block_64
      check: addr_0_block_64: // preds: addr_0_block_62 addr_0_block_63
      check: addr_0_block_65: // preds: addr_0_block_60
      nextln:   store.i64 v283, v225
      nextln:   jump addr_0_block_66
      check: addr_0_block_66: // preds: addr_0_block_61 addr_0_block_65
      check: addr_0_block_67: // preds: addr_0_block_53
      nextln:   jump addr_0_block_68(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_68(v284: i8, v285: i1, v286: i16, v287: i8, v288: bool, v289: bool, v290: bool, v291: int, v292: i64, v293: i8, v294: i8, v295: i52, v296: i1, v297: bool, v298: bool, v299: int, v300: i1, v301: bool, v302: i4, v303: i2, v304: i4, v305: i8, v306: i8, v307: i2, v308: i2, v309: bool, v310: i2, v311: i2, v312: bool, v313: bool, v314: bool, v315: bool, v316: i52, v317: i1, v318: i64, v319: i2, v320: bool): // preds: addr_0_block_54 addr_0_block_67
      nextln:   v321 = bool.icmp.i8.ne v229, 0x0
      nextln:   v322 = bool.bitwise_not v321
      nextln:   v323 = bool.and v322, 0x1
      nextln:   v324 = bool.icmp.i8.ne v229, 0x0
      nextln:   v325 = bool.bitwise_not v324
      nextln:   v326 = bool.and 0x1, v325
      nextln:   jumpif v326, addr_0_block_69, addr_0_block_70
      check: addr_0_block_69: // preds: addr_0_block_68
      nextln:   jump addr_0_block_71
      check: addr_0_block_70: // preds: addr_0_block_68
      nextln:   jump addr_0_block_71
      check: addr_0_block_71: // preds: addr_0_block_69 addr_0_block_70
      nextln:   v327 = bool.icmp.i8.ne v229, 0x0
      nextln:   jumpif v327, addr_0_block_72, addr_0_block_73
      check: addr_0_block_72: // preds: addr_0_block_71
      nextln:   jump addr_0_block_74
      check: addr_0_block_73: // preds: addr_0_block_71
      nextln:   jump addr_0_block_74
      check: addr_0_block_74: // preds: addr_0_block_72 addr_0_block_73
      nextln:   v328 = i52.unsigned_from_bits v252
      nextln:   v329 = int.modulo v328, 0x1
      nextln:   v330 = int.sub v328, v329
      nextln:   v331 = i52.to_bits v330
      nextln:   v332 = bool.icmp.i52.eq v252, v331
      nextln:   v333 = i8.load v252
      nextln:   v334 = i8.lshl v333, 0x8
      nextln:   v335 = i64.or 0x0, v334
      nextln:   v336 = i64.wrapping_add v0, 0x2
      nextln:   v337 = i64.unsigned_from_bits v336
      nextln:   v338 = int.modulo v337, 0x1
      nextln:   v339 = int.sub v337, v338
      nextln:   v340 = i64.to_bits v339
      nextln:   v341 = bool.icmp.i64.eq v336, v340
      nextln:   v342 = i64.lshr v336, 0x30
      nextln:   v343 = i16.trunc.i64 v342
      nextln:   v344 = bool.icmp.i16.eq v343, 0x0
      nextln:   v345 = bool.bitwise_not v344
      nextln:   jumpif v345, addr_0_block_75, addr_0_block_76
      check: addr_0_block_75: // preds: addr_0_block_74
      nextln:   jump addr_0_block_77(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_78(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_76: // preds: addr_0_block_74
      nextln:   jump addr_0_block_77(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_77(v1303: i52, v1304: int, v1305: bool, v1306: bool): // preds: addr_0_block_76
      nextln:   v1307 = i52.trunc.i64 v336
      nextln:   jump addr_0_block_78(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1307, 0x1, 0x0)
      check: addr_0_block_78(v346: i3, v347: i1, v348: i1, v349: i1, v350: i1, v351: i4, v352: i1, v353: bool, v354: int, v355: int, v356: bool, v357: bool, v358: i8, v359: i8, v360: i52, v361: i1, v362: bool, v363: bool, v364: int, v365: i1, v366: bool, v367: i4, v368: i2, v369: i4, v370: i8, v371: i8, v372: i2, v373: i2, v374: bool, v375: i2, v376: i2, v377: bool, v378: bool, v379: bool, v380: bool, v381: i52, v382: i1, v383: i64, v384: i1, v385: i8, v386: i8, v387: i52, v388: i1, v389: bool, v390: bool, v391: int, v392: i1, v393: bool, v394: i4, v395: i2, v396: i4, v397: i8, v398: i8, v399: i2, v400: i2, v401: bool, v402: i2, v403: i2, v404: bool, v405: bool, v406: bool, v407: bool, v408: i52, v409: i1, v410: i64): // preds: addr_0_block_75 addr_0_block_77
      nextln:   v411 = bool.icmp.i8.ne v385, 0x0
      nextln:   v412 = bool.bitwise_not v411
      nextln:   v413 = bool.bitwise_not v5
      nextln:   v414 = bool.and v413, 0x1
      nextln:   v415 = bool.or v414, 0x0
      nextln:   v416 = bool.icmp.i8.ne v385, 0x0
      nextln:   v417 = bool.bitwise_not v416
      nextln:   v418 = bool.and v415, v417
      nextln:   v419 = bool.icmp.i8.eq v397, 0x1
      nextln:   v420 = bool.and v418, v419
      nextln:   jumpif v420, addr_0_block_79, addr_0_block_80
      check: addr_0_block_79: // preds: addr_0_block_78
      nextln:   jump addr_0_block_81
      check: addr_0_block_80: // preds: addr_0_block_78
      nextln:   jump addr_0_block_81
      check: addr_0_block_81: // preds: addr_0_block_79 addr_0_block_80
      nextln:   v421 = bool.icmp.i8.ne v385, 0x0
      nextln:   v422 = bool.bitwise_not v421
      nextln:   v423 = bool.icmp.i8.ne v385, 0x0
      nextln:   v424 = bool.bitwise_not v423
      nextln:   v425 = bool.icmp.i8.eq v397, 0x1
      nextln:   v426 = bool.and v424, v425
      nextln:   jumpif v356, addr_0_block_82, addr_0_block_83
      check: addr_0_block_82: // preds: addr_0_block_81
      nextln:   v427 = bool.icmp.i8.eq v385, 0x0
      nextln:   jump addr_0_block_84(0x1)
      check: addr_0_block_83: // preds: addr_0_block_81
      nextln:   jump addr_0_block_84(0x0)
      check: addr_0_block_84(v428: bool): // preds: addr_0_block_82 addr_0_block_83
      nextln:   v429 = bool.icmp.i8.eq v385, 0x0
      nextln:   v430 = bool.and v357, v429
      nextln:   jumpif v430, addr_0_block_85, addr_0_block_86
      check: addr_0_block_85: // preds: addr_0_block_84
      nextln:   jump addr_0_block_87(0x0, 0x0)
      check: addr_0_block_86: // preds: addr_0_block_84
      nextln:   jump addr_0_block_87(0x0, 0x0)
      check: addr_0_block_87(v431: bool, v432: bool): // preds: addr_0_block_85 addr_0_block_86
      nextln:   v433 = bool.or v428, v431
      nextln:   jumpif v433, addr_0_block_88, addr_0_block_101
      check: addr_0_block_88: // preds: addr_0_block_87
      nextln:   v434 = i52.unsigned_from_bits v381
      nextln:   v435 = int.modulo v434, 0x8
      nextln:   v436 = int.sub v434, v435
      nextln:   v437 = i52.to_bits v436
      nextln:   v438 = bool.icmp.i52.eq v381, v437
      nextln:   v439 = i64.load v381
      nextln:   jumpif v428, addr_0_block_89, addr_0_block_90
      nextln:   jump addr_0_block_102(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v439, v358, v359, v360, v361, v362, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, v382, v383, 0x0, 0x0)
      check: addr_0_block_89: // no preds!
      nextln:   jump addr_0_block_91
      check: addr_0_block_90: // no preds!
      nextln:   jump addr_0_block_91
      check: addr_0_block_91: // preds: addr_0_block_89 addr_0_block_90
      nextln:   jumpif v431, addr_0_block_92, addr_0_block_93
      check: addr_0_block_92: // preds: addr_0_block_91
      nextln:   jump addr_0_block_94
      check: addr_0_block_93: // preds: addr_0_block_91
      nextln:   jump addr_0_block_94
      check: addr_0_block_94: // preds: addr_0_block_92 addr_0_block_93
      nextln:   v1338 = i52.unsigned_from_bits v381
      nextln:   v1339 = int.modulo v1338, 0x8
      nextln:   v1340 = int.sub v1338, v1339
      nextln:   v1341 = i52.to_bits v1340
      nextln:   v1342 = bool.icmp.i52.eq v381, v1341
      nextln:   v1343 = bool.icmp.i52.eq v381, 0x13000000
      nextln:   jumpif v1343, addr_0_block_95, addr_0_block_99
      check: addr_0_block_95: // preds: addr_0_block_94
      nextln:   v1344 = i64.unsigned_from_bits v439
      nextln:   v1345 = bool.icmp.int.eq v1344, 0x4
      nextln:   jumpif v1345, addr_0_block_96, addr_0_block_97
      nextln:   jump addr_0_block_100
      check: addr_0_block_96: // no preds!
      nextln:   jump addr_0_block_98
      check: addr_0_block_97: // no preds!
      nextln:   v1346 = i8.trunc.i64 v439
      nextln:   v1347 = i8.unsigned_from_bits v1346
      nextln:   jump addr_0_block_98
      check: addr_0_block_98: // preds: addr_0_block_96 addr_0_block_97
      check: addr_0_block_99: // preds: addr_0_block_94
      nextln:   store.i64 v439, v381
      nextln:   jump addr_0_block_100
      check: addr_0_block_100: // preds: addr_0_block_95 addr_0_block_99
      check: addr_0_block_101: // preds: addr_0_block_87
      nextln:   jump addr_0_block_102(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_102(v440: i8, v441: i1, v442: i16, v443: i8, v444: bool, v445: bool, v446: bool, v447: int, v448: i64, v449: i8, v450: i8, v451: i52, v452: i1, v453: bool, v454: bool, v455: int, v456: i1, v457: bool, v458: i4, v459: i2, v460: i4, v461: i8, v462: i8, v463: i2, v464: i2, v465: bool, v466: i2, v467: i2, v468: bool, v469: bool, v470: bool, v471: bool, v472: i52, v473: i1, v474: i64, v475: i2, v476: bool): // preds: addr_0_block_88 addr_0_block_101
      nextln:   v477 = bool.icmp.i8.ne v385, 0x0
      nextln:   v478 = bool.bitwise_not v477
      nextln:   v479 = bool.and v478, 0x1
      nextln:   v480 = bool.icmp.i8.ne v385, 0x0
      nextln:   v481 = bool.bitwise_not v480
      nextln:   v482 = bool.and 0x1, v481
      nextln:   jumpif v482, addr_0_block_103, addr_0_block_104
      check: addr_0_block_103: // preds: addr_0_block_102
      nextln:   jump addr_0_block_105
      check: addr_0_block_104: // preds: addr_0_block_102
      nextln:   jump addr_0_block_105
      check: addr_0_block_105: // preds: addr_0_block_103 addr_0_block_104
      nextln:   v483 = bool.icmp.i8.ne v385, 0x0
      nextln:   jumpif v483, addr_0_block_106, addr_0_block_107
      check: addr_0_block_106: // preds: addr_0_block_105
      nextln:   jump addr_0_block_108
      check: addr_0_block_107: // preds: addr_0_block_105
      nextln:   jump addr_0_block_108
      check: addr_0_block_108: // preds: addr_0_block_106 addr_0_block_107
      nextln:   v484 = i52.unsigned_from_bits v408
      nextln:   v485 = int.modulo v484, 0x1
      nextln:   v486 = int.sub v484, v485
      nextln:   v487 = i52.to_bits v486
      nextln:   v488 = bool.icmp.i52.eq v408, v487
      nextln:   v489 = i8.load v408
      nextln:   v490 = i64.and v335, 0xffffffffff00ffff
      nextln:   v491 = i8.lshl v489, 0x10
      nextln:   v492 = i64.or v490, v491
      nextln:   v493 = i64.wrapping_add v0, 0x3
      nextln:   v494 = i64.unsigned_from_bits v493
      nextln:   v495 = int.modulo v494, 0x1
      nextln:   v496 = int.sub v494, v495
      nextln:   v497 = i64.to_bits v496
      nextln:   v498 = bool.icmp.i64.eq v493, v497
      nextln:   v499 = i64.lshr v493, 0x30
      nextln:   v500 = i16.trunc.i64 v499
      nextln:   v501 = bool.icmp.i16.eq v500, 0x0
      nextln:   v502 = bool.bitwise_not v501
      nextln:   jumpif v502, addr_0_block_109, addr_0_block_110
      check: addr_0_block_109: // preds: addr_0_block_108
      nextln:   jump addr_0_block_111(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_112(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_110: // preds: addr_0_block_108
      nextln:   jump addr_0_block_111(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_111(v1298: i52, v1299: int, v1300: bool, v1301: bool): // preds: addr_0_block_110
      nextln:   v1302 = i52.trunc.i64 v493
      nextln:   jump addr_0_block_112(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1302, 0x1, 0x0)
      check: addr_0_block_112(v503: i3, v504: i1, v505: i1, v506: i1, v507: i1, v508: i4, v509: i1, v510: bool, v511: int, v512: int, v513: bool, v514: bool, v515: i8, v516: i8, v517: i52, v518: i1, v519: bool, v520: bool, v521: int, v522: i1, v523: bool, v524: i4, v525: i2, v526: i4, v527: i8, v528: i8, v529: i2, v530: i2, v531: bool, v532: i2, v533: i2, v534: bool, v535: bool, v536: bool, v537: bool, v538: i52, v539: i1, v540: i64, v541: i1, v542: i8, v543: i8, v544: i52, v545: i1, v546: bool, v547: bool, v548: int, v549: i1, v550: bool, v551: i4, v552: i2, v553: i4, v554: i8, v555: i8, v556: i2, v557: i2, v558: bool, v559: i2, v560: i2, v561: bool, v562: bool, v563: bool, v564: bool, v565: i52, v566: i1, v567: i64): // preds: addr_0_block_109 addr_0_block_111
      nextln:   v568 = bool.icmp.i8.ne v542, 0x0
      nextln:   v569 = bool.bitwise_not v568
      nextln:   v570 = bool.bitwise_not v5
      nextln:   v571 = bool.and v570, 0x1
      nextln:   v572 = bool.or v571, 0x0
      nextln:   v573 = bool.icmp.i8.ne v542, 0x0
      nextln:   v574 = bool.bitwise_not v573
      nextln:   v575 = bool.and v572, v574
      nextln:   v576 = bool.icmp.i8.eq v554, 0x1
      nextln:   v577 = bool.and v575, v576
      nextln:   jumpif v577, addr_0_block_113, addr_0_block_114
      check: addr_0_block_113: // preds: addr_0_block_112
      nextln:   jump addr_0_block_115
      check: addr_0_block_114: // preds: addr_0_block_112
      nextln:   jump addr_0_block_115
      check: addr_0_block_115: // preds: addr_0_block_113 addr_0_block_114
      nextln:   v578 = bool.icmp.i8.ne v542, 0x0
      nextln:   v579 = bool.bitwise_not v578
      nextln:   v580 = bool.icmp.i8.ne v542, 0x0
      nextln:   v581 = bool.bitwise_not v580
      nextln:   v582 = bool.icmp.i8.eq v554, 0x1
      nextln:   v583 = bool.and v581, v582
      nextln:   jumpif v513, addr_0_block_116, addr_0_block_117
      check: addr_0_block_116: // preds: addr_0_block_115
      nextln:   v584 = bool.icmp.i8.eq v542, 0x0
      nextln:   jump addr_0_block_118(0x1)
      check: addr_0_block_117: // preds: addr_0_block_115
      nextln:   jump addr_0_block_118(0x0)
      check: addr_0_block_118(v585: bool): // preds: addr_0_block_116 addr_0_block_117
      nextln:   v586 = bool.icmp.i8.eq v542, 0x0
      nextln:   v587 = bool.and v514, v586
      nextln:   jumpif v587, addr_0_block_119, addr_0_block_120
      check: addr_0_block_119: // preds: addr_0_block_118
      nextln:   jump addr_0_block_121(0x0, 0x0)
      check: addr_0_block_120: // preds: addr_0_block_118
      nextln:   jump addr_0_block_121(0x0, 0x0)
      check: addr_0_block_121(v588: bool, v589: bool): // preds: addr_0_block_119 addr_0_block_120
      nextln:   v590 = bool.or v585, v588
      nextln:   jumpif v590, addr_0_block_122, addr_0_block_135
      check: addr_0_block_122: // preds: addr_0_block_121
      nextln:   v591 = i52.unsigned_from_bits v538
      nextln:   v592 = int.modulo v591, 0x8
      nextln:   v593 = int.sub v591, v592
      nextln:   v594 = i52.to_bits v593
      nextln:   v595 = bool.icmp.i52.eq v538, v594
      nextln:   v596 = i64.load v538
      nextln:   jumpif v585, addr_0_block_123, addr_0_block_124
      nextln:   jump addr_0_block_136(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v596, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v538, v539, v540, 0x0, 0x0)
      check: addr_0_block_123: // no preds!
      nextln:   jump addr_0_block_125
      check: addr_0_block_124: // no preds!
      nextln:   jump addr_0_block_125
      check: addr_0_block_125: // preds: addr_0_block_123 addr_0_block_124
      nextln:   jumpif v588, addr_0_block_126, addr_0_block_127
      check: addr_0_block_126: // preds: addr_0_block_125
      nextln:   jump addr_0_block_128
      check: addr_0_block_127: // preds: addr_0_block_125
      nextln:   jump addr_0_block_128
      check: addr_0_block_128: // preds: addr_0_block_126 addr_0_block_127
      nextln:   v1348 = i52.unsigned_from_bits v538
      nextln:   v1349 = int.modulo v1348, 0x8
      nextln:   v1350 = int.sub v1348, v1349
      nextln:   v1351 = i52.to_bits v1350
      nextln:   v1352 = bool.icmp.i52.eq v538, v1351
      nextln:   v1353 = bool.icmp.i52.eq v538, 0x13000000
      nextln:   jumpif v1353, addr_0_block_129, addr_0_block_133
      check: addr_0_block_129: // preds: addr_0_block_128
      nextln:   v1354 = i64.unsigned_from_bits v596
      nextln:   v1355 = bool.icmp.int.eq v1354, 0x4
      nextln:   jumpif v1355, addr_0_block_130, addr_0_block_131
      nextln:   jump addr_0_block_134
      check: addr_0_block_130: // no preds!
      nextln:   jump addr_0_block_132
      check: addr_0_block_131: // no preds!
      nextln:   v1356 = i8.trunc.i64 v596
      nextln:   v1357 = i8.unsigned_from_bits v1356
      nextln:   jump addr_0_block_132
      check: addr_0_block_132: // preds: addr_0_block_130 addr_0_block_131
      check: addr_0_block_133: // preds: addr_0_block_128
      nextln:   store.i64 v596, v538
      nextln:   jump addr_0_block_134
      check: addr_0_block_134: // preds: addr_0_block_129 addr_0_block_133
      check: addr_0_block_135: // preds: addr_0_block_121
      nextln:   jump addr_0_block_136(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_136(v597: i8, v598: i1, v599: i16, v600: i8, v601: bool, v602: bool, v603: bool, v604: int, v605: i64, v606: i8, v607: i8, v608: i52, v609: i1, v610: bool, v611: bool, v612: int, v613: i1, v614: bool, v615: i4, v616: i2, v617: i4, v618: i8, v619: i8, v620: i2, v621: i2, v622: bool, v623: i2, v624: i2, v625: bool, v626: bool, v627: bool, v628: bool, v629: i52, v630: i1, v631: i64, v632: i2, v633: bool): // preds: addr_0_block_122 addr_0_block_135
      nextln:   v634 = bool.icmp.i8.ne v542, 0x0
      nextln:   v635 = bool.bitwise_not v634
      nextln:   v636 = bool.and v635, 0x1
      nextln:   v637 = bool.icmp.i8.ne v542, 0x0
      nextln:   v638 = bool.bitwise_not v637
      nextln:   v639 = bool.and 0x1, v638
      nextln:   jumpif v639, addr_0_block_137, addr_0_block_138
      check: addr_0_block_137: // preds: addr_0_block_136
      nextln:   jump addr_0_block_139
      check: addr_0_block_138: // preds: addr_0_block_136
      nextln:   jump addr_0_block_139
      check: addr_0_block_139: // preds: addr_0_block_137 addr_0_block_138
      nextln:   v640 = bool.icmp.i8.ne v542, 0x0
      nextln:   jumpif v640, addr_0_block_140, addr_0_block_141
      check: addr_0_block_140: // preds: addr_0_block_139
      nextln:   jump addr_0_block_142
      check: addr_0_block_141: // preds: addr_0_block_139
      nextln:   jump addr_0_block_142
      check: addr_0_block_142: // preds: addr_0_block_140 addr_0_block_141
      nextln:   v641 = i52.unsigned_from_bits v565
      nextln:   v642 = int.modulo v641, 0x1
      nextln:   v643 = int.sub v641, v642
      nextln:   v644 = i52.to_bits v643
      nextln:   v645 = bool.icmp.i52.eq v565, v644
      nextln:   v646 = i8.load v565
      nextln:   v647 = i64.and v492, 0xffffffff00ffffff
      nextln:   v648 = i8.lshl v646, 0x18
      nextln:   v649 = i64.or v647, v648
      nextln:   v650 = i64.wrapping_add v0, 0x4
      nextln:   v651 = i64.unsigned_from_bits v650
      nextln:   v652 = int.modulo v651, 0x1
      nextln:   v653 = int.sub v651, v652
      nextln:   v654 = i64.to_bits v653
      nextln:   v655 = bool.icmp.i64.eq v650, v654
      nextln:   v656 = i64.lshr v650, 0x30
      nextln:   v657 = i16.trunc.i64 v656
      nextln:   v658 = bool.icmp.i16.eq v657, 0x0
      nextln:   v659 = bool.bitwise_not v658
      nextln:   jumpif v659, addr_0_block_143, addr_0_block_144
      check: addr_0_block_143: // preds: addr_0_block_142
      nextln:   jump addr_0_block_145(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_146(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_144: // preds: addr_0_block_142
      nextln:   jump addr_0_block_145(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_145(v1293: i52, v1294: int, v1295: bool, v1296: bool): // preds: addr_0_block_144
      nextln:   v1297 = i52.trunc.i64 v650
      nextln:   jump addr_0_block_146(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1297, 0x1, 0x0)
      check: addr_0_block_146(v660: i3, v661: i1, v662: i1, v663: i1, v664: i1, v665: i4, v666: i1, v667: bool, v668: int, v669: int, v670: bool, v671: bool, v672: i8, v673: i8, v674: i52, v675: i1, v676: bool, v677: bool, v678: int, v679: i1, v680: bool, v681: i4, v682: i2, v683: i4, v684: i8, v685: i8, v686: i2, v687: i2, v688: bool, v689: i2, v690: i2, v691: bool, v692: bool, v693: bool, v694: bool, v695: i52, v696: i1, v697: i64, v698: i1, v699: i8, v700: i8, v701: i52, v702: i1, v703: bool, v704: bool, v705: int, v706: i1, v707: bool, v708: i4, v709: i2, v710: i4, v711: i8, v712: i8, v713: i2, v714: i2, v715: bool, v716: i2, v717: i2, v718: bool, v719: bool, v720: bool, v721: bool, v722: i52, v723: i1, v724: i64): // preds: addr_0_block_143 addr_0_block_145
      nextln:   v725 = bool.icmp.i8.ne v699, 0x0
      nextln:   v726 = bool.bitwise_not v725
      nextln:   v727 = bool.bitwise_not v5
      nextln:   v728 = bool.and v727, 0x1
      nextln:   v729 = bool.or v728, 0x0
      nextln:   v730 = bool.icmp.i8.ne v699, 0x0
      nextln:   v731 = bool.bitwise_not v730
      nextln:   v732 = bool.and v729, v731
      nextln:   v733 = bool.icmp.i8.eq v711, 0x1
      nextln:   v734 = bool.and v732, v733
      nextln:   jumpif v734, addr_0_block_147, addr_0_block_148
      check: addr_0_block_147: // preds: addr_0_block_146
      nextln:   jump addr_0_block_149
      check: addr_0_block_148: // preds: addr_0_block_146
      nextln:   jump addr_0_block_149
      check: addr_0_block_149: // preds: addr_0_block_147 addr_0_block_148
      nextln:   v735 = bool.icmp.i8.ne v699, 0x0
      nextln:   v736 = bool.bitwise_not v735
      nextln:   v737 = bool.icmp.i8.ne v699, 0x0
      nextln:   v738 = bool.bitwise_not v737
      nextln:   v739 = bool.icmp.i8.eq v711, 0x1
      nextln:   v740 = bool.and v738, v739
      nextln:   jumpif v670, addr_0_block_150, addr_0_block_151
      check: addr_0_block_150: // preds: addr_0_block_149
      nextln:   v741 = bool.icmp.i8.eq v699, 0x0
      nextln:   jump addr_0_block_152(0x1)
      check: addr_0_block_151: // preds: addr_0_block_149
      nextln:   jump addr_0_block_152(0x0)
      check: addr_0_block_152(v742: bool): // preds: addr_0_block_150 addr_0_block_151
      nextln:   v743 = bool.icmp.i8.eq v699, 0x0
      nextln:   v744 = bool.and v671, v743
      nextln:   jumpif v744, addr_0_block_153, addr_0_block_154
      check: addr_0_block_153: // preds: addr_0_block_152
      nextln:   jump addr_0_block_155(0x0, 0x0)
      check: addr_0_block_154: // preds: addr_0_block_152
      nextln:   jump addr_0_block_155(0x0, 0x0)
      check: addr_0_block_155(v745: bool, v746: bool): // preds: addr_0_block_153 addr_0_block_154
      nextln:   v747 = bool.or v742, v745
      nextln:   jumpif v747, addr_0_block_156, addr_0_block_169
      check: addr_0_block_156: // preds: addr_0_block_155
      nextln:   v748 = i52.unsigned_from_bits v695
      nextln:   v749 = int.modulo v748, 0x8
      nextln:   v750 = int.sub v748, v749
      nextln:   v751 = i52.to_bits v750
      nextln:   v752 = bool.icmp.i52.eq v695, v751
      nextln:   v753 = i64.load v695
      nextln:   jumpif v742, addr_0_block_157, addr_0_block_158
      nextln:   jump addr_0_block_170(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v753, v672, v673, v674, v675, v676, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, v689, v690, v691, v692, v693, v694, v695, v696, v697, 0x0, 0x0)
      check: addr_0_block_157: // no preds!
      nextln:   jump addr_0_block_159
      check: addr_0_block_158: // no preds!
      nextln:   jump addr_0_block_159
      check: addr_0_block_159: // preds: addr_0_block_157 addr_0_block_158
      nextln:   jumpif v745, addr_0_block_160, addr_0_block_161
      check: addr_0_block_160: // preds: addr_0_block_159
      nextln:   jump addr_0_block_162
      check: addr_0_block_161: // preds: addr_0_block_159
      nextln:   jump addr_0_block_162
      check: addr_0_block_162: // preds: addr_0_block_160 addr_0_block_161
      nextln:   v1358 = i52.unsigned_from_bits v695
      nextln:   v1359 = int.modulo v1358, 0x8
      nextln:   v1360 = int.sub v1358, v1359
      nextln:   v1361 = i52.to_bits v1360
      nextln:   v1362 = bool.icmp.i52.eq v695, v1361
      nextln:   v1363 = bool.icmp.i52.eq v695, 0x13000000
      nextln:   jumpif v1363, addr_0_block_163, addr_0_block_167
      check: addr_0_block_163: // preds: addr_0_block_162
      nextln:   v1364 = i64.unsigned_from_bits v753
      nextln:   v1365 = bool.icmp.int.eq v1364, 0x4
      nextln:   jumpif v1365, addr_0_block_164, addr_0_block_165
      nextln:   jump addr_0_block_168
      check: addr_0_block_164: // no preds!
      nextln:   jump addr_0_block_166
      check: addr_0_block_165: // no preds!
      nextln:   v1366 = i8.trunc.i64 v753
      nextln:   v1367 = i8.unsigned_from_bits v1366
      nextln:   jump addr_0_block_166
      check: addr_0_block_166: // preds: addr_0_block_164 addr_0_block_165
      check: addr_0_block_167: // preds: addr_0_block_162
      nextln:   store.i64 v753, v695
      nextln:   jump addr_0_block_168
      check: addr_0_block_168: // preds: addr_0_block_163 addr_0_block_167
      check: addr_0_block_169: // preds: addr_0_block_155
      nextln:   jump addr_0_block_170(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_170(v754: i8, v755: i1, v756: i16, v757: i8, v758: bool, v759: bool, v760: bool, v761: int, v762: i64, v763: i8, v764: i8, v765: i52, v766: i1, v767: bool, v768: bool, v769: int, v770: i1, v771: bool, v772: i4, v773: i2, v774: i4, v775: i8, v776: i8, v777: i2, v778: i2, v779: bool, v780: i2, v781: i2, v782: bool, v783: bool, v784: bool, v785: bool, v786: i52, v787: i1, v788: i64, v789: i2, v790: bool): // preds: addr_0_block_156 addr_0_block_169
      nextln:   v791 = bool.icmp.i8.ne v699, 0x0
      nextln:   v792 = bool.bitwise_not v791
      nextln:   v793 = bool.and v792, 0x1
      nextln:   v794 = bool.icmp.i8.ne v699, 0x0
      nextln:   v795 = bool.bitwise_not v794
      nextln:   v796 = bool.and 0x1, v795
      nextln:   jumpif v796, addr_0_block_171, addr_0_block_172
      check: addr_0_block_171: // preds: addr_0_block_170
      nextln:   jump addr_0_block_173
      check: addr_0_block_172: // preds: addr_0_block_170
      nextln:   jump addr_0_block_173
      check: addr_0_block_173: // preds: addr_0_block_171 addr_0_block_172
      nextln:   v797 = bool.icmp.i8.ne v699, 0x0
      nextln:   jumpif v797, addr_0_block_174, addr_0_block_175
      check: addr_0_block_174: // preds: addr_0_block_173
      nextln:   jump addr_0_block_176
      check: addr_0_block_175: // preds: addr_0_block_173
      nextln:   jump addr_0_block_176
      check: addr_0_block_176: // preds: addr_0_block_174 addr_0_block_175
      nextln:   v798 = i52.unsigned_from_bits v722
      nextln:   v799 = int.modulo v798, 0x1
      nextln:   v800 = int.sub v798, v799
      nextln:   v801 = i52.to_bits v800
      nextln:   v802 = bool.icmp.i52.eq v722, v801
      nextln:   v803 = i8.load v722
      nextln:   v804 = i64.and v649, 0xffffff00ffffffff
      nextln:   v805 = i8.lshl v803, 0x20
      nextln:   v806 = i64.or v804, v805
      nextln:   v807 = i64.wrapping_add v0, 0x5
      nextln:   v808 = i64.unsigned_from_bits v807
      nextln:   v809 = int.modulo v808, 0x1
      nextln:   v810 = int.sub v808, v809
      nextln:   v811 = i64.to_bits v810
      nextln:   v812 = bool.icmp.i64.eq v807, v811
      nextln:   v813 = i64.lshr v807, 0x30
      nextln:   v814 = i16.trunc.i64 v813
      nextln:   v815 = bool.icmp.i16.eq v814, 0x0
      nextln:   v816 = bool.bitwise_not v815
      nextln:   jumpif v816, addr_0_block_177, addr_0_block_178
      check: addr_0_block_177: // preds: addr_0_block_176
      nextln:   jump addr_0_block_179(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_180(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_178: // preds: addr_0_block_176
      nextln:   jump addr_0_block_179(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_179(v1288: i52, v1289: int, v1290: bool, v1291: bool): // preds: addr_0_block_178
      nextln:   v1292 = i52.trunc.i64 v807
      nextln:   jump addr_0_block_180(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1292, 0x1, 0x0)
      check: addr_0_block_180(v817: i3, v818: i1, v819: i1, v820: i1, v821: i1, v822: i4, v823: i1, v824: bool, v825: int, v826: int, v827: bool, v828: bool, v829: i8, v830: i8, v831: i52, v832: i1, v833: bool, v834: bool, v835: int, v836: i1, v837: bool, v838: i4, v839: i2, v840: i4, v841: i8, v842: i8, v843: i2, v844: i2, v845: bool, v846: i2, v847: i2, v848: bool, v849: bool, v850: bool, v851: bool, v852: i52, v853: i1, v854: i64, v855: i1, v856: i8, v857: i8, v858: i52, v859: i1, v860: bool, v861: bool, v862: int, v863: i1, v864: bool, v865: i4, v866: i2, v867: i4, v868: i8, v869: i8, v870: i2, v871: i2, v872: bool, v873: i2, v874: i2, v875: bool, v876: bool, v877: bool, v878: bool, v879: i52, v880: i1, v881: i64): // preds: addr_0_block_177 addr_0_block_179
      nextln:   v882 = bool.icmp.i8.ne v856, 0x0
      nextln:   v883 = bool.bitwise_not v882
      nextln:   v884 = bool.bitwise_not v5
      nextln:   v885 = bool.and v884, 0x1
      nextln:   v886 = bool.or v885, 0x0
      nextln:   v887 = bool.icmp.i8.ne v856, 0x0
      nextln:   v888 = bool.bitwise_not v887
      nextln:   v889 = bool.and v886, v888
      nextln:   v890 = bool.icmp.i8.eq v868, 0x1
      nextln:   v891 = bool.and v889, v890
      nextln:   jumpif v891, addr_0_block_181, addr_0_block_182
      check: addr_0_block_181: // preds: addr_0_block_180
      nextln:   jump addr_0_block_183
      check: addr_0_block_182: // preds: addr_0_block_180
      nextln:   jump addr_0_block_183
      check: addr_0_block_183: // preds: addr_0_block_181 addr_0_block_182
      nextln:   v892 = bool.icmp.i8.ne v856, 0x0
      nextln:   v893 = bool.bitwise_not v892
      nextln:   v894 = bool.icmp.i8.ne v856, 0x0
      nextln:   v895 = bool.bitwise_not v894
      nextln:   v896 = bool.icmp.i8.eq v868, 0x1
      nextln:   v897 = bool.and v895, v896
      nextln:   jumpif v827, addr_0_block_184, addr_0_block_185
      check: addr_0_block_184: // preds: addr_0_block_183
      nextln:   v898 = bool.icmp.i8.eq v856, 0x0
      nextln:   jump addr_0_block_186(0x1)
      check: addr_0_block_185: // preds: addr_0_block_183
      nextln:   jump addr_0_block_186(0x0)
      check: addr_0_block_186(v899: bool): // preds: addr_0_block_184 addr_0_block_185
      nextln:   v900 = bool.icmp.i8.eq v856, 0x0
      nextln:   v901 = bool.and v828, v900
      nextln:   jumpif v901, addr_0_block_187, addr_0_block_188
      check: addr_0_block_187: // preds: addr_0_block_186
      nextln:   jump addr_0_block_189(0x0, 0x0)
      check: addr_0_block_188: // preds: addr_0_block_186
      nextln:   jump addr_0_block_189(0x0, 0x0)
      check: addr_0_block_189(v902: bool, v903: bool): // preds: addr_0_block_187 addr_0_block_188
      nextln:   v904 = bool.or v899, v902
      nextln:   jumpif v904, addr_0_block_190, addr_0_block_203
      check: addr_0_block_190: // preds: addr_0_block_189
      nextln:   v905 = i52.unsigned_from_bits v852
      nextln:   v906 = int.modulo v905, 0x8
      nextln:   v907 = int.sub v905, v906
      nextln:   v908 = i52.to_bits v907
      nextln:   v909 = bool.icmp.i52.eq v852, v908
      nextln:   v910 = i64.load v852
      nextln:   jumpif v899, addr_0_block_191, addr_0_block_192
      nextln:   jump addr_0_block_204(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v910, v829, v830, v831, v832, v833, v834, v835, v836, v837, v838, v839, v840, v841, v842, v843, v844, v845, v846, v847, v848, v849, v850, v851, v852, v853, v854, 0x0, 0x0)
      check: addr_0_block_191: // no preds!
      nextln:   jump addr_0_block_193
      check: addr_0_block_192: // no preds!
      nextln:   jump addr_0_block_193
      check: addr_0_block_193: // preds: addr_0_block_191 addr_0_block_192
      nextln:   jumpif v902, addr_0_block_194, addr_0_block_195
      check: addr_0_block_194: // preds: addr_0_block_193
      nextln:   jump addr_0_block_196
      check: addr_0_block_195: // preds: addr_0_block_193
      nextln:   jump addr_0_block_196
      check: addr_0_block_196: // preds: addr_0_block_194 addr_0_block_195
      nextln:   v1368 = i52.unsigned_from_bits v852
      nextln:   v1369 = int.modulo v1368, 0x8
      nextln:   v1370 = int.sub v1368, v1369
      nextln:   v1371 = i52.to_bits v1370
      nextln:   v1372 = bool.icmp.i52.eq v852, v1371
      nextln:   v1373 = bool.icmp.i52.eq v852, 0x13000000
      nextln:   jumpif v1373, addr_0_block_197, addr_0_block_201
      check: addr_0_block_197: // preds: addr_0_block_196
      nextln:   v1374 = i64.unsigned_from_bits v910
      nextln:   v1375 = bool.icmp.int.eq v1374, 0x4
      nextln:   jumpif v1375, addr_0_block_198, addr_0_block_199
      nextln:   jump addr_0_block_202
      check: addr_0_block_198: // no preds!
      nextln:   jump addr_0_block_200
      check: addr_0_block_199: // no preds!
      nextln:   v1376 = i8.trunc.i64 v910
      nextln:   v1377 = i8.unsigned_from_bits v1376
      nextln:   jump addr_0_block_200
      check: addr_0_block_200: // preds: addr_0_block_198 addr_0_block_199
      check: addr_0_block_201: // preds: addr_0_block_196
      nextln:   store.i64 v910, v852
      nextln:   jump addr_0_block_202
      check: addr_0_block_202: // preds: addr_0_block_197 addr_0_block_201
      check: addr_0_block_203: // preds: addr_0_block_189
      nextln:   jump addr_0_block_204(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_204(v911: i8, v912: i1, v913: i16, v914: i8, v915: bool, v916: bool, v917: bool, v918: int, v919: i64, v920: i8, v921: i8, v922: i52, v923: i1, v924: bool, v925: bool, v926: int, v927: i1, v928: bool, v929: i4, v930: i2, v931: i4, v932: i8, v933: i8, v934: i2, v935: i2, v936: bool, v937: i2, v938: i2, v939: bool, v940: bool, v941: bool, v942: bool, v943: i52, v944: i1, v945: i64, v946: i2, v947: bool): // preds: addr_0_block_190 addr_0_block_203
      nextln:   v948 = bool.icmp.i8.ne v856, 0x0
      nextln:   v949 = bool.bitwise_not v948
      nextln:   v950 = bool.and v949, 0x1
      nextln:   v951 = bool.icmp.i8.ne v856, 0x0
      nextln:   v952 = bool.bitwise_not v951
      nextln:   v953 = bool.and 0x1, v952
      nextln:   jumpif v953, addr_0_block_205, addr_0_block_206
      check: addr_0_block_205: // preds: addr_0_block_204
      nextln:   jump addr_0_block_207
      check: addr_0_block_206: // preds: addr_0_block_204
      nextln:   jump addr_0_block_207
      check: addr_0_block_207: // preds: addr_0_block_205 addr_0_block_206
      nextln:   v954 = bool.icmp.i8.ne v856, 0x0
      nextln:   jumpif v954, addr_0_block_208, addr_0_block_209
      check: addr_0_block_208: // preds: addr_0_block_207
      nextln:   jump addr_0_block_210
      check: addr_0_block_209: // preds: addr_0_block_207
      nextln:   jump addr_0_block_210
      check: addr_0_block_210: // preds: addr_0_block_208 addr_0_block_209
      nextln:   v955 = i52.unsigned_from_bits v879
      nextln:   v956 = int.modulo v955, 0x1
      nextln:   v957 = int.sub v955, v956
      nextln:   v958 = i52.to_bits v957
      nextln:   v959 = bool.icmp.i52.eq v879, v958
      nextln:   v960 = i8.load v879
      nextln:   v961 = i64.and v806, 0xffff00ffffffffff
      nextln:   v962 = i8.lshl v960, 0x28
      nextln:   v963 = i64.or v961, v962
      nextln:   v964 = i64.wrapping_add v0, 0x6
      nextln:   v965 = i64.unsigned_from_bits v964
      nextln:   v966 = int.modulo v965, 0x1
      nextln:   v967 = int.sub v965, v966
      nextln:   v968 = i64.to_bits v967
      nextln:   v969 = bool.icmp.i64.eq v964, v968
      nextln:   v970 = i64.lshr v964, 0x30
      nextln:   v971 = i16.trunc.i64 v970
      nextln:   v972 = bool.icmp.i16.eq v971, 0x0
      nextln:   v973 = bool.bitwise_not v972
      nextln:   jumpif v973, addr_0_block_211, addr_0_block_212
      check: addr_0_block_211: // preds: addr_0_block_210
      nextln:   jump addr_0_block_213(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_214(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_212: // preds: addr_0_block_210
      nextln:   jump addr_0_block_213(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_213(v1283: i52, v1284: int, v1285: bool, v1286: bool): // preds: addr_0_block_212
      nextln:   v1287 = i52.trunc.i64 v964
      nextln:   jump addr_0_block_214(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1287, 0x1, 0x0)
      check: addr_0_block_214(v974: i3, v975: i1, v976: i1, v977: i1, v978: i1, v979: i4, v980: i1, v981: bool, v982: int, v983: int, v984: bool, v985: bool, v986: i8, v987: i8, v988: i52, v989: i1, v990: bool, v991: bool, v992: int, v993: i1, v994: bool, v995: i4, v996: i2, v997: i4, v998: i8, v999: i8, v1000: i2, v1001: i2, v1002: bool, v1003: i2, v1004: i2, v1005: bool, v1006: bool, v1007: bool, v1008: bool, v1009: i52, v1010: i1, v1011: i64, v1012: i1, v1013: i8, v1014: i8, v1015: i52, v1016: i1, v1017: bool, v1018: bool, v1019: int, v1020: i1, v1021: bool, v1022: i4, v1023: i2, v1024: i4, v1025: i8, v1026: i8, v1027: i2, v1028: i2, v1029: bool, v1030: i2, v1031: i2, v1032: bool, v1033: bool, v1034: bool, v1035: bool, v1036: i52, v1037: i1, v1038: i64): // preds: addr_0_block_211 addr_0_block_213
      nextln:   v1039 = bool.icmp.i8.ne v1013, 0x0
      nextln:   v1040 = bool.bitwise_not v1039
      nextln:   v1041 = bool.bitwise_not v5
      nextln:   v1042 = bool.and v1041, 0x1
      nextln:   v1043 = bool.or v1042, 0x0
      nextln:   v1044 = bool.icmp.i8.ne v1013, 0x0
      nextln:   v1045 = bool.bitwise_not v1044
      nextln:   v1046 = bool.and v1043, v1045
      nextln:   v1047 = bool.icmp.i8.eq v1025, 0x1
      nextln:   v1048 = bool.and v1046, v1047
      nextln:   jumpif v1048, addr_0_block_215, addr_0_block_216
      check: addr_0_block_215: // preds: addr_0_block_214
      nextln:   jump addr_0_block_217
      check: addr_0_block_216: // preds: addr_0_block_214
      nextln:   jump addr_0_block_217
      check: addr_0_block_217: // preds: addr_0_block_215 addr_0_block_216
      nextln:   v1049 = bool.icmp.i8.ne v1013, 0x0
      nextln:   v1050 = bool.bitwise_not v1049
      nextln:   v1051 = bool.icmp.i8.ne v1013, 0x0
      nextln:   v1052 = bool.bitwise_not v1051
      nextln:   v1053 = bool.icmp.i8.eq v1025, 0x1
      nextln:   v1054 = bool.and v1052, v1053
      nextln:   jumpif v984, addr_0_block_218, addr_0_block_219
      check: addr_0_block_218: // preds: addr_0_block_217
      nextln:   v1055 = bool.icmp.i8.eq v1013, 0x0
      nextln:   jump addr_0_block_220(0x1)
      check: addr_0_block_219: // preds: addr_0_block_217
      nextln:   jump addr_0_block_220(0x0)
      check: addr_0_block_220(v1056: bool): // preds: addr_0_block_218 addr_0_block_219
      nextln:   v1057 = bool.icmp.i8.eq v1013, 0x0
      nextln:   v1058 = bool.and v985, v1057
      nextln:   jumpif v1058, addr_0_block_221, addr_0_block_222
      check: addr_0_block_221: // preds: addr_0_block_220
      nextln:   jump addr_0_block_223(0x0, 0x0)
      check: addr_0_block_222: // preds: addr_0_block_220
      nextln:   jump addr_0_block_223(0x0, 0x0)
      check: addr_0_block_223(v1059: bool, v1060: bool): // preds: addr_0_block_221 addr_0_block_222
      nextln:   v1061 = bool.or v1056, v1059
      nextln:   jumpif v1061, addr_0_block_224, addr_0_block_237
      check: addr_0_block_224: // preds: addr_0_block_223
      nextln:   v1062 = i52.unsigned_from_bits v1009
      nextln:   v1063 = int.modulo v1062, 0x8
      nextln:   v1064 = int.sub v1062, v1063
      nextln:   v1065 = i52.to_bits v1064
      nextln:   v1066 = bool.icmp.i52.eq v1009, v1065
      nextln:   v1067 = i64.load v1009
      nextln:   jumpif v1056, addr_0_block_225, addr_0_block_226
      nextln:   jump addr_0_block_238(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v1067, v986, v987, v988, v989, v990, v991, v992, v993, v994, v995, v996, v997, v998, v999, v1000, v1001, v1002, v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010, v1011, 0x0, 0x0)
      check: addr_0_block_225: // no preds!
      nextln:   jump addr_0_block_227
      check: addr_0_block_226: // no preds!
      nextln:   jump addr_0_block_227
      check: addr_0_block_227: // preds: addr_0_block_225 addr_0_block_226
      nextln:   jumpif v1059, addr_0_block_228, addr_0_block_229
      check: addr_0_block_228: // preds: addr_0_block_227
      nextln:   jump addr_0_block_230
      check: addr_0_block_229: // preds: addr_0_block_227
      nextln:   jump addr_0_block_230
      check: addr_0_block_230: // preds: addr_0_block_228 addr_0_block_229
      nextln:   v1378 = i52.unsigned_from_bits v1009
      nextln:   v1379 = int.modulo v1378, 0x8
      nextln:   v1380 = int.sub v1378, v1379
      nextln:   v1381 = i52.to_bits v1380
      nextln:   v1382 = bool.icmp.i52.eq v1009, v1381
      nextln:   v1383 = bool.icmp.i52.eq v1009, 0x13000000
      nextln:   jumpif v1383, addr_0_block_231, addr_0_block_235
      check: addr_0_block_231: // preds: addr_0_block_230
      nextln:   v1384 = i64.unsigned_from_bits v1067
      nextln:   v1385 = bool.icmp.int.eq v1384, 0x4
      nextln:   jumpif v1385, addr_0_block_232, addr_0_block_233
      nextln:   jump addr_0_block_236
      check: addr_0_block_232: // no preds!
      nextln:   jump addr_0_block_234
      check: addr_0_block_233: // no preds!
      nextln:   v1386 = i8.trunc.i64 v1067
      nextln:   v1387 = i8.unsigned_from_bits v1386
      nextln:   jump addr_0_block_234
      check: addr_0_block_234: // preds: addr_0_block_232 addr_0_block_233
      check: addr_0_block_235: // preds: addr_0_block_230
      nextln:   store.i64 v1067, v1009
      nextln:   jump addr_0_block_236
      check: addr_0_block_236: // preds: addr_0_block_231 addr_0_block_235
      check: addr_0_block_237: // preds: addr_0_block_223
      nextln:   jump addr_0_block_238(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_238(v1068: i8, v1069: i1, v1070: i16, v1071: i8, v1072: bool, v1073: bool, v1074: bool, v1075: int, v1076: i64, v1077: i8, v1078: i8, v1079: i52, v1080: i1, v1081: bool, v1082: bool, v1083: int, v1084: i1, v1085: bool, v1086: i4, v1087: i2, v1088: i4, v1089: i8, v1090: i8, v1091: i2, v1092: i2, v1093: bool, v1094: i2, v1095: i2, v1096: bool, v1097: bool, v1098: bool, v1099: bool, v1100: i52, v1101: i1, v1102: i64, v1103: i2, v1104: bool): // preds: addr_0_block_224 addr_0_block_237
      nextln:   v1105 = bool.icmp.i8.ne v1013, 0x0
      nextln:   v1106 = bool.bitwise_not v1105
      nextln:   v1107 = bool.and v1106, 0x1
      nextln:   v1108 = bool.icmp.i8.ne v1013, 0x0
      nextln:   v1109 = bool.bitwise_not v1108
      nextln:   v1110 = bool.and 0x1, v1109
      nextln:   jumpif v1110, addr_0_block_239, addr_0_block_240
      check: addr_0_block_239: // preds: addr_0_block_238
      nextln:   jump addr_0_block_241
      check: addr_0_block_240: // preds: addr_0_block_238
      nextln:   jump addr_0_block_241
      check: addr_0_block_241: // preds: addr_0_block_239 addr_0_block_240
      nextln:   v1111 = bool.icmp.i8.ne v1013, 0x0
      nextln:   jumpif v1111, addr_0_block_242, addr_0_block_243
      check: addr_0_block_242: // preds: addr_0_block_241
      nextln:   jump addr_0_block_244
      check: addr_0_block_243: // preds: addr_0_block_241
      nextln:   jump addr_0_block_244
      check: addr_0_block_244: // preds: addr_0_block_242 addr_0_block_243
      nextln:   v1112 = i52.unsigned_from_bits v1036
      nextln:   v1113 = int.modulo v1112, 0x1
      nextln:   v1114 = int.sub v1112, v1113
      nextln:   v1115 = i52.to_bits v1114
      nextln:   v1116 = bool.icmp.i52.eq v1036, v1115
      nextln:   v1117 = i8.load v1036
      nextln:   v1118 = i64.and v963, 0xff00ffffffffffff
      nextln:   v1119 = i8.lshl v1117, 0x30
      nextln:   v1120 = i64.or v1118, v1119
      nextln:   v1121 = i64.wrapping_add v0, 0x7
      nextln:   v1122 = i64.unsigned_from_bits v1121
      nextln:   v1123 = int.modulo v1122, 0x1
      nextln:   v1124 = int.sub v1122, v1123
      nextln:   v1125 = i64.to_bits v1124
      nextln:   v1126 = bool.icmp.i64.eq v1121, v1125
      nextln:   v1127 = i64.lshr v1121, 0x30
      nextln:   v1128 = i16.trunc.i64 v1127
      nextln:   v1129 = bool.icmp.i16.eq v1128, 0x0
      nextln:   v1130 = bool.bitwise_not v1129
      nextln:   jumpif v1130, addr_0_block_245, addr_0_block_246
      check: addr_0_block_245: // preds: addr_0_block_244
      nextln:   jump addr_0_block_247(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_248(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_246: // preds: addr_0_block_244
      nextln:   jump addr_0_block_247(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_247(v1278: i52, v1279: int, v1280: bool, v1281: bool): // preds: addr_0_block_246
      nextln:   v1282 = i52.trunc.i64 v1121
      nextln:   jump addr_0_block_248(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1282, 0x1, 0x0)
      check: addr_0_block_248(v1131: i3, v1132: i1, v1133: i1, v1134: i1, v1135: i1, v1136: i4, v1137: i1, v1138: bool, v1139: int, v1140: int, v1141: bool, v1142: bool, v1143: i8, v1144: i8, v1145: i52, v1146: i1, v1147: bool, v1148: bool, v1149: int, v1150: i1, v1151: bool, v1152: i4, v1153: i2, v1154: i4, v1155: i8, v1156: i8, v1157: i2, v1158: i2, v1159: bool, v1160: i2, v1161: i2, v1162: bool, v1163: bool, v1164: bool, v1165: bool, v1166: i52, v1167: i1, v1168: i64, v1169: i1, v1170: i8, v1171: i8, v1172: i52, v1173: i1, v1174: bool, v1175: bool, v1176: int, v1177: i1, v1178: bool, v1179: i4, v1180: i2, v1181: i4, v1182: i8, v1183: i8, v1184: i2, v1185: i2, v1186: bool, v1187: i2, v1188: i2, v1189: bool, v1190: bool, v1191: bool, v1192: bool, v1193: i52, v1194: i1, v1195: i64): // preds: addr_0_block_245 addr_0_block_247
      nextln:   v1196 = bool.icmp.i8.ne v1170, 0x0
      nextln:   v1197 = bool.bitwise_not v1196
      nextln:   v1198 = bool.bitwise_not v5
      nextln:   v1199 = bool.and v1198, 0x1
      nextln:   v1200 = bool.or v1199, 0x0
      nextln:   v1201 = bool.icmp.i8.ne v1170, 0x0
      nextln:   v1202 = bool.bitwise_not v1201
      nextln:   v1203 = bool.and v1200, v1202
      nextln:   v1204 = bool.icmp.i8.eq v1182, 0x1
      nextln:   v1205 = bool.and v1203, v1204
      nextln:   jumpif v1205, addr_0_block_249, addr_0_block_250
      check: addr_0_block_249: // preds: addr_0_block_248
      nextln:   jump addr_0_block_251
      check: addr_0_block_250: // preds: addr_0_block_248
      nextln:   jump addr_0_block_251
      check: addr_0_block_251: // preds: addr_0_block_249 addr_0_block_250
      nextln:   v1206 = bool.icmp.i8.ne v1170, 0x0
      nextln:   v1207 = bool.bitwise_not v1206
      nextln:   v1208 = bool.icmp.i8.ne v1170, 0x0
      nextln:   v1209 = bool.bitwise_not v1208
      nextln:   v1210 = bool.icmp.i8.eq v1182, 0x1
      nextln:   v1211 = bool.and v1209, v1210
      nextln:   jumpif v1141, addr_0_block_252, addr_0_block_253
      check: addr_0_block_252: // preds: addr_0_block_251
      nextln:   v1212 = bool.icmp.i8.eq v1170, 0x0
      nextln:   jump addr_0_block_254(0x1)
      check: addr_0_block_253: // preds: addr_0_block_251
      nextln:   jump addr_0_block_254(0x0)
      check: addr_0_block_254(v1213: bool): // preds: addr_0_block_252 addr_0_block_253
      nextln:   v1214 = bool.icmp.i8.eq v1170, 0x0
      nextln:   v1215 = bool.and v1142, v1214
      nextln:   jumpif v1215, addr_0_block_255, addr_0_block_256
      check: addr_0_block_255: // preds: addr_0_block_254
      nextln:   jump addr_0_block_257(0x0, 0x0)
      check: addr_0_block_256: // preds: addr_0_block_254
      nextln:   jump addr_0_block_257(0x0, 0x0)
      check: addr_0_block_257(v1216: bool, v1217: bool): // preds: addr_0_block_255 addr_0_block_256
      nextln:   v1218 = bool.or v1213, v1216
      nextln:   jumpif v1218, addr_0_block_258, addr_0_block_271
      check: addr_0_block_258: // preds: addr_0_block_257
      nextln:   v1219 = i52.unsigned_from_bits v1166
      nextln:   v1220 = int.modulo v1219, 0x8
      nextln:   v1221 = int.sub v1219, v1220
      nextln:   v1222 = i52.to_bits v1221
      nextln:   v1223 = bool.icmp.i52.eq v1166, v1222
      nextln:   v1224 = i64.load v1166
      nextln:   jumpif v1213, addr_0_block_259, addr_0_block_260
      nextln:   jump addr_0_block_272(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v1224, v1143, v1144, v1145, v1146, v1147, v1148, v1149, v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160, v1161, v1162, v1163, v1164, v1165, v1166, v1167, v1168, 0x0, 0x0)
      check: addr_0_block_259: // no preds!
      nextln:   jump addr_0_block_261
      check: addr_0_block_260: // no preds!
      nextln:   jump addr_0_block_261
      check: addr_0_block_261: // preds: addr_0_block_259 addr_0_block_260
      nextln:   jumpif v1216, addr_0_block_262, addr_0_block_263
      check: addr_0_block_262: // preds: addr_0_block_261
      nextln:   jump addr_0_block_264
      check: addr_0_block_263: // preds: addr_0_block_261
      nextln:   jump addr_0_block_264
      check: addr_0_block_264: // preds: addr_0_block_262 addr_0_block_263
      nextln:   v1388 = i52.unsigned_from_bits v1166
      nextln:   v1389 = int.modulo v1388, 0x8
      nextln:   v1390 = int.sub v1388, v1389
      nextln:   v1391 = i52.to_bits v1390
      nextln:   v1392 = bool.icmp.i52.eq v1166, v1391
      nextln:   v1393 = bool.icmp.i52.eq v1166, 0x13000000
      nextln:   jumpif v1393, addr_0_block_265, addr_0_block_269
      check: addr_0_block_265: // preds: addr_0_block_264
      nextln:   v1394 = i64.unsigned_from_bits v1224
      nextln:   v1395 = bool.icmp.int.eq v1394, 0x4
      nextln:   jumpif v1395, addr_0_block_266, addr_0_block_267
      nextln:   jump addr_0_block_270
      check: addr_0_block_266: // no preds!
      nextln:   jump addr_0_block_268
      check: addr_0_block_267: // no preds!
      nextln:   v1396 = i8.trunc.i64 v1224
      nextln:   v1397 = i8.unsigned_from_bits v1396
      nextln:   jump addr_0_block_268
      check: addr_0_block_268: // preds: addr_0_block_266 addr_0_block_267
      check: addr_0_block_269: // preds: addr_0_block_264
      nextln:   store.i64 v1224, v1166
      nextln:   jump addr_0_block_270
      check: addr_0_block_270: // preds: addr_0_block_265 addr_0_block_269
      check: addr_0_block_271: // preds: addr_0_block_257
      nextln:   jump addr_0_block_272(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_272(v1225: i8, v1226: i1, v1227: i16, v1228: i8, v1229: bool, v1230: bool, v1231: bool, v1232: int, v1233: i64, v1234: i8, v1235: i8, v1236: i52, v1237: i1, v1238: bool, v1239: bool, v1240: int, v1241: i1, v1242: bool, v1243: i4, v1244: i2, v1245: i4, v1246: i8, v1247: i8, v1248: i2, v1249: i2, v1250: bool, v1251: i2, v1252: i2, v1253: bool, v1254: bool, v1255: bool, v1256: bool, v1257: i52, v1258: i1, v1259: i64, v1260: i2, v1261: bool): // preds: addr_0_block_258 addr_0_block_271
      nextln:   v1262 = bool.icmp.i8.ne v1170, 0x0
      nextln:   v1263 = bool.bitwise_not v1262
      nextln:   v1264 = bool.and v1263, 0x1
      nextln:   v1265 = bool.icmp.i8.ne v1170, 0x0
      nextln:   v1266 = bool.bitwise_not v1265
      nextln:   v1267 = bool.and 0x1, v1266
      nextln:   jumpif v1267, addr_0_block_273, addr_0_block_274
      check: addr_0_block_273: // preds: addr_0_block_272
      nextln:   jump addr_0_block_275
      check: addr_0_block_274: // preds: addr_0_block_272
      nextln:   jump addr_0_block_275
      check: addr_0_block_275: // preds: addr_0_block_273 addr_0_block_274
      nextln:   v1268 = bool.icmp.i8.ne v1170, 0x0
      nextln:   jumpif v1268, addr_0_block_276, addr_0_block_277
      check: addr_0_block_276: // preds: addr_0_block_275
      nextln:   jump addr_0_block_278
      check: addr_0_block_277: // preds: addr_0_block_275
      nextln:   jump addr_0_block_278
      check: addr_0_block_278: // preds: addr_0_block_276 addr_0_block_277
      nextln:   v1269 = i52.unsigned_from_bits v1193
      nextln:   v1270 = int.modulo v1269, 0x1
      nextln:   v1271 = int.sub v1269, v1270
      nextln:   v1272 = i52.to_bits v1271
      nextln:   v1273 = bool.icmp.i52.eq v1193, v1272
      nextln:   v1274 = i8.load v1193
      nextln:   v1275 = i64.and v1120, 0xffffffffffffff
      nextln:   v1276 = i8.lshl v1274, 0x38
      nextln:   v1277 = i64.or v1275, v1276
      check: addr_0_block_279: // preds: addr_0_block_2
      nextln:   v22 = i64.unsigned_from_bits v0
      nextln:   v23 = int.modulo v22, 0x8
      nextln:   v24 = int.sub v22, v23
      nextln:   v25 = i64.to_bits v24
      nextln:   v26 = bool.icmp.i64.eq v0, v25
      nextln:   v27 = i64.lshr v0, 0x30
      nextln:   v28 = i16.trunc.i64 v27
      nextln:   v29 = bool.icmp.i16.eq v28, 0x0
      nextln:   v30 = bool.bitwise_not v29
      nextln:   jumpif v30, addr_0_block_280, addr_0_block_281
      nextln:   jump addr_0_block_314(v5, 0x0, v1541)
      check: addr_0_block_280: // no preds!
      nextln:   jump addr_0_block_282(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_283(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_281: // no preds!
      nextln:   jump addr_0_block_282(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_282(v1542: i52, v1543: int, v1544: bool, v1545: bool): // preds: addr_0_block_281
      nextln:   v1546 = i52.trunc.i64 v0
      nextln:   jump addr_0_block_283(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1546, 0x1, 0x0)
      check: addr_0_block_283(v1398: i3, v1399: i1, v1400: i1, v1401: i1, v1402: i1, v1403: i4, v1404: i1, v1405: bool, v1406: int, v1407: int, v1408: bool, v1409: bool, v1410: i8, v1411: i8, v1412: i52, v1413: i1, v1414: bool, v1415: bool, v1416: int, v1417: i1, v1418: bool, v1419: i4, v1420: i2, v1421: i4, v1422: i8, v1423: i8, v1424: i2, v1425: i2, v1426: bool, v1427: i2, v1428: i2, v1429: bool, v1430: bool, v1431: bool, v1432: bool, v1433: i52, v1434: i1, v1435: i64, v1436: i1, v1437: i8, v1438: i8, v1439: i52, v1440: i1, v1441: bool, v1442: bool, v1443: int, v1444: i1, v1445: bool, v1446: i4, v1447: i2, v1448: i4, v1449: i8, v1450: i8, v1451: i2, v1452: i2, v1453: bool, v1454: i2, v1455: i2, v1456: bool, v1457: bool, v1458: bool, v1459: bool, v1460: i52, v1461: i1, v1462: i64): // preds: addr_0_block_280 addr_0_block_282
      nextln:   v1463 = bool.icmp.i8.ne v1437, 0x0
      nextln:   v1464 = bool.bitwise_not v1463
      nextln:   v1465 = bool.bitwise_not v5
      nextln:   v1466 = bool.and v1465, 0x1
      nextln:   v1467 = bool.or v1466, 0x0
      nextln:   v1468 = bool.icmp.i8.ne v1437, 0x0
      nextln:   v1469 = bool.bitwise_not v1468
      nextln:   v1470 = bool.and v1467, v1469
      nextln:   v1471 = bool.icmp.i8.eq v1449, 0x1
      nextln:   v1472 = bool.and v1470, v1471
      nextln:   jumpif v1472, addr_0_block_284, addr_0_block_285
      check: addr_0_block_284: // preds: addr_0_block_283
      nextln:   jump addr_0_block_286
      check: addr_0_block_285: // preds: addr_0_block_283
      nextln:   jump addr_0_block_286
      check: addr_0_block_286: // preds: addr_0_block_284 addr_0_block_285
      nextln:   v1473 = bool.icmp.i8.ne v1437, 0x0
      nextln:   v1474 = bool.bitwise_not v1473
      nextln:   v1475 = bool.icmp.i8.ne v1437, 0x0
      nextln:   v1476 = bool.bitwise_not v1475
      nextln:   v1477 = bool.icmp.i8.eq v1449, 0x1
      nextln:   v1478 = bool.and v1476, v1477
      nextln:   jumpif v1408, addr_0_block_287, addr_0_block_288
      check: addr_0_block_287: // preds: addr_0_block_286
      nextln:   v1479 = bool.icmp.i8.eq v1437, 0x0
      nextln:   jump addr_0_block_289(0x1)
      check: addr_0_block_288: // preds: addr_0_block_286
      nextln:   jump addr_0_block_289(0x0)
      check: addr_0_block_289(v1480: bool): // preds: addr_0_block_287 addr_0_block_288
      nextln:   v1481 = bool.icmp.i8.eq v1437, 0x0
      nextln:   v1482 = bool.and v1409, v1481
      nextln:   jumpif v1482, addr_0_block_290, addr_0_block_291
      check: addr_0_block_290: // preds: addr_0_block_289
      nextln:   jump addr_0_block_292(0x0, 0x0)
      check: addr_0_block_291: // preds: addr_0_block_289
      nextln:   jump addr_0_block_292(0x0, 0x0)
      check: addr_0_block_292(v1483: bool, v1484: bool): // preds: addr_0_block_290 addr_0_block_291
      nextln:   v1485 = bool.or v1480, v1483
      nextln:   jumpif v1485, addr_0_block_293, addr_0_block_306
      check: addr_0_block_293: // preds: addr_0_block_292
      nextln:   v1486 = i52.unsigned_from_bits v1433
      nextln:   v1487 = int.modulo v1486, 0x8
      nextln:   v1488 = int.sub v1486, v1487
      nextln:   v1489 = i52.to_bits v1488
      nextln:   v1490 = bool.icmp.i52.eq v1433, v1489
      nextln:   v1491 = i64.load v1433
      nextln:   jumpif v1480, addr_0_block_294, addr_0_block_295
      nextln:   jump addr_0_block_307(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v1491, v1410, v1411, v1412, v1413, v1414, v1415, v1416, v1417, v1418, v1419, v1420, v1421, v1422, v1423, v1424, v1425, v1426, v1427, v1428, v1429, v1430, v1431, v1432, v1433, v1434, v1435, 0x0, 0x0)
      check: addr_0_block_294: // no preds!
      nextln:   jump addr_0_block_296
      check: addr_0_block_295: // no preds!
      nextln:   jump addr_0_block_296
      check: addr_0_block_296: // preds: addr_0_block_294 addr_0_block_295
      nextln:   jumpif v1483, addr_0_block_297, addr_0_block_298
      check: addr_0_block_297: // preds: addr_0_block_296
      nextln:   jump addr_0_block_299
      check: addr_0_block_298: // preds: addr_0_block_296
      nextln:   jump addr_0_block_299
      check: addr_0_block_299: // preds: addr_0_block_297 addr_0_block_298
      nextln:   v1547 = i52.unsigned_from_bits v1433
      nextln:   v1548 = int.modulo v1547, 0x8
      nextln:   v1549 = int.sub v1547, v1548
      nextln:   v1550 = i52.to_bits v1549
      nextln:   v1551 = bool.icmp.i52.eq v1433, v1550
      nextln:   v1552 = bool.icmp.i52.eq v1433, 0x13000000
      nextln:   jumpif v1552, addr_0_block_300, addr_0_block_304
      check: addr_0_block_300: // preds: addr_0_block_299
      nextln:   v1553 = i64.unsigned_from_bits v1491
      nextln:   v1554 = bool.icmp.int.eq v1553, 0x4
      nextln:   jumpif v1554, addr_0_block_301, addr_0_block_302
      nextln:   jump addr_0_block_305
      check: addr_0_block_301: // no preds!
      nextln:   jump addr_0_block_303
      check: addr_0_block_302: // no preds!
      nextln:   v1555 = i8.trunc.i64 v1491
      nextln:   v1556 = i8.unsigned_from_bits v1555
      nextln:   jump addr_0_block_303
      check: addr_0_block_303: // preds: addr_0_block_301 addr_0_block_302
      check: addr_0_block_304: // preds: addr_0_block_299
      nextln:   store.i64 v1491, v1433
      nextln:   jump addr_0_block_305
      check: addr_0_block_305: // preds: addr_0_block_300 addr_0_block_304
      check: addr_0_block_306: // preds: addr_0_block_292
      nextln:   jump addr_0_block_307(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_307(v1492: i8, v1493: i1, v1494: i16, v1495: i8, v1496: bool, v1497: bool, v1498: bool, v1499: int, v1500: i64, v1501: i8, v1502: i8, v1503: i52, v1504: i1, v1505: bool, v1506: bool, v1507: int, v1508: i1, v1509: bool, v1510: i4, v1511: i2, v1512: i4, v1513: i8, v1514: i8, v1515: i2, v1516: i2, v1517: bool, v1518: i2, v1519: i2, v1520: bool, v1521: bool, v1522: bool, v1523: bool, v1524: i52, v1525: i1, v1526: i64, v1527: i2, v1528: bool): // preds: addr_0_block_293 addr_0_block_306
      nextln:   v1529 = bool.icmp.i8.ne v1437, 0x0
      nextln:   v1530 = bool.bitwise_not v1529
      nextln:   v1531 = bool.and v1530, 0x1
      nextln:   v1532 = bool.icmp.i8.ne v1437, 0x0
      nextln:   v1533 = bool.bitwise_not v1532
      nextln:   v1534 = bool.and 0x1, v1533
      nextln:   jumpif v1534, addr_0_block_308, addr_0_block_309
      check: addr_0_block_308: // preds: addr_0_block_307
      nextln:   jump addr_0_block_310
      check: addr_0_block_309: // preds: addr_0_block_307
      nextln:   jump addr_0_block_310
      check: addr_0_block_310: // preds: addr_0_block_308 addr_0_block_309
      nextln:   v1535 = bool.icmp.i8.ne v1437, 0x0
      nextln:   jumpif v1535, addr_0_block_311, addr_0_block_312
      check: addr_0_block_311: // preds: addr_0_block_310
      nextln:   jump addr_0_block_313
      check: addr_0_block_312: // preds: addr_0_block_310
      nextln:   jump addr_0_block_313
      check: addr_0_block_313: // preds: addr_0_block_311 addr_0_block_312
      nextln:   v1536 = i52.unsigned_from_bits v1460
      nextln:   v1537 = int.modulo v1536, 0x8
      nextln:   v1538 = int.sub v1536, v1537
      nextln:   v1539 = i52.to_bits v1538
      nextln:   v1540 = bool.icmp.i52.eq v1460, v1539
      nextln:   v1541 = i64.load v1460
      check: addr_0_block_314(v19: i64, v20: i8, v21: i64): // preds: addr_0_block_3 addr_0_block_279
      nextln:   write_reg.i64 v21, "x1"
