tests:
- name: sbcs_1
  bytes: [0x41, 0x00, 0x03, 0x7a]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x2"
      nextln:   v1 = i32.trunc.i64 v0
      nextln:   v2 = i64.read_reg "x3"
      nextln:   v3 = i32.trunc.i64 v2
      nextln:   v4 = i32.bitwise_not v3
      nextln:   v5 = i1.read_reg "c"
      nextln:   v6 = i32.unsigned_from_bits v1
      nextln:   v7 = i32.unsigned_from_bits v4
      nextln:   v8 = int.add v6, v7
      nextln:   v9 = i1.unsigned_from_bits v5
      nextln:   v10 = int.add v8, v9
      nextln:   v11 = i32.signed_from_bits v1
      nextln:   v12 = i32.signed_from_bits v4
      nextln:   v13 = int.add v11, v12
      nextln:   v14 = i1.unsigned_from_bits v5
      nextln:   v15 = int.add v13, v14
      nextln:   v16 = i32.to_bits v10
      nextln:   v17 = i32.lshr v16, 0x1f
      nextln:   v18 = i1.trunc.i32 v17
      nextln:   v19 = bool.icmp.i32.eq v16, 0x0
      nextln:   jumpif v19, addr_0_block_0, addr_0_block_1
      check: addr_0_block_0: // preds: entry
      nextln:   jump addr_0_block_2(0x1)
      check: addr_0_block_1: // preds: entry
      nextln:   jump addr_0_block_2(0x0)
      check: addr_0_block_2(v20: i1): // preds: addr_0_block_0 addr_0_block_1
      nextln:   v21 = i32.unsigned_from_bits v16
      nextln:   v22 = bool.icmp.int.eq v21, v10
      nextln:   jumpif v22, addr_0_block_3, addr_0_block_4
      check: addr_0_block_3: // preds: addr_0_block_2
      nextln:   jump addr_0_block_5(0x0)
      check: addr_0_block_4: // preds: addr_0_block_2
      nextln:   jump addr_0_block_5(0x1)
      check: addr_0_block_5(v23: i1): // preds: addr_0_block_3 addr_0_block_4
      nextln:   v24 = i32.signed_from_bits v16
      nextln:   v25 = bool.icmp.int.eq v24, v15
      nextln:   jumpif v25, addr_0_block_6, addr_0_block_7
      check: addr_0_block_6: // preds: addr_0_block_5
      nextln:   jump addr_0_block_8(0x0)
      check: addr_0_block_7: // preds: addr_0_block_5
      nextln:   jump addr_0_block_8(0x1)
      check: addr_0_block_8(v26: i1): // preds: addr_0_block_6 addr_0_block_7
      nextln:   v27 = i2.zext.i1 v18
      nextln:   v28 = i2.lshl v27, 0x1
      nextln:   v29 = i2.zext.i1 v20
      nextln:   v30 = i2.or v28, v29
      nextln:   v31 = i3.zext.i2 v30
      nextln:   v32 = i3.lshl v31, 0x1
      nextln:   v33 = i3.zext.i1 v23
      nextln:   v34 = i3.or v32, v33
      nextln:   v35 = i4.zext.i3 v34
      nextln:   v36 = i4.lshl v35, 0x1
      nextln:   v37 = i4.zext.i1 v26
      nextln:   v38 = i4.or v36, v37
      nextln:   v39 = i1.trunc.i4 v38
      nextln:   write_reg.i1 v39, "v"
      nextln:   v40 = i4.lshr v38, 0x1
      nextln:   v41 = i1.trunc.i4 v40
      nextln:   write_reg.i1 v41, "c"
      nextln:   v42 = i4.lshr v38, 0x2
      nextln:   v43 = i1.trunc.i4 v42
      nextln:   write_reg.i1 v43, "z"
      nextln:   v44 = i4.lshr v38, 0x3
      nextln:   v45 = i1.trunc.i4 v44
      nextln:   write_reg.i1 v45, "n"
      nextln:   v46 = i64.zext.i32 0x0
      nextln:   v47 = i64.lshl v46, 0x20
      nextln:   v48 = i64.zext.i32 v16
      nextln:   v49 = i64.or v47, v48
      nextln:   write_reg.i64 v49, "x1"
- name: sbcs_2
  bytes: [0x41, 0x00, 0x03, 0xfa]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x2"
      nextln:   v1 = i64.read_reg "x3"
      nextln:   v2 = i64.bitwise_not v1
      nextln:   v3 = i1.read_reg "c"
      nextln:   v4 = i64.unsigned_from_bits v0
      nextln:   v5 = i64.unsigned_from_bits v2
      nextln:   v6 = int.add v4, v5
      nextln:   v7 = i1.unsigned_from_bits v3
      nextln:   v8 = int.add v6, v7
      nextln:   v9 = i64.signed_from_bits v0
      nextln:   v10 = i64.signed_from_bits v2
      nextln:   v11 = int.add v9, v10
      nextln:   v12 = i1.unsigned_from_bits v3
      nextln:   v13 = int.add v11, v12
      nextln:   v14 = i64.to_bits v8
      nextln:   v15 = i64.lshr v14, 0x3f
      nextln:   v16 = i1.trunc.i64 v15
      nextln:   v17 = bool.icmp.i64.eq v14, 0x0
      nextln:   jumpif v17, addr_0_block_0, addr_0_block_1
      check: addr_0_block_0: // preds: entry
      nextln:   jump addr_0_block_2(0x1)
      check: addr_0_block_1: // preds: entry
      nextln:   jump addr_0_block_2(0x0)
      check: addr_0_block_2(v18: i1): // preds: addr_0_block_0 addr_0_block_1
      nextln:   v19 = i64.unsigned_from_bits v14
      nextln:   v20 = bool.icmp.int.eq v19, v8
      nextln:   jumpif v20, addr_0_block_3, addr_0_block_4
      check: addr_0_block_3: // preds: addr_0_block_2
      nextln:   jump addr_0_block_5(0x0)
      check: addr_0_block_4: // preds: addr_0_block_2
      nextln:   jump addr_0_block_5(0x1)
      check: addr_0_block_5(v21: i1): // preds: addr_0_block_3 addr_0_block_4
      nextln:   v22 = i64.signed_from_bits v14
      nextln:   v23 = bool.icmp.int.eq v22, v13
      nextln:   jumpif v23, addr_0_block_6, addr_0_block_7
      check: addr_0_block_6: // preds: addr_0_block_5
      nextln:   jump addr_0_block_8(0x0)
      check: addr_0_block_7: // preds: addr_0_block_5
      nextln:   jump addr_0_block_8(0x1)
      check: addr_0_block_8(v24: i1): // preds: addr_0_block_6 addr_0_block_7
      nextln:   v25 = i2.zext.i1 v16
      nextln:   v26 = i2.lshl v25, 0x1
      nextln:   v27 = i2.zext.i1 v18
      nextln:   v28 = i2.or v26, v27
      nextln:   v29 = i3.zext.i2 v28
      nextln:   v30 = i3.lshl v29, 0x1
      nextln:   v31 = i3.zext.i1 v21
      nextln:   v32 = i3.or v30, v31
      nextln:   v33 = i4.zext.i3 v32
      nextln:   v34 = i4.lshl v33, 0x1
      nextln:   v35 = i4.zext.i1 v24
      nextln:   v36 = i4.or v34, v35
      nextln:   v37 = i1.trunc.i4 v36
      nextln:   write_reg.i1 v37, "v"
      nextln:   v38 = i4.lshr v36, 0x1
      nextln:   v39 = i1.trunc.i4 v38
      nextln:   write_reg.i1 v39, "c"
      nextln:   v40 = i4.lshr v36, 0x2
      nextln:   v41 = i1.trunc.i4 v40
      nextln:   write_reg.i1 v41, "z"
      nextln:   v42 = i4.lshr v36, 0x3
      nextln:   v43 = i1.trunc.i4 v42
      nextln:   write_reg.i1 v43, "n"
      nextln:   write_reg.i64 v14, "x1"
