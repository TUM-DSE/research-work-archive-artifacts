tests:
- name: bfm_1
  bytes: [0x41, 0x78, 0x0c, 0x33]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x1"
      nextln:   v1 = i32.trunc.i64 v0
      nextln:   v2 = i64.read_reg "x2"
      nextln:   v3 = i32.trunc.i64 v2
      nextln:   v4 = i32.and v1, 0x80000
      nextln:   v5 = i32.lshr v3, 0xc
      nextln:   v6 = int.sub 0xc, 0x1
      nextln:   v7 = i32.lshr v3, v6
      nextln:   v8 = i1.trunc.i32 v7
      nextln:   v9 = i32.lshl v3, 0x14
      nextln:   v10 = int.sub 0x20, 0x14
      nextln:   v11 = i32.lshr v3, v10
      nextln:   v12 = i1.trunc.i32 v11
      nextln:   v13 = i32.or v5, v9
      nextln:   v14 = i32.lshr v13, 0x1f
      nextln:   v15 = i1.trunc.i32 v14
      nextln:   v16 = i32.and v13, 0xfff7ffff
      nextln:   v17 = i32.or v4, v16
      nextln:   v18 = i32.and v1, 0xfff80000
      nextln:   v19 = i32.and v17, 0x7ffff
      nextln:   v20 = i32.or v18, v19
      nextln:   v21 = i64.zext.i32 0x0
      nextln:   v22 = i64.lshl v21, 0x20
      nextln:   v23 = i64.zext.i32 v20
      nextln:   v24 = i64.or v22, v23
      nextln:   write_reg.i64 v24, "x1"
- name: bfm_2
  bytes: [0x41, 0x04, 0x41, 0xb3]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x1"
      nextln:   v1 = i64.read_reg "x2"
      nextln:   v2 = i64.and v0, 0x7ffffffffffffffe
      nextln:   v3 = i64.lshr v1, 0x1
      nextln:   v4 = int.sub 0x1, 0x1
      nextln:   v5 = i64.lshr v1, v4
      nextln:   v6 = i1.trunc.i64 v5
      nextln:   v7 = i64.lshl v1, 0x3f
      nextln:   v8 = int.sub 0x40, 0x3f
      nextln:   v9 = i64.lshr v1, v8
      nextln:   v10 = i1.trunc.i64 v9
      nextln:   v11 = i64.or v3, v7
      nextln:   v12 = i64.lshr v11, 0x3f
      nextln:   v13 = i1.trunc.i64 v12
      nextln:   v14 = i64.and v11, 0x8000000000000001
      nextln:   v15 = i64.or v2, v14
      nextln:   v16 = i64.and v0, 0xfffffffffffffffe
      nextln:   v17 = i64.and v15, 0x1
      nextln:   v18 = i64.or v16, v17
      nextln:   write_reg.i64 v18, "x1"
- name: bfm_3
  bytes: [0x41, 0xc8, 0x42, 0xb3]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x1"
      nextln:   v1 = i64.read_reg "x2"
      nextln:   v2 = i64.and v0, 0x3ffe000000000000
      nextln:   v3 = i64.lshr v1, 0x2
      nextln:   v4 = int.sub 0x2, 0x1
      nextln:   v5 = i64.lshr v1, v4
      nextln:   v6 = i1.trunc.i64 v5
      nextln:   v7 = i64.lshl v1, 0x3e
      nextln:   v8 = int.sub 0x40, 0x3e
      nextln:   v9 = i64.lshr v1, v8
      nextln:   v10 = i1.trunc.i64 v9
      nextln:   v11 = i64.or v3, v7
      nextln:   v12 = i64.lshr v11, 0x3f
      nextln:   v13 = i1.trunc.i64 v12
      nextln:   v14 = i64.and v11, 0xc001ffffffffffff
      nextln:   v15 = i64.or v2, v14
      nextln:   v16 = i64.and v0, 0xfffe000000000000
      nextln:   v17 = i64.and v15, 0x1ffffffffffff
      nextln:   v18 = i64.or v16, v17
      nextln:   write_reg.i64 v18, "x1"
