tests:
- name: lsrv_1
  bytes: [0x20, 0x24, 0xc2, 0x1a]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x2"
      nextln:   v1 = i32.trunc.i64 v0
      nextln:   v2 = i32.unsigned_from_bits v1
      nextln:   v3 = int.modulo v2, 0x20
      nextln:   v4 = i64.read_reg "x1"
      nextln:   v5 = i32.trunc.i64 v4
      nextln:   v6 = bool.icmp.int.ge v3, 0x0
      nextln:   v7 = bool.icmp.int.eq v3, 0x0
      nextln:   jumpif v7, addr_0_block_0, addr_0_block_1
      check: addr_0_block_0: // preds: entry
      nextln:   jump addr_0_block_2(v5)
      check: addr_0_block_1: // preds: entry
      nextln:   v13 = i32.lshr v5, v3
      nextln:   v14 = int.sub v3, 0x1
      nextln:   v15 = i32.lshr v5, v14
      nextln:   v16 = i1.trunc.i32 v15
      nextln:   jump addr_0_block_2(v13)
      check: addr_0_block_2(v8: i32): // preds: addr_0_block_0 addr_0_block_1
      nextln:   v9 = i64.zext.i32 0x0
      nextln:   v10 = i64.lshl v9, 0x20
      nextln:   v11 = i64.zext.i32 v8
      nextln:   v12 = i64.or v10, v11
      nextln:   write_reg.i64 v12, "x0"
- name: lsrv_2
  bytes: [0x20, 0x24, 0xc2, 0x9a]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x2"
      nextln:   v1 = i64.unsigned_from_bits v0
      nextln:   v2 = int.modulo v1, 0x40
      nextln:   v3 = i64.read_reg "x1"
      nextln:   v4 = bool.icmp.int.ge v2, 0x0
      nextln:   v5 = bool.icmp.int.eq v2, 0x0
      nextln:   jumpif v5, addr_0_block_0, addr_0_block_1
      check: addr_0_block_0: // preds: entry
      nextln:   jump addr_0_block_2(v3)
      check: addr_0_block_1: // preds: entry
      nextln:   v7 = i64.lshr v3, v2
      nextln:   v8 = int.sub v2, 0x1
      nextln:   v9 = i64.lshr v3, v8
      nextln:   v10 = i1.trunc.i64 v9
      nextln:   jump addr_0_block_2(v7)
      check: addr_0_block_2(v6: i64): // preds: addr_0_block_0 addr_0_block_1
      nextln:   write_reg.i64 v6, "x0"
