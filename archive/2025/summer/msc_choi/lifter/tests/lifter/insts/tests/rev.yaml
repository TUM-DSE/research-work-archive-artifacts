tests:
- name: rev_1
  bytes: [0x41, 0x0c, 0xc0, 0xda]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x2"
      nextln:   v1 = i8.trunc.i64 v0
      nextln:   v2 = i8.lshl v1, 0x38
      nextln:   v3 = i64.or 0x0, v2
      nextln:   v4 = i64.lshr v0, 0x8
      nextln:   v5 = i8.trunc.i64 v4
      nextln:   v6 = i64.and v3, 0xff00ffffffffffff
      nextln:   v7 = i8.lshl v5, 0x30
      nextln:   v8 = i64.or v6, v7
      nextln:   v9 = i64.lshr v0, 0x10
      nextln:   v10 = i8.trunc.i64 v9
      nextln:   v11 = i64.and v8, 0xffff00ffffffffff
      nextln:   v12 = i8.lshl v10, 0x28
      nextln:   v13 = i64.or v11, v12
      nextln:   v14 = i64.lshr v0, 0x18
      nextln:   v15 = i8.trunc.i64 v14
      nextln:   v16 = i64.and v13, 0xffffff00ffffffff
      nextln:   v17 = i8.lshl v15, 0x20
      nextln:   v18 = i64.or v16, v17
      nextln:   v19 = i64.lshr v0, 0x20
      nextln:   v20 = i8.trunc.i64 v19
      nextln:   v21 = i64.and v18, 0xffffffff00ffffff
      nextln:   v22 = i8.lshl v20, 0x18
      nextln:   v23 = i64.or v21, v22
      nextln:   v24 = i64.lshr v0, 0x28
      nextln:   v25 = i8.trunc.i64 v24
      nextln:   v26 = i64.and v23, 0xffffffffff00ffff
      nextln:   v27 = i8.lshl v25, 0x10
      nextln:   v28 = i64.or v26, v27
      nextln:   v29 = i64.lshr v0, 0x30
      nextln:   v30 = i8.trunc.i64 v29
      nextln:   v31 = i64.and v28, 0xffffffffffff00ff
      nextln:   v32 = i8.lshl v30, 0x8
      nextln:   v33 = i64.or v31, v32
      nextln:   v34 = i64.lshr v0, 0x38
      nextln:   v35 = i8.trunc.i64 v34
      nextln:   v36 = i64.and v33, 0xffffffffffffff00
      nextln:   v37 = i8.lshl v35, 0x0
      nextln:   v38 = i64.or v36, v37
      nextln:   write_reg.i64 v38, "x1"
- name: rev_2
  bytes: [0x41, 0x08, 0xc0, 0x5a]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x2"
      nextln:   v1 = i32.trunc.i64 v0
      nextln:   v2 = i8.trunc.i32 v1
      nextln:   v3 = i8.lshl v2, 0x18
      nextln:   v4 = i32.or 0x0, v3
      nextln:   v5 = i32.lshr v1, 0x8
      nextln:   v6 = i8.trunc.i32 v5
      nextln:   v7 = i32.and v4, 0xff00ffff
      nextln:   v8 = i8.lshl v6, 0x10
      nextln:   v9 = i32.or v7, v8
      nextln:   v10 = i32.lshr v1, 0x10
      nextln:   v11 = i8.trunc.i32 v10
      nextln:   v12 = i32.and v9, 0xffff00ff
      nextln:   v13 = i8.lshl v11, 0x8
      nextln:   v14 = i32.or v12, v13
      nextln:   v15 = i32.lshr v1, 0x18
      nextln:   v16 = i8.trunc.i32 v15
      nextln:   v17 = i32.and v14, 0xffffff00
      nextln:   v18 = i8.lshl v16, 0x0
      nextln:   v19 = i32.or v17, v18
      nextln:   v20 = i64.zext.i32 0x0
      nextln:   v21 = i64.lshl v20, 0x20
      nextln:   v22 = i64.zext.i32 v19
      nextln:   v23 = i64.or v21, v22
      nextln:   write_reg.i64 v23, "x1"
