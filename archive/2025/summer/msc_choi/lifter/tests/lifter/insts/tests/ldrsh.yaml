tests:
- name: ldrsh_1
  bytes: [0x21, 0xc4, 0xc0, 0x78]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x1"
      nextln:   v1 = i64.unsigned_from_bits v0
      nextln:   v2 = int.modulo v1, 0x2
      nextln:   v3 = int.sub v1, v2
      nextln:   v4 = i64.to_bits v3
      nextln:   v5 = bool.icmp.i64.eq v0, v4
      nextln:   v6 = bool.bitwise_not v5
      nextln:   v7 = bool.bitwise_not v5
      nextln:   jumpif v7, addr_0_block_0, addr_0_block_72
      check: addr_0_block_0: // preds: entry
      nextln:   v8 = i64.unsigned_from_bits v0
      nextln:   v9 = int.modulo v8, 0x1
      nextln:   v10 = int.sub v8, v9
      nextln:   v11 = i64.to_bits v10
      nextln:   v12 = bool.icmp.i64.eq v0, v11
      nextln:   v13 = i64.lshr v0, 0x30
      nextln:   v14 = i16.trunc.i64 v13
      nextln:   v15 = bool.icmp.i16.eq v14, 0x0
      nextln:   v16 = bool.bitwise_not v15
      nextln:   jumpif v16, addr_0_block_1, addr_0_block_2
      nextln:   jump addr_0_block_107(v250, v251, v407)
      check: addr_0_block_1: // no preds!
      nextln:   jump addr_0_block_3(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_4(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_2: // no preds!
      nextln:   jump addr_0_block_3(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_3(v413: i52, v414: int, v415: bool, v416: bool): // preds: addr_0_block_2
      nextln:   v417 = i52.trunc.i64 v0
      nextln:   jump addr_0_block_4(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v417, 0x1, 0x0)
      check: addr_0_block_4(v103: i3, v104: i1, v105: i1, v106: i1, v107: i1, v108: i4, v109: i1, v110: bool, v111: int, v112: int, v113: bool, v114: bool, v115: i8, v116: i8, v117: i52, v118: i1, v119: bool, v120: bool, v121: int, v122: i1, v123: bool, v124: i4, v125: i2, v126: i4, v127: i8, v128: i8, v129: i2, v130: i2, v131: bool, v132: i2, v133: i2, v134: bool, v135: bool, v136: bool, v137: bool, v138: i52, v139: i1, v140: i64, v141: i1, v142: i8, v143: i8, v144: i52, v145: i1, v146: bool, v147: bool, v148: int, v149: i1, v150: bool, v151: i4, v152: i2, v153: i4, v154: i8, v155: i8, v156: i2, v157: i2, v158: bool, v159: i2, v160: i2, v161: bool, v162: bool, v163: bool, v164: bool, v165: i52, v166: i1, v167: i64): // preds: addr_0_block_1 addr_0_block_3
      nextln:   v168 = bool.icmp.i8.ne v142, 0x0
      nextln:   v169 = bool.bitwise_not v168
      nextln:   v170 = bool.bitwise_not v5
      nextln:   v171 = bool.and v170, 0x1
      nextln:   v172 = bool.or v171, 0x0
      nextln:   v173 = bool.icmp.i8.ne v142, 0x0
      nextln:   v174 = bool.bitwise_not v173
      nextln:   v175 = bool.and v172, v174
      nextln:   v176 = bool.icmp.i8.eq v154, 0x1
      nextln:   v177 = bool.and v175, v176
      nextln:   jumpif v177, addr_0_block_5, addr_0_block_6
      check: addr_0_block_5: // preds: addr_0_block_4
      nextln:   jump addr_0_block_7
      check: addr_0_block_6: // preds: addr_0_block_4
      nextln:   jump addr_0_block_7
      check: addr_0_block_7: // preds: addr_0_block_5 addr_0_block_6
      nextln:   v178 = bool.icmp.i8.ne v142, 0x0
      nextln:   v179 = bool.bitwise_not v178
      nextln:   v180 = bool.icmp.i8.ne v142, 0x0
      nextln:   v181 = bool.bitwise_not v180
      nextln:   v182 = bool.icmp.i8.eq v154, 0x1
      nextln:   v183 = bool.and v181, v182
      nextln:   jumpif v113, addr_0_block_8, addr_0_block_9
      check: addr_0_block_8: // preds: addr_0_block_7
      nextln:   v184 = bool.icmp.i8.eq v142, 0x0
      nextln:   jump addr_0_block_10(0x1)
      check: addr_0_block_9: // preds: addr_0_block_7
      nextln:   jump addr_0_block_10(0x0)
      check: addr_0_block_10(v185: bool): // preds: addr_0_block_8 addr_0_block_9
      nextln:   v186 = bool.icmp.i8.eq v142, 0x0
      nextln:   v187 = bool.and v114, v186
      nextln:   jumpif v187, addr_0_block_11, addr_0_block_12
      check: addr_0_block_11: // preds: addr_0_block_10
      nextln:   jump addr_0_block_13(0x0, 0x0)
      check: addr_0_block_12: // preds: addr_0_block_10
      nextln:   jump addr_0_block_13(0x0, 0x0)
      check: addr_0_block_13(v188: bool, v189: bool): // preds: addr_0_block_11 addr_0_block_12
      nextln:   v190 = bool.or v185, v188
      nextln:   jumpif v190, addr_0_block_14, addr_0_block_27
      check: addr_0_block_14: // preds: addr_0_block_13
      nextln:   v191 = i52.unsigned_from_bits v138
      nextln:   v192 = int.modulo v191, 0x8
      nextln:   v193 = int.sub v191, v192
      nextln:   v194 = i52.to_bits v193
      nextln:   v195 = bool.icmp.i52.eq v138, v194
      nextln:   v196 = i64.load v138
      nextln:   jumpif v185, addr_0_block_15, addr_0_block_16
      nextln:   jump addr_0_block_28(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v196, v115, v116, v117, v118, v119, v120, v121, v122, v123, v124, v125, v126, v127, v128, v129, v130, v131, v132, v133, v134, v135, v136, v137, v138, v139, v140, 0x0, 0x0)
      check: addr_0_block_15: // no preds!
      nextln:   jump addr_0_block_17
      check: addr_0_block_16: // no preds!
      nextln:   jump addr_0_block_17
      check: addr_0_block_17: // preds: addr_0_block_15 addr_0_block_16
      nextln:   jumpif v188, addr_0_block_18, addr_0_block_19
      check: addr_0_block_18: // preds: addr_0_block_17
      nextln:   jump addr_0_block_20
      check: addr_0_block_19: // preds: addr_0_block_17
      nextln:   jump addr_0_block_20
      check: addr_0_block_20: // preds: addr_0_block_18 addr_0_block_19
      nextln:   v418 = i52.unsigned_from_bits v138
      nextln:   v419 = int.modulo v418, 0x8
      nextln:   v420 = int.sub v418, v419
      nextln:   v421 = i52.to_bits v420
      nextln:   v422 = bool.icmp.i52.eq v138, v421
      nextln:   v423 = bool.icmp.i52.eq v138, 0x13000000
      nextln:   jumpif v423, addr_0_block_21, addr_0_block_25
      check: addr_0_block_21: // preds: addr_0_block_20
      nextln:   v424 = i64.unsigned_from_bits v196
      nextln:   v425 = bool.icmp.int.eq v424, 0x4
      nextln:   jumpif v425, addr_0_block_22, addr_0_block_23
      nextln:   jump addr_0_block_26
      check: addr_0_block_22: // no preds!
      nextln:   jump addr_0_block_24
      check: addr_0_block_23: // no preds!
      nextln:   v426 = i8.trunc.i64 v196
      nextln:   v427 = i8.unsigned_from_bits v426
      nextln:   jump addr_0_block_24
      check: addr_0_block_24: // preds: addr_0_block_22 addr_0_block_23
      check: addr_0_block_25: // preds: addr_0_block_20
      nextln:   store.i64 v196, v138
      nextln:   jump addr_0_block_26
      check: addr_0_block_26: // preds: addr_0_block_21 addr_0_block_25
      check: addr_0_block_27: // preds: addr_0_block_13
      nextln:   jump addr_0_block_28(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_28(v197: i8, v198: i1, v199: i16, v200: i8, v201: bool, v202: bool, v203: bool, v204: int, v205: i64, v206: i8, v207: i8, v208: i52, v209: i1, v210: bool, v211: bool, v212: int, v213: i1, v214: bool, v215: i4, v216: i2, v217: i4, v218: i8, v219: i8, v220: i2, v221: i2, v222: bool, v223: i2, v224: i2, v225: bool, v226: bool, v227: bool, v228: bool, v229: i52, v230: i1, v231: i64, v232: i2, v233: bool): // preds: addr_0_block_14 addr_0_block_27
      nextln:   v234 = bool.icmp.i8.ne v142, 0x0
      nextln:   v235 = bool.bitwise_not v234
      nextln:   v236 = bool.and v235, 0x1
      nextln:   v237 = bool.icmp.i8.ne v142, 0x0
      nextln:   v238 = bool.bitwise_not v237
      nextln:   v239 = bool.and 0x1, v238
      nextln:   jumpif v239, addr_0_block_29, addr_0_block_30
      check: addr_0_block_29: // preds: addr_0_block_28
      nextln:   jump addr_0_block_31
      check: addr_0_block_30: // preds: addr_0_block_28
      nextln:   jump addr_0_block_31
      check: addr_0_block_31: // preds: addr_0_block_29 addr_0_block_30
      nextln:   v240 = bool.icmp.i8.ne v142, 0x0
      nextln:   jumpif v240, addr_0_block_32, addr_0_block_33
      check: addr_0_block_32: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_33: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_34: // preds: addr_0_block_32 addr_0_block_33
      nextln:   v241 = i52.unsigned_from_bits v165
      nextln:   v242 = int.modulo v241, 0x1
      nextln:   v243 = int.sub v241, v242
      nextln:   v244 = i52.to_bits v243
      nextln:   v245 = bool.icmp.i52.eq v165, v244
      nextln:   v246 = i8.load v165
      nextln:   v247 = i8.lshl v246, 0x0
      nextln:   v248 = i16.or 0x0, v247
      nextln:   v249 = bool.bitwise_not v5
      nextln:   jumpif v249, addr_0_block_35, addr_0_block_36
      check: addr_0_block_35: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37(v5, 0xc)
      check: addr_0_block_36: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37(v5, 0x0)
      check: addr_0_block_37(v250: i64, v251: i8): // preds: addr_0_block_35 addr_0_block_36
      nextln:   v252 = i64.wrapping_add v0, 0x1
      nextln:   v253 = i64.unsigned_from_bits v252
      nextln:   v254 = int.modulo v253, 0x1
      nextln:   v255 = int.sub v253, v254
      nextln:   v256 = i64.to_bits v255
      nextln:   v257 = bool.icmp.i64.eq v252, v256
      nextln:   v258 = i64.lshr v252, 0x30
      nextln:   v259 = i16.trunc.i64 v258
      nextln:   v260 = bool.icmp.i16.eq v259, 0x0
      nextln:   v261 = bool.bitwise_not v260
      nextln:   jumpif v261, addr_0_block_38, addr_0_block_39
      check: addr_0_block_38: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_41(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_39: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_40(v408: i52, v409: int, v410: bool, v411: bool): // preds: addr_0_block_39
      nextln:   v412 = i52.trunc.i64 v252
      nextln:   jump addr_0_block_41(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v412, 0x1, 0x0)
      check: addr_0_block_41(v262: i3, v263: i1, v264: i1, v265: i1, v266: i1, v267: i4, v268: i1, v269: bool, v270: int, v271: int, v272: bool, v273: bool, v274: i8, v275: i8, v276: i52, v277: i1, v278: bool, v279: bool, v280: int, v281: i1, v282: bool, v283: i4, v284: i2, v285: i4, v286: i8, v287: i8, v288: i2, v289: i2, v290: bool, v291: i2, v292: i2, v293: bool, v294: bool, v295: bool, v296: bool, v297: i52, v298: i1, v299: i64, v300: i1, v301: i8, v302: i8, v303: i52, v304: i1, v305: bool, v306: bool, v307: int, v308: i1, v309: bool, v310: i4, v311: i2, v312: i4, v313: i8, v314: i8, v315: i2, v316: i2, v317: bool, v318: i2, v319: i2, v320: bool, v321: bool, v322: bool, v323: bool, v324: i52, v325: i1, v326: i64): // preds: addr_0_block_38 addr_0_block_40
      nextln:   v327 = bool.icmp.i8.ne v301, 0x0
      nextln:   v328 = bool.bitwise_not v327
      nextln:   v329 = bool.bitwise_not v5
      nextln:   v330 = bool.and v329, 0x1
      nextln:   v331 = bool.or v330, 0x0
      nextln:   v332 = bool.icmp.i8.ne v301, 0x0
      nextln:   v333 = bool.bitwise_not v332
      nextln:   v334 = bool.and v331, v333
      nextln:   v335 = bool.icmp.i8.eq v313, 0x1
      nextln:   v336 = bool.and v334, v335
      nextln:   jumpif v336, addr_0_block_42, addr_0_block_43
      check: addr_0_block_42: // preds: addr_0_block_41
      nextln:   jump addr_0_block_44
      check: addr_0_block_43: // preds: addr_0_block_41
      nextln:   jump addr_0_block_44
      check: addr_0_block_44: // preds: addr_0_block_42 addr_0_block_43
      nextln:   v337 = bool.icmp.i8.ne v301, 0x0
      nextln:   v338 = bool.bitwise_not v337
      nextln:   v339 = bool.icmp.i8.ne v301, 0x0
      nextln:   v340 = bool.bitwise_not v339
      nextln:   v341 = bool.icmp.i8.eq v313, 0x1
      nextln:   v342 = bool.and v340, v341
      nextln:   jumpif v272, addr_0_block_45, addr_0_block_46
      check: addr_0_block_45: // preds: addr_0_block_44
      nextln:   v343 = bool.icmp.i8.eq v301, 0x0
      nextln:   jump addr_0_block_47(0x1)
      check: addr_0_block_46: // preds: addr_0_block_44
      nextln:   jump addr_0_block_47(0x0)
      check: addr_0_block_47(v344: bool): // preds: addr_0_block_45 addr_0_block_46
      nextln:   v345 = bool.icmp.i8.eq v301, 0x0
      nextln:   v346 = bool.and v273, v345
      nextln:   jumpif v346, addr_0_block_48, addr_0_block_49
      check: addr_0_block_48: // preds: addr_0_block_47
      nextln:   jump addr_0_block_50(0x0, 0x0)
      check: addr_0_block_49: // preds: addr_0_block_47
      nextln:   jump addr_0_block_50(0x0, 0x0)
      check: addr_0_block_50(v347: bool, v348: bool): // preds: addr_0_block_48 addr_0_block_49
      nextln:   v349 = bool.or v344, v347
      nextln:   jumpif v349, addr_0_block_51, addr_0_block_64
      check: addr_0_block_51: // preds: addr_0_block_50
      nextln:   v350 = i52.unsigned_from_bits v297
      nextln:   v351 = int.modulo v350, 0x8
      nextln:   v352 = int.sub v350, v351
      nextln:   v353 = i52.to_bits v352
      nextln:   v354 = bool.icmp.i52.eq v297, v353
      nextln:   v355 = i64.load v297
      nextln:   jumpif v344, addr_0_block_52, addr_0_block_53
      nextln:   jump addr_0_block_65(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v355, v274, v275, v276, v277, v278, v279, v280, v281, v282, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, v298, v299, 0x0, 0x0)
      check: addr_0_block_52: // no preds!
      nextln:   jump addr_0_block_54
      check: addr_0_block_53: // no preds!
      nextln:   jump addr_0_block_54
      check: addr_0_block_54: // preds: addr_0_block_52 addr_0_block_53
      nextln:   jumpif v347, addr_0_block_55, addr_0_block_56
      check: addr_0_block_55: // preds: addr_0_block_54
      nextln:   jump addr_0_block_57
      check: addr_0_block_56: // preds: addr_0_block_54
      nextln:   jump addr_0_block_57
      check: addr_0_block_57: // preds: addr_0_block_55 addr_0_block_56
      nextln:   v428 = i52.unsigned_from_bits v297
      nextln:   v429 = int.modulo v428, 0x8
      nextln:   v430 = int.sub v428, v429
      nextln:   v431 = i52.to_bits v430
      nextln:   v432 = bool.icmp.i52.eq v297, v431
      nextln:   v433 = bool.icmp.i52.eq v297, 0x13000000
      nextln:   jumpif v433, addr_0_block_58, addr_0_block_62
      check: addr_0_block_58: // preds: addr_0_block_57
      nextln:   v434 = i64.unsigned_from_bits v355
      nextln:   v435 = bool.icmp.int.eq v434, 0x4
      nextln:   jumpif v435, addr_0_block_59, addr_0_block_60
      nextln:   jump addr_0_block_63
      check: addr_0_block_59: // no preds!
      nextln:   jump addr_0_block_61
      check: addr_0_block_60: // no preds!
      nextln:   v436 = i8.trunc.i64 v355
      nextln:   v437 = i8.unsigned_from_bits v436
      nextln:   jump addr_0_block_61
      check: addr_0_block_61: // preds: addr_0_block_59 addr_0_block_60
      check: addr_0_block_62: // preds: addr_0_block_57
      nextln:   store.i64 v355, v297
      nextln:   jump addr_0_block_63
      check: addr_0_block_63: // preds: addr_0_block_58 addr_0_block_62
      check: addr_0_block_64: // preds: addr_0_block_50
      nextln:   jump addr_0_block_65(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_65(v356: i8, v357: i1, v358: i16, v359: i8, v360: bool, v361: bool, v362: bool, v363: int, v364: i64, v365: i8, v366: i8, v367: i52, v368: i1, v369: bool, v370: bool, v371: int, v372: i1, v373: bool, v374: i4, v375: i2, v376: i4, v377: i8, v378: i8, v379: i2, v380: i2, v381: bool, v382: i2, v383: i2, v384: bool, v385: bool, v386: bool, v387: bool, v388: i52, v389: i1, v390: i64, v391: i2, v392: bool): // preds: addr_0_block_51 addr_0_block_64
      nextln:   v393 = bool.icmp.i8.ne v301, 0x0
      nextln:   v394 = bool.bitwise_not v393
      nextln:   v395 = bool.and v394, 0x1
      nextln:   v396 = bool.icmp.i8.ne v301, 0x0
      nextln:   v397 = bool.bitwise_not v396
      nextln:   v398 = bool.and 0x1, v397
      nextln:   jumpif v398, addr_0_block_66, addr_0_block_67
      check: addr_0_block_66: // preds: addr_0_block_65
      nextln:   jump addr_0_block_68
      check: addr_0_block_67: // preds: addr_0_block_65
      nextln:   jump addr_0_block_68
      check: addr_0_block_68: // preds: addr_0_block_66 addr_0_block_67
      nextln:   v399 = bool.icmp.i8.ne v301, 0x0
      nextln:   jumpif v399, addr_0_block_69, addr_0_block_70
      check: addr_0_block_69: // preds: addr_0_block_68
      nextln:   jump addr_0_block_71
      check: addr_0_block_70: // preds: addr_0_block_68
      nextln:   jump addr_0_block_71
      check: addr_0_block_71: // preds: addr_0_block_69 addr_0_block_70
      nextln:   v400 = i52.unsigned_from_bits v324
      nextln:   v401 = int.modulo v400, 0x1
      nextln:   v402 = int.sub v400, v401
      nextln:   v403 = i52.to_bits v402
      nextln:   v404 = bool.icmp.i52.eq v324, v403
      nextln:   v405 = i8.load v324
      nextln:   v406 = i8.lshl v405, 0x8
      nextln:   v407 = i16.or 0x0, v406
      check: addr_0_block_72: // preds: entry
      nextln:   v94 = i64.unsigned_from_bits v0
      nextln:   v95 = int.modulo v94, 0x2
      nextln:   v96 = int.sub v94, v95
      nextln:   v97 = i64.to_bits v96
      nextln:   v98 = bool.icmp.i64.eq v0, v97
      nextln:   v99 = i64.lshr v0, 0x30
      nextln:   v100 = i16.trunc.i64 v99
      nextln:   v101 = bool.icmp.i16.eq v100, 0x0
      nextln:   v102 = bool.bitwise_not v101
      nextln:   jumpif v102, addr_0_block_73, addr_0_block_74
      nextln:   jump addr_0_block_107(v5, 0x0, v581)
      check: addr_0_block_73: // no preds!
      nextln:   jump addr_0_block_75(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_76(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_74: // no preds!
      nextln:   jump addr_0_block_75(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_75(v582: i52, v583: int, v584: bool, v585: bool): // preds: addr_0_block_74
      nextln:   v586 = i52.trunc.i64 v0
      nextln:   jump addr_0_block_76(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v586, 0x1, 0x0)
      check: addr_0_block_76(v438: i3, v439: i1, v440: i1, v441: i1, v442: i1, v443: i4, v444: i1, v445: bool, v446: int, v447: int, v448: bool, v449: bool, v450: i8, v451: i8, v452: i52, v453: i1, v454: bool, v455: bool, v456: int, v457: i1, v458: bool, v459: i4, v460: i2, v461: i4, v462: i8, v463: i8, v464: i2, v465: i2, v466: bool, v467: i2, v468: i2, v469: bool, v470: bool, v471: bool, v472: bool, v473: i52, v474: i1, v475: i64, v476: i1, v477: i8, v478: i8, v479: i52, v480: i1, v481: bool, v482: bool, v483: int, v484: i1, v485: bool, v486: i4, v487: i2, v488: i4, v489: i8, v490: i8, v491: i2, v492: i2, v493: bool, v494: i2, v495: i2, v496: bool, v497: bool, v498: bool, v499: bool, v500: i52, v501: i1, v502: i64): // preds: addr_0_block_73 addr_0_block_75
      nextln:   v503 = bool.icmp.i8.ne v477, 0x0
      nextln:   v504 = bool.bitwise_not v503
      nextln:   v505 = bool.bitwise_not v5
      nextln:   v506 = bool.and v505, 0x1
      nextln:   v507 = bool.or v506, 0x0
      nextln:   v508 = bool.icmp.i8.ne v477, 0x0
      nextln:   v509 = bool.bitwise_not v508
      nextln:   v510 = bool.and v507, v509
      nextln:   v511 = bool.icmp.i8.eq v489, 0x1
      nextln:   v512 = bool.and v510, v511
      nextln:   jumpif v512, addr_0_block_77, addr_0_block_78
      check: addr_0_block_77: // preds: addr_0_block_76
      nextln:   jump addr_0_block_79
      check: addr_0_block_78: // preds: addr_0_block_76
      nextln:   jump addr_0_block_79
      check: addr_0_block_79: // preds: addr_0_block_77 addr_0_block_78
      nextln:   v513 = bool.icmp.i8.ne v477, 0x0
      nextln:   v514 = bool.bitwise_not v513
      nextln:   v515 = bool.icmp.i8.ne v477, 0x0
      nextln:   v516 = bool.bitwise_not v515
      nextln:   v517 = bool.icmp.i8.eq v489, 0x1
      nextln:   v518 = bool.and v516, v517
      nextln:   jumpif v448, addr_0_block_80, addr_0_block_81
      check: addr_0_block_80: // preds: addr_0_block_79
      nextln:   v519 = bool.icmp.i8.eq v477, 0x0
      nextln:   jump addr_0_block_82(0x1)
      check: addr_0_block_81: // preds: addr_0_block_79
      nextln:   jump addr_0_block_82(0x0)
      check: addr_0_block_82(v520: bool): // preds: addr_0_block_80 addr_0_block_81
      nextln:   v521 = bool.icmp.i8.eq v477, 0x0
      nextln:   v522 = bool.and v449, v521
      nextln:   jumpif v522, addr_0_block_83, addr_0_block_84
      check: addr_0_block_83: // preds: addr_0_block_82
      nextln:   jump addr_0_block_85(0x0, 0x0)
      check: addr_0_block_84: // preds: addr_0_block_82
      nextln:   jump addr_0_block_85(0x0, 0x0)
      check: addr_0_block_85(v523: bool, v524: bool): // preds: addr_0_block_83 addr_0_block_84
      nextln:   v525 = bool.or v520, v523
      nextln:   jumpif v525, addr_0_block_86, addr_0_block_99
      check: addr_0_block_86: // preds: addr_0_block_85
      nextln:   v526 = i52.unsigned_from_bits v473
      nextln:   v527 = int.modulo v526, 0x8
      nextln:   v528 = int.sub v526, v527
      nextln:   v529 = i52.to_bits v528
      nextln:   v530 = bool.icmp.i52.eq v473, v529
      nextln:   v531 = i64.load v473
      nextln:   jumpif v520, addr_0_block_87, addr_0_block_88
      nextln:   jump addr_0_block_100(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v531, v450, v451, v452, v453, v454, v455, v456, v457, v458, v459, v460, v461, v462, v463, v464, v465, v466, v467, v468, v469, v470, v471, v472, v473, v474, v475, 0x0, 0x0)
      check: addr_0_block_87: // no preds!
      nextln:   jump addr_0_block_89
      check: addr_0_block_88: // no preds!
      nextln:   jump addr_0_block_89
      check: addr_0_block_89: // preds: addr_0_block_87 addr_0_block_88
      nextln:   jumpif v523, addr_0_block_90, addr_0_block_91
      check: addr_0_block_90: // preds: addr_0_block_89
      nextln:   jump addr_0_block_92
      check: addr_0_block_91: // preds: addr_0_block_89
      nextln:   jump addr_0_block_92
      check: addr_0_block_92: // preds: addr_0_block_90 addr_0_block_91
      nextln:   v587 = i52.unsigned_from_bits v473
      nextln:   v588 = int.modulo v587, 0x8
      nextln:   v589 = int.sub v587, v588
      nextln:   v590 = i52.to_bits v589
      nextln:   v591 = bool.icmp.i52.eq v473, v590
      nextln:   v592 = bool.icmp.i52.eq v473, 0x13000000
      nextln:   jumpif v592, addr_0_block_93, addr_0_block_97
      check: addr_0_block_93: // preds: addr_0_block_92
      nextln:   v593 = i64.unsigned_from_bits v531
      nextln:   v594 = bool.icmp.int.eq v593, 0x4
      nextln:   jumpif v594, addr_0_block_94, addr_0_block_95
      nextln:   jump addr_0_block_98
      check: addr_0_block_94: // no preds!
      nextln:   jump addr_0_block_96
      check: addr_0_block_95: // no preds!
      nextln:   v595 = i8.trunc.i64 v531
      nextln:   v596 = i8.unsigned_from_bits v595
      nextln:   jump addr_0_block_96
      check: addr_0_block_96: // preds: addr_0_block_94 addr_0_block_95
      check: addr_0_block_97: // preds: addr_0_block_92
      nextln:   store.i64 v531, v473
      nextln:   jump addr_0_block_98
      check: addr_0_block_98: // preds: addr_0_block_93 addr_0_block_97
      check: addr_0_block_99: // preds: addr_0_block_85
      nextln:   jump addr_0_block_100(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_100(v532: i8, v533: i1, v534: i16, v535: i8, v536: bool, v537: bool, v538: bool, v539: int, v540: i64, v541: i8, v542: i8, v543: i52, v544: i1, v545: bool, v546: bool, v547: int, v548: i1, v549: bool, v550: i4, v551: i2, v552: i4, v553: i8, v554: i8, v555: i2, v556: i2, v557: bool, v558: i2, v559: i2, v560: bool, v561: bool, v562: bool, v563: bool, v564: i52, v565: i1, v566: i64, v567: i2, v568: bool): // preds: addr_0_block_86 addr_0_block_99
      nextln:   v569 = bool.icmp.i8.ne v477, 0x0
      nextln:   v570 = bool.bitwise_not v569
      nextln:   v571 = bool.and v570, 0x1
      nextln:   v572 = bool.icmp.i8.ne v477, 0x0
      nextln:   v573 = bool.bitwise_not v572
      nextln:   v574 = bool.and 0x1, v573
      nextln:   jumpif v574, addr_0_block_101, addr_0_block_102
      check: addr_0_block_101: // preds: addr_0_block_100
      nextln:   jump addr_0_block_103
      check: addr_0_block_102: // preds: addr_0_block_100
      nextln:   jump addr_0_block_103
      check: addr_0_block_103: // preds: addr_0_block_101 addr_0_block_102
      nextln:   v575 = bool.icmp.i8.ne v477, 0x0
      nextln:   jumpif v575, addr_0_block_104, addr_0_block_105
      check: addr_0_block_104: // preds: addr_0_block_103
      nextln:   jump addr_0_block_106
      check: addr_0_block_105: // preds: addr_0_block_103
      nextln:   jump addr_0_block_106
      check: addr_0_block_106: // preds: addr_0_block_104 addr_0_block_105
      nextln:   v576 = i52.unsigned_from_bits v500
      nextln:   v577 = int.modulo v576, 0x2
      nextln:   v578 = int.sub v576, v577
      nextln:   v579 = i52.to_bits v578
      nextln:   v580 = bool.icmp.i52.eq v500, v579
      nextln:   v581 = i16.load v500
      check: addr_0_block_107(v17: i64, v18: i8, v19: i16): // preds: addr_0_block_0 addr_0_block_72
      nextln:   v20 = i16.lshr v19, 0xf
      nextln:   v21 = i1.trunc.i16 v20
      nextln:   v22 = i2.zext.i1 v21
      nextln:   v23 = i2.lshl v22, 0x1
      nextln:   v24 = i2.zext.i1 v21
      nextln:   v25 = i2.or v23, v24
      nextln:   v26 = i3.zext.i2 v25
      nextln:   v27 = i3.lshl v26, 0x1
      nextln:   v28 = i3.zext.i1 v21
      nextln:   v29 = i3.or v27, v28
      nextln:   v30 = i4.zext.i3 v29
      nextln:   v31 = i4.lshl v30, 0x1
      nextln:   v32 = i4.zext.i1 v21
      nextln:   v33 = i4.or v31, v32
      nextln:   v34 = i5.zext.i4 v33
      nextln:   v35 = i5.lshl v34, 0x1
      nextln:   v36 = i5.zext.i1 v21
      nextln:   v37 = i5.or v35, v36
      nextln:   v38 = i6.zext.i5 v37
      nextln:   v39 = i6.lshl v38, 0x1
      nextln:   v40 = i6.zext.i1 v21
      nextln:   v41 = i6.or v39, v40
      nextln:   v42 = i7.zext.i6 v41
      nextln:   v43 = i7.lshl v42, 0x1
      nextln:   v44 = i7.zext.i1 v21
      nextln:   v45 = i7.or v43, v44
      nextln:   v46 = i8.zext.i7 v45
      nextln:   v47 = i8.lshl v46, 0x1
      nextln:   v48 = i8.zext.i1 v21
      nextln:   v49 = i8.or v47, v48
      nextln:   v50 = i9.zext.i8 v49
      nextln:   v51 = i9.lshl v50, 0x1
      nextln:   v52 = i9.zext.i1 v21
      nextln:   v53 = i9.or v51, v52
      nextln:   v54 = i10.zext.i9 v53
      nextln:   v55 = i10.lshl v54, 0x1
      nextln:   v56 = i10.zext.i1 v21
      nextln:   v57 = i10.or v55, v56
      nextln:   v58 = i11.zext.i10 v57
      nextln:   v59 = i11.lshl v58, 0x1
      nextln:   v60 = i11.zext.i1 v21
      nextln:   v61 = i11.or v59, v60
      nextln:   v62 = i12.zext.i11 v61
      nextln:   v63 = i12.lshl v62, 0x1
      nextln:   v64 = i12.zext.i1 v21
      nextln:   v65 = i12.or v63, v64
      nextln:   v66 = i13.zext.i12 v65
      nextln:   v67 = i13.lshl v66, 0x1
      nextln:   v68 = i13.zext.i1 v21
      nextln:   v69 = i13.or v67, v68
      nextln:   v70 = i14.zext.i13 v69
      nextln:   v71 = i14.lshl v70, 0x1
      nextln:   v72 = i14.zext.i1 v21
      nextln:   v73 = i14.or v71, v72
      nextln:   v74 = i15.zext.i14 v73
      nextln:   v75 = i15.lshl v74, 0x1
      nextln:   v76 = i15.zext.i1 v21
      nextln:   v77 = i15.or v75, v76
      nextln:   v78 = i16.zext.i15 v77
      nextln:   v79 = i16.lshl v78, 0x1
      nextln:   v80 = i16.zext.i1 v21
      nextln:   v81 = i16.or v79, v80
      nextln:   v82 = i17.zext.i16 v81
      nextln:   v83 = i17.lshl v82, 0x1
      nextln:   v84 = i17.zext.i1 v21
      nextln:   v85 = i17.or v83, v84
      nextln:   v86 = i33.zext.i17 v85
      nextln:   v87 = i33.lshl v86, 0x10
      nextln:   v88 = i33.zext.i16 v19
      nextln:   v89 = i33.or v87, v88
      nextln:   v90 = i65.zext.i32 0x0
      nextln:   v91 = i65.lshl v90, 0x21
      nextln:   v92 = i65.zext.i33 v89
      nextln:   v93 = i65.or v91, v92
      nextln:   write_reg.i65 v93, "x1"
- name: ldrsh_2
  bytes: [0x21, 0xc4, 0x80, 0x78]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x1"
      nextln:   v1 = i64.unsigned_from_bits v0
      nextln:   v2 = int.modulo v1, 0x2
      nextln:   v3 = int.sub v1, v2
      nextln:   v4 = i64.to_bits v3
      nextln:   v5 = bool.icmp.i64.eq v0, v4
      nextln:   v6 = bool.bitwise_not v5
      nextln:   v7 = bool.bitwise_not v5
      nextln:   jumpif v7, addr_0_block_0, addr_0_block_72
      check: addr_0_block_0: // preds: entry
      nextln:   v8 = i64.unsigned_from_bits v0
      nextln:   v9 = int.modulo v8, 0x1
      nextln:   v10 = int.sub v8, v9
      nextln:   v11 = i64.to_bits v10
      nextln:   v12 = bool.icmp.i64.eq v0, v11
      nextln:   v13 = i64.lshr v0, 0x30
      nextln:   v14 = i16.trunc.i64 v13
      nextln:   v15 = bool.icmp.i16.eq v14, 0x0
      nextln:   v16 = bool.bitwise_not v15
      nextln:   jumpif v16, addr_0_block_1, addr_0_block_2
      nextln:   jump addr_0_block_107(v374, v375, v531)
      check: addr_0_block_1: // no preds!
      nextln:   jump addr_0_block_3(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_4(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_2: // no preds!
      nextln:   jump addr_0_block_3(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_3(v537: i52, v538: int, v539: bool, v540: bool): // preds: addr_0_block_2
      nextln:   v541 = i52.trunc.i64 v0
      nextln:   jump addr_0_block_4(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v541, 0x1, 0x0)
      check: addr_0_block_4(v227: i3, v228: i1, v229: i1, v230: i1, v231: i1, v232: i4, v233: i1, v234: bool, v235: int, v236: int, v237: bool, v238: bool, v239: i8, v240: i8, v241: i52, v242: i1, v243: bool, v244: bool, v245: int, v246: i1, v247: bool, v248: i4, v249: i2, v250: i4, v251: i8, v252: i8, v253: i2, v254: i2, v255: bool, v256: i2, v257: i2, v258: bool, v259: bool, v260: bool, v261: bool, v262: i52, v263: i1, v264: i64, v265: i1, v266: i8, v267: i8, v268: i52, v269: i1, v270: bool, v271: bool, v272: int, v273: i1, v274: bool, v275: i4, v276: i2, v277: i4, v278: i8, v279: i8, v280: i2, v281: i2, v282: bool, v283: i2, v284: i2, v285: bool, v286: bool, v287: bool, v288: bool, v289: i52, v290: i1, v291: i64): // preds: addr_0_block_1 addr_0_block_3
      nextln:   v292 = bool.icmp.i8.ne v266, 0x0
      nextln:   v293 = bool.bitwise_not v292
      nextln:   v294 = bool.bitwise_not v5
      nextln:   v295 = bool.and v294, 0x1
      nextln:   v296 = bool.or v295, 0x0
      nextln:   v297 = bool.icmp.i8.ne v266, 0x0
      nextln:   v298 = bool.bitwise_not v297
      nextln:   v299 = bool.and v296, v298
      nextln:   v300 = bool.icmp.i8.eq v278, 0x1
      nextln:   v301 = bool.and v299, v300
      nextln:   jumpif v301, addr_0_block_5, addr_0_block_6
      check: addr_0_block_5: // preds: addr_0_block_4
      nextln:   jump addr_0_block_7
      check: addr_0_block_6: // preds: addr_0_block_4
      nextln:   jump addr_0_block_7
      check: addr_0_block_7: // preds: addr_0_block_5 addr_0_block_6
      nextln:   v302 = bool.icmp.i8.ne v266, 0x0
      nextln:   v303 = bool.bitwise_not v302
      nextln:   v304 = bool.icmp.i8.ne v266, 0x0
      nextln:   v305 = bool.bitwise_not v304
      nextln:   v306 = bool.icmp.i8.eq v278, 0x1
      nextln:   v307 = bool.and v305, v306
      nextln:   jumpif v237, addr_0_block_8, addr_0_block_9
      check: addr_0_block_8: // preds: addr_0_block_7
      nextln:   v308 = bool.icmp.i8.eq v266, 0x0
      nextln:   jump addr_0_block_10(0x1)
      check: addr_0_block_9: // preds: addr_0_block_7
      nextln:   jump addr_0_block_10(0x0)
      check: addr_0_block_10(v309: bool): // preds: addr_0_block_8 addr_0_block_9
      nextln:   v310 = bool.icmp.i8.eq v266, 0x0
      nextln:   v311 = bool.and v238, v310
      nextln:   jumpif v311, addr_0_block_11, addr_0_block_12
      check: addr_0_block_11: // preds: addr_0_block_10
      nextln:   jump addr_0_block_13(0x0, 0x0)
      check: addr_0_block_12: // preds: addr_0_block_10
      nextln:   jump addr_0_block_13(0x0, 0x0)
      check: addr_0_block_13(v312: bool, v313: bool): // preds: addr_0_block_11 addr_0_block_12
      nextln:   v314 = bool.or v309, v312
      nextln:   jumpif v314, addr_0_block_14, addr_0_block_27
      check: addr_0_block_14: // preds: addr_0_block_13
      nextln:   v315 = i52.unsigned_from_bits v262
      nextln:   v316 = int.modulo v315, 0x8
      nextln:   v317 = int.sub v315, v316
      nextln:   v318 = i52.to_bits v317
      nextln:   v319 = bool.icmp.i52.eq v262, v318
      nextln:   v320 = i64.load v262
      nextln:   jumpif v309, addr_0_block_15, addr_0_block_16
      nextln:   jump addr_0_block_28(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v320, v239, v240, v241, v242, v243, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, v259, v260, v261, v262, v263, v264, 0x0, 0x0)
      check: addr_0_block_15: // no preds!
      nextln:   jump addr_0_block_17
      check: addr_0_block_16: // no preds!
      nextln:   jump addr_0_block_17
      check: addr_0_block_17: // preds: addr_0_block_15 addr_0_block_16
      nextln:   jumpif v312, addr_0_block_18, addr_0_block_19
      check: addr_0_block_18: // preds: addr_0_block_17
      nextln:   jump addr_0_block_20
      check: addr_0_block_19: // preds: addr_0_block_17
      nextln:   jump addr_0_block_20
      check: addr_0_block_20: // preds: addr_0_block_18 addr_0_block_19
      nextln:   v542 = i52.unsigned_from_bits v262
      nextln:   v543 = int.modulo v542, 0x8
      nextln:   v544 = int.sub v542, v543
      nextln:   v545 = i52.to_bits v544
      nextln:   v546 = bool.icmp.i52.eq v262, v545
      nextln:   v547 = bool.icmp.i52.eq v262, 0x13000000
      nextln:   jumpif v547, addr_0_block_21, addr_0_block_25
      check: addr_0_block_21: // preds: addr_0_block_20
      nextln:   v548 = i64.unsigned_from_bits v320
      nextln:   v549 = bool.icmp.int.eq v548, 0x4
      nextln:   jumpif v549, addr_0_block_22, addr_0_block_23
      nextln:   jump addr_0_block_26
      check: addr_0_block_22: // no preds!
      nextln:   jump addr_0_block_24
      check: addr_0_block_23: // no preds!
      nextln:   v550 = i8.trunc.i64 v320
      nextln:   v551 = i8.unsigned_from_bits v550
      nextln:   jump addr_0_block_24
      check: addr_0_block_24: // preds: addr_0_block_22 addr_0_block_23
      check: addr_0_block_25: // preds: addr_0_block_20
      nextln:   store.i64 v320, v262
      nextln:   jump addr_0_block_26
      check: addr_0_block_26: // preds: addr_0_block_21 addr_0_block_25
      check: addr_0_block_27: // preds: addr_0_block_13
      nextln:   jump addr_0_block_28(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_28(v321: i8, v322: i1, v323: i16, v324: i8, v325: bool, v326: bool, v327: bool, v328: int, v329: i64, v330: i8, v331: i8, v332: i52, v333: i1, v334: bool, v335: bool, v336: int, v337: i1, v338: bool, v339: i4, v340: i2, v341: i4, v342: i8, v343: i8, v344: i2, v345: i2, v346: bool, v347: i2, v348: i2, v349: bool, v350: bool, v351: bool, v352: bool, v353: i52, v354: i1, v355: i64, v356: i2, v357: bool): // preds: addr_0_block_14 addr_0_block_27
      nextln:   v358 = bool.icmp.i8.ne v266, 0x0
      nextln:   v359 = bool.bitwise_not v358
      nextln:   v360 = bool.and v359, 0x1
      nextln:   v361 = bool.icmp.i8.ne v266, 0x0
      nextln:   v362 = bool.bitwise_not v361
      nextln:   v363 = bool.and 0x1, v362
      nextln:   jumpif v363, addr_0_block_29, addr_0_block_30
      check: addr_0_block_29: // preds: addr_0_block_28
      nextln:   jump addr_0_block_31
      check: addr_0_block_30: // preds: addr_0_block_28
      nextln:   jump addr_0_block_31
      check: addr_0_block_31: // preds: addr_0_block_29 addr_0_block_30
      nextln:   v364 = bool.icmp.i8.ne v266, 0x0
      nextln:   jumpif v364, addr_0_block_32, addr_0_block_33
      check: addr_0_block_32: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_33: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_34: // preds: addr_0_block_32 addr_0_block_33
      nextln:   v365 = i52.unsigned_from_bits v289
      nextln:   v366 = int.modulo v365, 0x1
      nextln:   v367 = int.sub v365, v366
      nextln:   v368 = i52.to_bits v367
      nextln:   v369 = bool.icmp.i52.eq v289, v368
      nextln:   v370 = i8.load v289
      nextln:   v371 = i8.lshl v370, 0x0
      nextln:   v372 = i16.or 0x0, v371
      nextln:   v373 = bool.bitwise_not v5
      nextln:   jumpif v373, addr_0_block_35, addr_0_block_36
      check: addr_0_block_35: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37(v5, 0xc)
      check: addr_0_block_36: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37(v5, 0x0)
      check: addr_0_block_37(v374: i64, v375: i8): // preds: addr_0_block_35 addr_0_block_36
      nextln:   v376 = i64.wrapping_add v0, 0x1
      nextln:   v377 = i64.unsigned_from_bits v376
      nextln:   v378 = int.modulo v377, 0x1
      nextln:   v379 = int.sub v377, v378
      nextln:   v380 = i64.to_bits v379
      nextln:   v381 = bool.icmp.i64.eq v376, v380
      nextln:   v382 = i64.lshr v376, 0x30
      nextln:   v383 = i16.trunc.i64 v382
      nextln:   v384 = bool.icmp.i16.eq v383, 0x0
      nextln:   v385 = bool.bitwise_not v384
      nextln:   jumpif v385, addr_0_block_38, addr_0_block_39
      check: addr_0_block_38: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_41(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_39: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_40(v532: i52, v533: int, v534: bool, v535: bool): // preds: addr_0_block_39
      nextln:   v536 = i52.trunc.i64 v376
      nextln:   jump addr_0_block_41(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v536, 0x1, 0x0)
      check: addr_0_block_41(v386: i3, v387: i1, v388: i1, v389: i1, v390: i1, v391: i4, v392: i1, v393: bool, v394: int, v395: int, v396: bool, v397: bool, v398: i8, v399: i8, v400: i52, v401: i1, v402: bool, v403: bool, v404: int, v405: i1, v406: bool, v407: i4, v408: i2, v409: i4, v410: i8, v411: i8, v412: i2, v413: i2, v414: bool, v415: i2, v416: i2, v417: bool, v418: bool, v419: bool, v420: bool, v421: i52, v422: i1, v423: i64, v424: i1, v425: i8, v426: i8, v427: i52, v428: i1, v429: bool, v430: bool, v431: int, v432: i1, v433: bool, v434: i4, v435: i2, v436: i4, v437: i8, v438: i8, v439: i2, v440: i2, v441: bool, v442: i2, v443: i2, v444: bool, v445: bool, v446: bool, v447: bool, v448: i52, v449: i1, v450: i64): // preds: addr_0_block_38 addr_0_block_40
      nextln:   v451 = bool.icmp.i8.ne v425, 0x0
      nextln:   v452 = bool.bitwise_not v451
      nextln:   v453 = bool.bitwise_not v5
      nextln:   v454 = bool.and v453, 0x1
      nextln:   v455 = bool.or v454, 0x0
      nextln:   v456 = bool.icmp.i8.ne v425, 0x0
      nextln:   v457 = bool.bitwise_not v456
      nextln:   v458 = bool.and v455, v457
      nextln:   v459 = bool.icmp.i8.eq v437, 0x1
      nextln:   v460 = bool.and v458, v459
      nextln:   jumpif v460, addr_0_block_42, addr_0_block_43
      check: addr_0_block_42: // preds: addr_0_block_41
      nextln:   jump addr_0_block_44
      check: addr_0_block_43: // preds: addr_0_block_41
      nextln:   jump addr_0_block_44
      check: addr_0_block_44: // preds: addr_0_block_42 addr_0_block_43
      nextln:   v461 = bool.icmp.i8.ne v425, 0x0
      nextln:   v462 = bool.bitwise_not v461
      nextln:   v463 = bool.icmp.i8.ne v425, 0x0
      nextln:   v464 = bool.bitwise_not v463
      nextln:   v465 = bool.icmp.i8.eq v437, 0x1
      nextln:   v466 = bool.and v464, v465
      nextln:   jumpif v396, addr_0_block_45, addr_0_block_46
      check: addr_0_block_45: // preds: addr_0_block_44
      nextln:   v467 = bool.icmp.i8.eq v425, 0x0
      nextln:   jump addr_0_block_47(0x1)
      check: addr_0_block_46: // preds: addr_0_block_44
      nextln:   jump addr_0_block_47(0x0)
      check: addr_0_block_47(v468: bool): // preds: addr_0_block_45 addr_0_block_46
      nextln:   v469 = bool.icmp.i8.eq v425, 0x0
      nextln:   v470 = bool.and v397, v469
      nextln:   jumpif v470, addr_0_block_48, addr_0_block_49
      check: addr_0_block_48: // preds: addr_0_block_47
      nextln:   jump addr_0_block_50(0x0, 0x0)
      check: addr_0_block_49: // preds: addr_0_block_47
      nextln:   jump addr_0_block_50(0x0, 0x0)
      check: addr_0_block_50(v471: bool, v472: bool): // preds: addr_0_block_48 addr_0_block_49
      nextln:   v473 = bool.or v468, v471
      nextln:   jumpif v473, addr_0_block_51, addr_0_block_64
      check: addr_0_block_51: // preds: addr_0_block_50
      nextln:   v474 = i52.unsigned_from_bits v421
      nextln:   v475 = int.modulo v474, 0x8
      nextln:   v476 = int.sub v474, v475
      nextln:   v477 = i52.to_bits v476
      nextln:   v478 = bool.icmp.i52.eq v421, v477
      nextln:   v479 = i64.load v421
      nextln:   jumpif v468, addr_0_block_52, addr_0_block_53
      nextln:   jump addr_0_block_65(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v479, v398, v399, v400, v401, v402, v403, v404, v405, v406, v407, v408, v409, v410, v411, v412, v413, v414, v415, v416, v417, v418, v419, v420, v421, v422, v423, 0x0, 0x0)
      check: addr_0_block_52: // no preds!
      nextln:   jump addr_0_block_54
      check: addr_0_block_53: // no preds!
      nextln:   jump addr_0_block_54
      check: addr_0_block_54: // preds: addr_0_block_52 addr_0_block_53
      nextln:   jumpif v471, addr_0_block_55, addr_0_block_56
      check: addr_0_block_55: // preds: addr_0_block_54
      nextln:   jump addr_0_block_57
      check: addr_0_block_56: // preds: addr_0_block_54
      nextln:   jump addr_0_block_57
      check: addr_0_block_57: // preds: addr_0_block_55 addr_0_block_56
      nextln:   v552 = i52.unsigned_from_bits v421
      nextln:   v553 = int.modulo v552, 0x8
      nextln:   v554 = int.sub v552, v553
      nextln:   v555 = i52.to_bits v554
      nextln:   v556 = bool.icmp.i52.eq v421, v555
      nextln:   v557 = bool.icmp.i52.eq v421, 0x13000000
      nextln:   jumpif v557, addr_0_block_58, addr_0_block_62
      check: addr_0_block_58: // preds: addr_0_block_57
      nextln:   v558 = i64.unsigned_from_bits v479
      nextln:   v559 = bool.icmp.int.eq v558, 0x4
      nextln:   jumpif v559, addr_0_block_59, addr_0_block_60
      nextln:   jump addr_0_block_63
      check: addr_0_block_59: // no preds!
      nextln:   jump addr_0_block_61
      check: addr_0_block_60: // no preds!
      nextln:   v560 = i8.trunc.i64 v479
      nextln:   v561 = i8.unsigned_from_bits v560
      nextln:   jump addr_0_block_61
      check: addr_0_block_61: // preds: addr_0_block_59 addr_0_block_60
      check: addr_0_block_62: // preds: addr_0_block_57
      nextln:   store.i64 v479, v421
      nextln:   jump addr_0_block_63
      check: addr_0_block_63: // preds: addr_0_block_58 addr_0_block_62
      check: addr_0_block_64: // preds: addr_0_block_50
      nextln:   jump addr_0_block_65(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_65(v480: i8, v481: i1, v482: i16, v483: i8, v484: bool, v485: bool, v486: bool, v487: int, v488: i64, v489: i8, v490: i8, v491: i52, v492: i1, v493: bool, v494: bool, v495: int, v496: i1, v497: bool, v498: i4, v499: i2, v500: i4, v501: i8, v502: i8, v503: i2, v504: i2, v505: bool, v506: i2, v507: i2, v508: bool, v509: bool, v510: bool, v511: bool, v512: i52, v513: i1, v514: i64, v515: i2, v516: bool): // preds: addr_0_block_51 addr_0_block_64
      nextln:   v517 = bool.icmp.i8.ne v425, 0x0
      nextln:   v518 = bool.bitwise_not v517
      nextln:   v519 = bool.and v518, 0x1
      nextln:   v520 = bool.icmp.i8.ne v425, 0x0
      nextln:   v521 = bool.bitwise_not v520
      nextln:   v522 = bool.and 0x1, v521
      nextln:   jumpif v522, addr_0_block_66, addr_0_block_67
      check: addr_0_block_66: // preds: addr_0_block_65
      nextln:   jump addr_0_block_68
      check: addr_0_block_67: // preds: addr_0_block_65
      nextln:   jump addr_0_block_68
      check: addr_0_block_68: // preds: addr_0_block_66 addr_0_block_67
      nextln:   v523 = bool.icmp.i8.ne v425, 0x0
      nextln:   jumpif v523, addr_0_block_69, addr_0_block_70
      check: addr_0_block_69: // preds: addr_0_block_68
      nextln:   jump addr_0_block_71
      check: addr_0_block_70: // preds: addr_0_block_68
      nextln:   jump addr_0_block_71
      check: addr_0_block_71: // preds: addr_0_block_69 addr_0_block_70
      nextln:   v524 = i52.unsigned_from_bits v448
      nextln:   v525 = int.modulo v524, 0x1
      nextln:   v526 = int.sub v524, v525
      nextln:   v527 = i52.to_bits v526
      nextln:   v528 = bool.icmp.i52.eq v448, v527
      nextln:   v529 = i8.load v448
      nextln:   v530 = i8.lshl v529, 0x8
      nextln:   v531 = i16.or 0x0, v530
      check: addr_0_block_72: // preds: entry
      nextln:   v218 = i64.unsigned_from_bits v0
      nextln:   v219 = int.modulo v218, 0x2
      nextln:   v220 = int.sub v218, v219
      nextln:   v221 = i64.to_bits v220
      nextln:   v222 = bool.icmp.i64.eq v0, v221
      nextln:   v223 = i64.lshr v0, 0x30
      nextln:   v224 = i16.trunc.i64 v223
      nextln:   v225 = bool.icmp.i16.eq v224, 0x0
      nextln:   v226 = bool.bitwise_not v225
      nextln:   jumpif v226, addr_0_block_73, addr_0_block_74
      nextln:   jump addr_0_block_107(v5, 0x0, v705)
      check: addr_0_block_73: // no preds!
      nextln:   jump addr_0_block_75(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_76(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_74: // no preds!
      nextln:   jump addr_0_block_75(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_75(v706: i52, v707: int, v708: bool, v709: bool): // preds: addr_0_block_74
      nextln:   v710 = i52.trunc.i64 v0
      nextln:   jump addr_0_block_76(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v710, 0x1, 0x0)
      check: addr_0_block_76(v562: i3, v563: i1, v564: i1, v565: i1, v566: i1, v567: i4, v568: i1, v569: bool, v570: int, v571: int, v572: bool, v573: bool, v574: i8, v575: i8, v576: i52, v577: i1, v578: bool, v579: bool, v580: int, v581: i1, v582: bool, v583: i4, v584: i2, v585: i4, v586: i8, v587: i8, v588: i2, v589: i2, v590: bool, v591: i2, v592: i2, v593: bool, v594: bool, v595: bool, v596: bool, v597: i52, v598: i1, v599: i64, v600: i1, v601: i8, v602: i8, v603: i52, v604: i1, v605: bool, v606: bool, v607: int, v608: i1, v609: bool, v610: i4, v611: i2, v612: i4, v613: i8, v614: i8, v615: i2, v616: i2, v617: bool, v618: i2, v619: i2, v620: bool, v621: bool, v622: bool, v623: bool, v624: i52, v625: i1, v626: i64): // preds: addr_0_block_73 addr_0_block_75
      nextln:   v627 = bool.icmp.i8.ne v601, 0x0
      nextln:   v628 = bool.bitwise_not v627
      nextln:   v629 = bool.bitwise_not v5
      nextln:   v630 = bool.and v629, 0x1
      nextln:   v631 = bool.or v630, 0x0
      nextln:   v632 = bool.icmp.i8.ne v601, 0x0
      nextln:   v633 = bool.bitwise_not v632
      nextln:   v634 = bool.and v631, v633
      nextln:   v635 = bool.icmp.i8.eq v613, 0x1
      nextln:   v636 = bool.and v634, v635
      nextln:   jumpif v636, addr_0_block_77, addr_0_block_78
      check: addr_0_block_77: // preds: addr_0_block_76
      nextln:   jump addr_0_block_79
      check: addr_0_block_78: // preds: addr_0_block_76
      nextln:   jump addr_0_block_79
      check: addr_0_block_79: // preds: addr_0_block_77 addr_0_block_78
      nextln:   v637 = bool.icmp.i8.ne v601, 0x0
      nextln:   v638 = bool.bitwise_not v637
      nextln:   v639 = bool.icmp.i8.ne v601, 0x0
      nextln:   v640 = bool.bitwise_not v639
      nextln:   v641 = bool.icmp.i8.eq v613, 0x1
      nextln:   v642 = bool.and v640, v641
      nextln:   jumpif v572, addr_0_block_80, addr_0_block_81
      check: addr_0_block_80: // preds: addr_0_block_79
      nextln:   v643 = bool.icmp.i8.eq v601, 0x0
      nextln:   jump addr_0_block_82(0x1)
      check: addr_0_block_81: // preds: addr_0_block_79
      nextln:   jump addr_0_block_82(0x0)
      check: addr_0_block_82(v644: bool): // preds: addr_0_block_80 addr_0_block_81
      nextln:   v645 = bool.icmp.i8.eq v601, 0x0
      nextln:   v646 = bool.and v573, v645
      nextln:   jumpif v646, addr_0_block_83, addr_0_block_84
      check: addr_0_block_83: // preds: addr_0_block_82
      nextln:   jump addr_0_block_85(0x0, 0x0)
      check: addr_0_block_84: // preds: addr_0_block_82
      nextln:   jump addr_0_block_85(0x0, 0x0)
      check: addr_0_block_85(v647: bool, v648: bool): // preds: addr_0_block_83 addr_0_block_84
      nextln:   v649 = bool.or v644, v647
      nextln:   jumpif v649, addr_0_block_86, addr_0_block_99
      check: addr_0_block_86: // preds: addr_0_block_85
      nextln:   v650 = i52.unsigned_from_bits v597
      nextln:   v651 = int.modulo v650, 0x8
      nextln:   v652 = int.sub v650, v651
      nextln:   v653 = i52.to_bits v652
      nextln:   v654 = bool.icmp.i52.eq v597, v653
      nextln:   v655 = i64.load v597
      nextln:   jumpif v644, addr_0_block_87, addr_0_block_88
      nextln:   jump addr_0_block_100(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v655, v574, v575, v576, v577, v578, v579, v580, v581, v582, v583, v584, v585, v586, v587, v588, v589, v590, v591, v592, v593, v594, v595, v596, v597, v598, v599, 0x0, 0x0)
      check: addr_0_block_87: // no preds!
      nextln:   jump addr_0_block_89
      check: addr_0_block_88: // no preds!
      nextln:   jump addr_0_block_89
      check: addr_0_block_89: // preds: addr_0_block_87 addr_0_block_88
      nextln:   jumpif v647, addr_0_block_90, addr_0_block_91
      check: addr_0_block_90: // preds: addr_0_block_89
      nextln:   jump addr_0_block_92
      check: addr_0_block_91: // preds: addr_0_block_89
      nextln:   jump addr_0_block_92
      check: addr_0_block_92: // preds: addr_0_block_90 addr_0_block_91
      nextln:   v711 = i52.unsigned_from_bits v597
      nextln:   v712 = int.modulo v711, 0x8
      nextln:   v713 = int.sub v711, v712
      nextln:   v714 = i52.to_bits v713
      nextln:   v715 = bool.icmp.i52.eq v597, v714
      nextln:   v716 = bool.icmp.i52.eq v597, 0x13000000
      nextln:   jumpif v716, addr_0_block_93, addr_0_block_97
      check: addr_0_block_93: // preds: addr_0_block_92
      nextln:   v717 = i64.unsigned_from_bits v655
      nextln:   v718 = bool.icmp.int.eq v717, 0x4
      nextln:   jumpif v718, addr_0_block_94, addr_0_block_95
      nextln:   jump addr_0_block_98
      check: addr_0_block_94: // no preds!
      nextln:   jump addr_0_block_96
      check: addr_0_block_95: // no preds!
      nextln:   v719 = i8.trunc.i64 v655
      nextln:   v720 = i8.unsigned_from_bits v719
      nextln:   jump addr_0_block_96
      check: addr_0_block_96: // preds: addr_0_block_94 addr_0_block_95
      check: addr_0_block_97: // preds: addr_0_block_92
      nextln:   store.i64 v655, v597
      nextln:   jump addr_0_block_98
      check: addr_0_block_98: // preds: addr_0_block_93 addr_0_block_97
      check: addr_0_block_99: // preds: addr_0_block_85
      nextln:   jump addr_0_block_100(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_100(v656: i8, v657: i1, v658: i16, v659: i8, v660: bool, v661: bool, v662: bool, v663: int, v664: i64, v665: i8, v666: i8, v667: i52, v668: i1, v669: bool, v670: bool, v671: int, v672: i1, v673: bool, v674: i4, v675: i2, v676: i4, v677: i8, v678: i8, v679: i2, v680: i2, v681: bool, v682: i2, v683: i2, v684: bool, v685: bool, v686: bool, v687: bool, v688: i52, v689: i1, v690: i64, v691: i2, v692: bool): // preds: addr_0_block_86 addr_0_block_99
      nextln:   v693 = bool.icmp.i8.ne v601, 0x0
      nextln:   v694 = bool.bitwise_not v693
      nextln:   v695 = bool.and v694, 0x1
      nextln:   v696 = bool.icmp.i8.ne v601, 0x0
      nextln:   v697 = bool.bitwise_not v696
      nextln:   v698 = bool.and 0x1, v697
      nextln:   jumpif v698, addr_0_block_101, addr_0_block_102
      check: addr_0_block_101: // preds: addr_0_block_100
      nextln:   jump addr_0_block_103
      check: addr_0_block_102: // preds: addr_0_block_100
      nextln:   jump addr_0_block_103
      check: addr_0_block_103: // preds: addr_0_block_101 addr_0_block_102
      nextln:   v699 = bool.icmp.i8.ne v601, 0x0
      nextln:   jumpif v699, addr_0_block_104, addr_0_block_105
      check: addr_0_block_104: // preds: addr_0_block_103
      nextln:   jump addr_0_block_106
      check: addr_0_block_105: // preds: addr_0_block_103
      nextln:   jump addr_0_block_106
      check: addr_0_block_106: // preds: addr_0_block_104 addr_0_block_105
      nextln:   v700 = i52.unsigned_from_bits v624
      nextln:   v701 = int.modulo v700, 0x2
      nextln:   v702 = int.sub v700, v701
      nextln:   v703 = i52.to_bits v702
      nextln:   v704 = bool.icmp.i52.eq v624, v703
      nextln:   v705 = i16.load v624
      check: addr_0_block_107(v17: i64, v18: i8, v19: i16): // preds: addr_0_block_0 addr_0_block_72
      nextln:   v20 = i16.lshr v19, 0xf
      nextln:   v21 = i1.trunc.i16 v20
      nextln:   v22 = i2.zext.i1 v21
      nextln:   v23 = i2.lshl v22, 0x1
      nextln:   v24 = i2.zext.i1 v21
      nextln:   v25 = i2.or v23, v24
      nextln:   v26 = i3.zext.i2 v25
      nextln:   v27 = i3.lshl v26, 0x1
      nextln:   v28 = i3.zext.i1 v21
      nextln:   v29 = i3.or v27, v28
      nextln:   v30 = i4.zext.i3 v29
      nextln:   v31 = i4.lshl v30, 0x1
      nextln:   v32 = i4.zext.i1 v21
      nextln:   v33 = i4.or v31, v32
      nextln:   v34 = i5.zext.i4 v33
      nextln:   v35 = i5.lshl v34, 0x1
      nextln:   v36 = i5.zext.i1 v21
      nextln:   v37 = i5.or v35, v36
      nextln:   v38 = i6.zext.i5 v37
      nextln:   v39 = i6.lshl v38, 0x1
      nextln:   v40 = i6.zext.i1 v21
      nextln:   v41 = i6.or v39, v40
      nextln:   v42 = i7.zext.i6 v41
      nextln:   v43 = i7.lshl v42, 0x1
      nextln:   v44 = i7.zext.i1 v21
      nextln:   v45 = i7.or v43, v44
      nextln:   v46 = i8.zext.i7 v45
      nextln:   v47 = i8.lshl v46, 0x1
      nextln:   v48 = i8.zext.i1 v21
      nextln:   v49 = i8.or v47, v48
      nextln:   v50 = i9.zext.i8 v49
      nextln:   v51 = i9.lshl v50, 0x1
      nextln:   v52 = i9.zext.i1 v21
      nextln:   v53 = i9.or v51, v52
      nextln:   v54 = i10.zext.i9 v53
      nextln:   v55 = i10.lshl v54, 0x1
      nextln:   v56 = i10.zext.i1 v21
      nextln:   v57 = i10.or v55, v56
      nextln:   v58 = i11.zext.i10 v57
      nextln:   v59 = i11.lshl v58, 0x1
      nextln:   v60 = i11.zext.i1 v21
      nextln:   v61 = i11.or v59, v60
      nextln:   v62 = i12.zext.i11 v61
      nextln:   v63 = i12.lshl v62, 0x1
      nextln:   v64 = i12.zext.i1 v21
      nextln:   v65 = i12.or v63, v64
      nextln:   v66 = i13.zext.i12 v65
      nextln:   v67 = i13.lshl v66, 0x1
      nextln:   v68 = i13.zext.i1 v21
      nextln:   v69 = i13.or v67, v68
      nextln:   v70 = i14.zext.i13 v69
      nextln:   v71 = i14.lshl v70, 0x1
      nextln:   v72 = i14.zext.i1 v21
      nextln:   v73 = i14.or v71, v72
      nextln:   v74 = i15.zext.i14 v73
      nextln:   v75 = i15.lshl v74, 0x1
      nextln:   v76 = i15.zext.i1 v21
      nextln:   v77 = i15.or v75, v76
      nextln:   v78 = i16.zext.i15 v77
      nextln:   v79 = i16.lshl v78, 0x1
      nextln:   v80 = i16.zext.i1 v21
      nextln:   v81 = i16.or v79, v80
      nextln:   v82 = i17.zext.i16 v81
      nextln:   v83 = i17.lshl v82, 0x1
      nextln:   v84 = i17.zext.i1 v21
      nextln:   v85 = i17.or v83, v84
      nextln:   v86 = i18.zext.i17 v85
      nextln:   v87 = i18.lshl v86, 0x1
      nextln:   v88 = i18.zext.i1 v21
      nextln:   v89 = i18.or v87, v88
      nextln:   v90 = i19.zext.i18 v89
      nextln:   v91 = i19.lshl v90, 0x1
      nextln:   v92 = i19.zext.i1 v21
      nextln:   v93 = i19.or v91, v92
      nextln:   v94 = i20.zext.i19 v93
      nextln:   v95 = i20.lshl v94, 0x1
      nextln:   v96 = i20.zext.i1 v21
      nextln:   v97 = i20.or v95, v96
      nextln:   v98 = i21.zext.i20 v97
      nextln:   v99 = i21.lshl v98, 0x1
      nextln:   v100 = i21.zext.i1 v21
      nextln:   v101 = i21.or v99, v100
      nextln:   v102 = i22.zext.i21 v101
      nextln:   v103 = i22.lshl v102, 0x1
      nextln:   v104 = i22.zext.i1 v21
      nextln:   v105 = i22.or v103, v104
      nextln:   v106 = i23.zext.i22 v105
      nextln:   v107 = i23.lshl v106, 0x1
      nextln:   v108 = i23.zext.i1 v21
      nextln:   v109 = i23.or v107, v108
      nextln:   v110 = i24.zext.i23 v109
      nextln:   v111 = i24.lshl v110, 0x1
      nextln:   v112 = i24.zext.i1 v21
      nextln:   v113 = i24.or v111, v112
      nextln:   v114 = i25.zext.i24 v113
      nextln:   v115 = i25.lshl v114, 0x1
      nextln:   v116 = i25.zext.i1 v21
      nextln:   v117 = i25.or v115, v116
      nextln:   v118 = i26.zext.i25 v117
      nextln:   v119 = i26.lshl v118, 0x1
      nextln:   v120 = i26.zext.i1 v21
      nextln:   v121 = i26.or v119, v120
      nextln:   v122 = i27.zext.i26 v121
      nextln:   v123 = i27.lshl v122, 0x1
      nextln:   v124 = i27.zext.i1 v21
      nextln:   v125 = i27.or v123, v124
      nextln:   v126 = i28.zext.i27 v125
      nextln:   v127 = i28.lshl v126, 0x1
      nextln:   v128 = i28.zext.i1 v21
      nextln:   v129 = i28.or v127, v128
      nextln:   v130 = i29.zext.i28 v129
      nextln:   v131 = i29.lshl v130, 0x1
      nextln:   v132 = i29.zext.i1 v21
      nextln:   v133 = i29.or v131, v132
      nextln:   v134 = i30.zext.i29 v133
      nextln:   v135 = i30.lshl v134, 0x1
      nextln:   v136 = i30.zext.i1 v21
      nextln:   v137 = i30.or v135, v136
      nextln:   v138 = i31.zext.i30 v137
      nextln:   v139 = i31.lshl v138, 0x1
      nextln:   v140 = i31.zext.i1 v21
      nextln:   v141 = i31.or v139, v140
      nextln:   v142 = i32.zext.i31 v141
      nextln:   v143 = i32.lshl v142, 0x1
      nextln:   v144 = i32.zext.i1 v21
      nextln:   v145 = i32.or v143, v144
      nextln:   v146 = i33.zext.i32 v145
      nextln:   v147 = i33.lshl v146, 0x1
      nextln:   v148 = i33.zext.i1 v21
      nextln:   v149 = i33.or v147, v148
      nextln:   v150 = i34.zext.i33 v149
      nextln:   v151 = i34.lshl v150, 0x1
      nextln:   v152 = i34.zext.i1 v21
      nextln:   v153 = i34.or v151, v152
      nextln:   v154 = i35.zext.i34 v153
      nextln:   v155 = i35.lshl v154, 0x1
      nextln:   v156 = i35.zext.i1 v21
      nextln:   v157 = i35.or v155, v156
      nextln:   v158 = i36.zext.i35 v157
      nextln:   v159 = i36.lshl v158, 0x1
      nextln:   v160 = i36.zext.i1 v21
      nextln:   v161 = i36.or v159, v160
      nextln:   v162 = i37.zext.i36 v161
      nextln:   v163 = i37.lshl v162, 0x1
      nextln:   v164 = i37.zext.i1 v21
      nextln:   v165 = i37.or v163, v164
      nextln:   v166 = i38.zext.i37 v165
      nextln:   v167 = i38.lshl v166, 0x1
      nextln:   v168 = i38.zext.i1 v21
      nextln:   v169 = i38.or v167, v168
      nextln:   v170 = i39.zext.i38 v169
      nextln:   v171 = i39.lshl v170, 0x1
      nextln:   v172 = i39.zext.i1 v21
      nextln:   v173 = i39.or v171, v172
      nextln:   v174 = i40.zext.i39 v173
      nextln:   v175 = i40.lshl v174, 0x1
      nextln:   v176 = i40.zext.i1 v21
      nextln:   v177 = i40.or v175, v176
      nextln:   v178 = i41.zext.i40 v177
      nextln:   v179 = i41.lshl v178, 0x1
      nextln:   v180 = i41.zext.i1 v21
      nextln:   v181 = i41.or v179, v180
      nextln:   v182 = i42.zext.i41 v181
      nextln:   v183 = i42.lshl v182, 0x1
      nextln:   v184 = i42.zext.i1 v21
      nextln:   v185 = i42.or v183, v184
      nextln:   v186 = i43.zext.i42 v185
      nextln:   v187 = i43.lshl v186, 0x1
      nextln:   v188 = i43.zext.i1 v21
      nextln:   v189 = i43.or v187, v188
      nextln:   v190 = i44.zext.i43 v189
      nextln:   v191 = i44.lshl v190, 0x1
      nextln:   v192 = i44.zext.i1 v21
      nextln:   v193 = i44.or v191, v192
      nextln:   v194 = i45.zext.i44 v193
      nextln:   v195 = i45.lshl v194, 0x1
      nextln:   v196 = i45.zext.i1 v21
      nextln:   v197 = i45.or v195, v196
      nextln:   v198 = i46.zext.i45 v197
      nextln:   v199 = i46.lshl v198, 0x1
      nextln:   v200 = i46.zext.i1 v21
      nextln:   v201 = i46.or v199, v200
      nextln:   v202 = i47.zext.i46 v201
      nextln:   v203 = i47.lshl v202, 0x1
      nextln:   v204 = i47.zext.i1 v21
      nextln:   v205 = i47.or v203, v204
      nextln:   v206 = i48.zext.i47 v205
      nextln:   v207 = i48.lshl v206, 0x1
      nextln:   v208 = i48.zext.i1 v21
      nextln:   v209 = i48.or v207, v208
      nextln:   v210 = i49.zext.i48 v209
      nextln:   v211 = i49.lshl v210, 0x1
      nextln:   v212 = i49.zext.i1 v21
      nextln:   v213 = i49.or v211, v212
      nextln:   v214 = i65.zext.i49 v213
      nextln:   v215 = i65.lshl v214, 0x10
      nextln:   v216 = i65.zext.i16 v19
      nextln:   v217 = i65.or v215, v216
      nextln:   write_reg.i65 v217, "x1"
