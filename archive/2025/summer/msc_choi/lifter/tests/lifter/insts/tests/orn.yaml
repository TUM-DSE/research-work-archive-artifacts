tests:
- name: and_1
  bytes: [0x20, 0x0c, 0x22, 0x2a]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x1"
      nextln:   v1 = i32.trunc.i64 v0
      nextln:   v2 = i64.read_reg "x2"
      nextln:   v3 = i32.trunc.i64 v2
      nextln:   v4 = i32.lshl v3, 0x3
      nextln:   v5 = int.sub 0x20, 0x3
      nextln:   v6 = i32.lshr v3, v5
      nextln:   v7 = i1.trunc.i32 v6
      nextln:   v8 = i32.bitwise_not v4
      nextln:   v9 = i32.or v1, v8
      nextln:   v10 = i64.zext.i32 0x0
      nextln:   v11 = i64.lshl v10, 0x20
      nextln:   v12 = i64.zext.i32 v9
      nextln:   v13 = i64.or v11, v12
      nextln:   write_reg.i64 v13, "x0"
- name: and_2
  bytes: [0x41, 0x00, 0x21, 0xaa]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x2"
      nextln:   v1 = i64.read_reg "x1"
      nextln:   v2 = i64.bitwise_not v1
      nextln:   v3 = i64.or v0, v2
      nextln:   write_reg.i64 v3, "x1"
- name: orn_3
  bytes: [0x20, 0x10, 0x22, 0xaa]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x1"
      nextln:   v1 = i64.read_reg "x2"
      nextln:   v2 = i64.lshl v1, 0x4
      nextln:   v3 = int.sub 0x40, 0x4
      nextln:   v4 = i64.lshr v1, v3
      nextln:   v5 = i1.trunc.i64 v4
      nextln:   v6 = i64.bitwise_not v2
      nextln:   v7 = i64.or v0, v6
      nextln:   write_reg.i64 v7, "x0"
