tests:
- name: ccmn_1
  bytes: [0x03, 0x00, 0x41, 0xba]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x0"
      nextln:   v1 = i64.read_reg "x1"
      nextln:   v2 = i1.read_reg "z"
      nextln:   v3 = bool.icmp.i1.eq v2, 0x1
      nextln:   jumpif v3, addr_0_block_0, addr_0_block_10
      check: addr_0_block_0: // preds: entry
      nextln:   v4 = i64.unsigned_from_bits v0
      nextln:   v5 = i64.unsigned_from_bits v1
      nextln:   v6 = int.add v4, v5
      nextln:   v7 = int.add v6, 0x0
      nextln:   v8 = i64.signed_from_bits v0
      nextln:   v9 = i64.signed_from_bits v1
      nextln:   v10 = int.add v8, v9
      nextln:   v11 = int.add v10, 0x0
      nextln:   v12 = i64.to_bits v7
      nextln:   v13 = i64.lshr v12, 0x3f
      nextln:   v14 = i1.trunc.i64 v13
      nextln:   v15 = bool.icmp.i64.eq v12, 0x0
      nextln:   jumpif v15, addr_0_block_1, addr_0_block_2
      nextln:   jump addr_0_block_11(0x0, v44, v1)
      check: addr_0_block_1: // no preds!
      nextln:   jump addr_0_block_3(0x1)
      check: addr_0_block_2: // no preds!
      nextln:   jump addr_0_block_3(0x0)
      check: addr_0_block_3(v26: i1): // preds: addr_0_block_1 addr_0_block_2
      nextln:   v27 = i64.unsigned_from_bits v12
      nextln:   v28 = bool.icmp.int.eq v27, v7
      nextln:   jumpif v28, addr_0_block_4, addr_0_block_5
      check: addr_0_block_4: // preds: addr_0_block_3
      nextln:   jump addr_0_block_6(0x0)
      check: addr_0_block_5: // preds: addr_0_block_3
      nextln:   jump addr_0_block_6(0x1)
      check: addr_0_block_6(v29: i1): // preds: addr_0_block_4 addr_0_block_5
      nextln:   v30 = i64.signed_from_bits v12
      nextln:   v31 = bool.icmp.int.eq v30, v11
      nextln:   jumpif v31, addr_0_block_7, addr_0_block_8
      check: addr_0_block_7: // preds: addr_0_block_6
      nextln:   jump addr_0_block_9(0x0)
      check: addr_0_block_8: // preds: addr_0_block_6
      nextln:   jump addr_0_block_9(0x1)
      check: addr_0_block_9(v32: i1): // preds: addr_0_block_7 addr_0_block_8
      nextln:   v33 = i2.zext.i1 v14
      nextln:   v34 = i2.lshl v33, 0x1
      nextln:   v35 = i2.zext.i1 v26
      nextln:   v36 = i2.or v34, v35
      nextln:   v37 = i3.zext.i2 v36
      nextln:   v38 = i3.lshl v37, 0x1
      nextln:   v39 = i3.zext.i1 v29
      nextln:   v40 = i3.or v38, v39
      nextln:   v41 = i4.zext.i3 v40
      nextln:   v42 = i4.lshl v41, 0x1
      nextln:   v43 = i4.zext.i1 v32
      nextln:   v44 = i4.or v42, v43
      check: addr_0_block_10: // preds: entry
      nextln:   jump addr_0_block_11(0x0, 0x3, v1)
      check: addr_0_block_11(v16: i1, v17: i4, v18: i64): // preds: addr_0_block_0 addr_0_block_10
      nextln:   v19 = i1.trunc.i4 v17
      nextln:   write_reg.i1 v19, "v"
      nextln:   v20 = i4.lshr v17, 0x1
      nextln:   v21 = i1.trunc.i4 v20
      nextln:   write_reg.i1 v21, "c"
      nextln:   v22 = i4.lshr v17, 0x2
      nextln:   v23 = i1.trunc.i4 v22
      nextln:   write_reg.i1 v23, "z"
      nextln:   v24 = i4.lshr v17, 0x3
      nextln:   v25 = i1.trunc.i4 v24
      nextln:   write_reg.i1 v25, "n"
- name: ccmn_2
  bytes: [0xc0, 0xe0, 0x46, 0xba]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x6"
      nextln:   v1 = i64.read_reg "x6"
      nextln:   v2 = i64.unsigned_from_bits v0
      nextln:   v3 = i64.unsigned_from_bits v1
      nextln:   v4 = int.add v2, v3
      nextln:   v5 = int.add v4, 0x0
      nextln:   v6 = i64.signed_from_bits v0
      nextln:   v7 = i64.signed_from_bits v1
      nextln:   v8 = int.add v6, v7
      nextln:   v9 = int.add v8, 0x0
      nextln:   v10 = i64.to_bits v5
      nextln:   v11 = i64.lshr v10, 0x3f
      nextln:   v12 = i1.trunc.i64 v11
      nextln:   v13 = bool.icmp.i64.eq v10, 0x0
      nextln:   jumpif v13, addr_0_block_0, addr_0_block_1
      check: addr_0_block_0: // preds: entry
      nextln:   jump addr_0_block_2(0x1)
      check: addr_0_block_1: // preds: entry
      nextln:   jump addr_0_block_2(0x0)
      check: addr_0_block_2(v14: i1): // preds: addr_0_block_0 addr_0_block_1
      nextln:   v15 = i64.unsigned_from_bits v10
      nextln:   v16 = bool.icmp.int.eq v15, v5
      nextln:   jumpif v16, addr_0_block_3, addr_0_block_4
      check: addr_0_block_3: // preds: addr_0_block_2
      nextln:   jump addr_0_block_5(0x0)
      check: addr_0_block_4: // preds: addr_0_block_2
      nextln:   jump addr_0_block_5(0x1)
      check: addr_0_block_5(v17: i1): // preds: addr_0_block_3 addr_0_block_4
      nextln:   v18 = i64.signed_from_bits v10
      nextln:   v19 = bool.icmp.int.eq v18, v9
      nextln:   jumpif v19, addr_0_block_6, addr_0_block_7
      check: addr_0_block_6: // preds: addr_0_block_5
      nextln:   jump addr_0_block_8(0x0)
      check: addr_0_block_7: // preds: addr_0_block_5
      nextln:   jump addr_0_block_8(0x1)
      check: addr_0_block_8(v20: i1): // preds: addr_0_block_6 addr_0_block_7
      nextln:   v21 = i2.zext.i1 v12
      nextln:   v22 = i2.lshl v21, 0x1
      nextln:   v23 = i2.zext.i1 v14
      nextln:   v24 = i2.or v22, v23
      nextln:   v25 = i3.zext.i2 v24
      nextln:   v26 = i3.lshl v25, 0x1
      nextln:   v27 = i3.zext.i1 v17
      nextln:   v28 = i3.or v26, v27
      nextln:   v29 = i4.zext.i3 v28
      nextln:   v30 = i4.lshl v29, 0x1
      nextln:   v31 = i4.zext.i1 v20
      nextln:   v32 = i4.or v30, v31
      nextln:   v33 = i1.trunc.i4 v32
      nextln:   write_reg.i1 v33, "v"
      nextln:   v34 = i4.lshr v32, 0x1
      nextln:   v35 = i1.trunc.i4 v34
      nextln:   write_reg.i1 v35, "c"
      nextln:   v36 = i4.lshr v32, 0x2
      nextln:   v37 = i1.trunc.i4 v36
      nextln:   write_reg.i1 v37, "z"
      nextln:   v38 = i4.lshr v32, 0x3
      nextln:   v39 = i1.trunc.i4 v38
      nextln:   write_reg.i1 v39, "n"
- name: ccmn_3
  bytes: [0x04, 0x60, 0x42, 0x3a]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x0"
      nextln:   v1 = i32.trunc.i64 v0
      nextln:   v2 = i64.read_reg "x2"
      nextln:   v3 = i32.trunc.i64 v2
      nextln:   v4 = i1.read_reg "v"
      nextln:   v5 = bool.icmp.i1.eq v4, 0x1
      nextln:   jumpif v5, addr_0_block_0, addr_0_block_10
      check: addr_0_block_0: // preds: entry
      nextln:   v6 = i32.unsigned_from_bits v1
      nextln:   v7 = i32.unsigned_from_bits v3
      nextln:   v8 = int.add v6, v7
      nextln:   v9 = int.add v8, 0x0
      nextln:   v10 = i32.signed_from_bits v1
      nextln:   v11 = i32.signed_from_bits v3
      nextln:   v12 = int.add v10, v11
      nextln:   v13 = int.add v12, 0x0
      nextln:   v14 = i32.to_bits v9
      nextln:   v15 = i32.lshr v14, 0x1f
      nextln:   v16 = i1.trunc.i32 v15
      nextln:   v17 = bool.icmp.i32.eq v14, 0x0
      nextln:   jumpif v17, addr_0_block_1, addr_0_block_2
      nextln:   jump addr_0_block_11(0x0, v46, v3)
      check: addr_0_block_1: // no preds!
      nextln:   jump addr_0_block_3(0x1)
      check: addr_0_block_2: // no preds!
      nextln:   jump addr_0_block_3(0x0)
      check: addr_0_block_3(v28: i1): // preds: addr_0_block_1 addr_0_block_2
      nextln:   v29 = i32.unsigned_from_bits v14
      nextln:   v30 = bool.icmp.int.eq v29, v9
      nextln:   jumpif v30, addr_0_block_4, addr_0_block_5
      check: addr_0_block_4: // preds: addr_0_block_3
      nextln:   jump addr_0_block_6(0x0)
      check: addr_0_block_5: // preds: addr_0_block_3
      nextln:   jump addr_0_block_6(0x1)
      check: addr_0_block_6(v31: i1): // preds: addr_0_block_4 addr_0_block_5
      nextln:   v32 = i32.signed_from_bits v14
      nextln:   v33 = bool.icmp.int.eq v32, v13
      nextln:   jumpif v33, addr_0_block_7, addr_0_block_8
      check: addr_0_block_7: // preds: addr_0_block_6
      nextln:   jump addr_0_block_9(0x0)
      check: addr_0_block_8: // preds: addr_0_block_6
      nextln:   jump addr_0_block_9(0x1)
      check: addr_0_block_9(v34: i1): // preds: addr_0_block_7 addr_0_block_8
      nextln:   v35 = i2.zext.i1 v16
      nextln:   v36 = i2.lshl v35, 0x1
      nextln:   v37 = i2.zext.i1 v28
      nextln:   v38 = i2.or v36, v37
      nextln:   v39 = i3.zext.i2 v38
      nextln:   v40 = i3.lshl v39, 0x1
      nextln:   v41 = i3.zext.i1 v31
      nextln:   v42 = i3.or v40, v41
      nextln:   v43 = i4.zext.i3 v42
      nextln:   v44 = i4.lshl v43, 0x1
      nextln:   v45 = i4.zext.i1 v34
      nextln:   v46 = i4.or v44, v45
      check: addr_0_block_10: // preds: entry
      nextln:   jump addr_0_block_11(0x0, 0x4, v3)
      check: addr_0_block_11(v18: i1, v19: i4, v20: i32): // preds: addr_0_block_0 addr_0_block_10
      nextln:   v21 = i1.trunc.i4 v19
      nextln:   write_reg.i1 v21, "v"
      nextln:   v22 = i4.lshr v19, 0x1
      nextln:   v23 = i1.trunc.i4 v22
      nextln:   write_reg.i1 v23, "c"
      nextln:   v24 = i4.lshr v19, 0x2
      nextln:   v25 = i1.trunc.i4 v24
      nextln:   write_reg.i1 v25, "z"
      nextln:   v26 = i4.lshr v19, 0x3
      nextln:   v27 = i1.trunc.i4 v26
      nextln:   write_reg.i1 v27, "n"
