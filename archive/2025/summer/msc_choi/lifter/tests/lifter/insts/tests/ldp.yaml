tests:
- name: ldp_1
  bytes: [0x40, 0x84, 0xc0, 0xa8]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x2"
      nextln:   v1 = i64.wrapping_add v0, 0x0
      nextln:   v2 = i64.unsigned_from_bits v1
      nextln:   v3 = int.modulo v2, 0x8
      nextln:   v4 = int.sub v2, v3
      nextln:   v5 = i64.to_bits v4
      nextln:   v6 = bool.icmp.i64.eq v1, v5
      nextln:   v7 = bool.bitwise_not v6
      nextln:   v8 = bool.bitwise_not v6
      nextln:   jumpif v8, addr_0_block_0, addr_0_block_276
      check: addr_0_block_0: // preds: entry
      nextln:   v9 = i64.unsigned_from_bits v1
      nextln:   v10 = int.modulo v9, 0x1
      nextln:   v11 = int.sub v9, v10
      nextln:   v12 = i64.to_bits v11
      nextln:   v13 = bool.icmp.i64.eq v1, v12
      nextln:   v14 = i64.lshr v1, 0x30
      nextln:   v15 = i16.trunc.i64 v14
      nextln:   v16 = bool.icmp.i16.eq v15, 0x0
      nextln:   v17 = bool.bitwise_not v16
      nextln:   jumpif v17, addr_0_block_1, addr_0_block_2
      nextln:   jump addr_0_block_311(v207, v208, v1306)
      check: addr_0_block_1: // no preds!
      nextln:   jump addr_0_block_3(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_4(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_2: // no preds!
      nextln:   jump addr_0_block_3(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_3(v1342: i52, v1343: int, v1344: bool, v1345: bool): // preds: addr_0_block_2
      nextln:   v1346 = i52.trunc.i64 v1
      nextln:   jump addr_0_block_4(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1346, 0x1, 0x0)
      check: addr_0_block_4(v60: i3, v61: i1, v62: i1, v63: i1, v64: i1, v65: i4, v66: i1, v67: bool, v68: int, v69: int, v70: bool, v71: bool, v72: i8, v73: i8, v74: i52, v75: i1, v76: bool, v77: bool, v78: int, v79: i1, v80: bool, v81: i4, v82: i2, v83: i4, v84: i8, v85: i8, v86: i2, v87: i2, v88: bool, v89: i2, v90: i2, v91: bool, v92: bool, v93: bool, v94: bool, v95: i52, v96: i1, v97: i64, v98: i1, v99: i8, v100: i8, v101: i52, v102: i1, v103: bool, v104: bool, v105: int, v106: i1, v107: bool, v108: i4, v109: i2, v110: i4, v111: i8, v112: i8, v113: i2, v114: i2, v115: bool, v116: i2, v117: i2, v118: bool, v119: bool, v120: bool, v121: bool, v122: i52, v123: i1, v124: i64): // preds: addr_0_block_1 addr_0_block_3
      nextln:   v125 = bool.icmp.i8.ne v99, 0x0
      nextln:   v126 = bool.bitwise_not v125
      nextln:   v127 = bool.bitwise_not v6
      nextln:   v128 = bool.and v127, 0x1
      nextln:   v129 = bool.or v128, 0x0
      nextln:   v130 = bool.icmp.i8.ne v99, 0x0
      nextln:   v131 = bool.bitwise_not v130
      nextln:   v132 = bool.and v129, v131
      nextln:   v133 = bool.icmp.i8.eq v111, 0x1
      nextln:   v134 = bool.and v132, v133
      nextln:   jumpif v134, addr_0_block_5, addr_0_block_6
      check: addr_0_block_5: // preds: addr_0_block_4
      nextln:   jump addr_0_block_7
      check: addr_0_block_6: // preds: addr_0_block_4
      nextln:   jump addr_0_block_7
      check: addr_0_block_7: // preds: addr_0_block_5 addr_0_block_6
      nextln:   v135 = bool.icmp.i8.ne v99, 0x0
      nextln:   v136 = bool.bitwise_not v135
      nextln:   v137 = bool.icmp.i8.ne v99, 0x0
      nextln:   v138 = bool.bitwise_not v137
      nextln:   v139 = bool.icmp.i8.eq v111, 0x1
      nextln:   v140 = bool.and v138, v139
      nextln:   jumpif v70, addr_0_block_8, addr_0_block_9
      check: addr_0_block_8: // preds: addr_0_block_7
      nextln:   v141 = bool.icmp.i8.eq v99, 0x0
      nextln:   jump addr_0_block_10(0x1)
      check: addr_0_block_9: // preds: addr_0_block_7
      nextln:   jump addr_0_block_10(0x0)
      check: addr_0_block_10(v142: bool): // preds: addr_0_block_8 addr_0_block_9
      nextln:   v143 = bool.icmp.i8.eq v99, 0x0
      nextln:   v144 = bool.and v71, v143
      nextln:   jumpif v144, addr_0_block_11, addr_0_block_12
      check: addr_0_block_11: // preds: addr_0_block_10
      nextln:   jump addr_0_block_13(0x0, 0x0)
      check: addr_0_block_12: // preds: addr_0_block_10
      nextln:   jump addr_0_block_13(0x0, 0x0)
      check: addr_0_block_13(v145: bool, v146: bool): // preds: addr_0_block_11 addr_0_block_12
      nextln:   v147 = bool.or v142, v145
      nextln:   jumpif v147, addr_0_block_14, addr_0_block_27
      check: addr_0_block_14: // preds: addr_0_block_13
      nextln:   v148 = i52.unsigned_from_bits v95
      nextln:   v149 = int.modulo v148, 0x8
      nextln:   v150 = int.sub v148, v149
      nextln:   v151 = i52.to_bits v150
      nextln:   v152 = bool.icmp.i52.eq v95, v151
      nextln:   v153 = i64.load v95
      nextln:   jumpif v142, addr_0_block_15, addr_0_block_16
      nextln:   jump addr_0_block_28(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v153, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, 0x0, 0x0)
      check: addr_0_block_15: // no preds!
      nextln:   jump addr_0_block_17
      check: addr_0_block_16: // no preds!
      nextln:   jump addr_0_block_17
      check: addr_0_block_17: // preds: addr_0_block_15 addr_0_block_16
      nextln:   jumpif v145, addr_0_block_18, addr_0_block_19
      check: addr_0_block_18: // preds: addr_0_block_17
      nextln:   jump addr_0_block_20
      check: addr_0_block_19: // preds: addr_0_block_17
      nextln:   jump addr_0_block_20
      check: addr_0_block_20: // preds: addr_0_block_18 addr_0_block_19
      nextln:   v1347 = i52.unsigned_from_bits v95
      nextln:   v1348 = int.modulo v1347, 0x8
      nextln:   v1349 = int.sub v1347, v1348
      nextln:   v1350 = i52.to_bits v1349
      nextln:   v1351 = bool.icmp.i52.eq v95, v1350
      nextln:   v1352 = bool.icmp.i52.eq v95, 0x13000000
      nextln:   jumpif v1352, addr_0_block_21, addr_0_block_25
      check: addr_0_block_21: // preds: addr_0_block_20
      nextln:   v1353 = i64.unsigned_from_bits v153
      nextln:   v1354 = bool.icmp.int.eq v1353, 0x4
      nextln:   jumpif v1354, addr_0_block_22, addr_0_block_23
      nextln:   jump addr_0_block_26
      check: addr_0_block_22: // no preds!
      nextln:   jump addr_0_block_24
      check: addr_0_block_23: // no preds!
      nextln:   v1355 = i8.trunc.i64 v153
      nextln:   v1356 = i8.unsigned_from_bits v1355
      nextln:   jump addr_0_block_24
      check: addr_0_block_24: // preds: addr_0_block_22 addr_0_block_23
      check: addr_0_block_25: // preds: addr_0_block_20
      nextln:   store.i64 v153, v95
      nextln:   jump addr_0_block_26
      check: addr_0_block_26: // preds: addr_0_block_21 addr_0_block_25
      check: addr_0_block_27: // preds: addr_0_block_13
      nextln:   jump addr_0_block_28(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_28(v154: i8, v155: i1, v156: i16, v157: i8, v158: bool, v159: bool, v160: bool, v161: int, v162: i64, v163: i8, v164: i8, v165: i52, v166: i1, v167: bool, v168: bool, v169: int, v170: i1, v171: bool, v172: i4, v173: i2, v174: i4, v175: i8, v176: i8, v177: i2, v178: i2, v179: bool, v180: i2, v181: i2, v182: bool, v183: bool, v184: bool, v185: bool, v186: i52, v187: i1, v188: i64, v189: i2, v190: bool): // preds: addr_0_block_14 addr_0_block_27
      nextln:   v191 = bool.icmp.i8.ne v99, 0x0
      nextln:   v192 = bool.bitwise_not v191
      nextln:   v193 = bool.and v192, 0x1
      nextln:   v194 = bool.icmp.i8.ne v99, 0x0
      nextln:   v195 = bool.bitwise_not v194
      nextln:   v196 = bool.and 0x1, v195
      nextln:   jumpif v196, addr_0_block_29, addr_0_block_30
      check: addr_0_block_29: // preds: addr_0_block_28
      nextln:   jump addr_0_block_31
      check: addr_0_block_30: // preds: addr_0_block_28
      nextln:   jump addr_0_block_31
      check: addr_0_block_31: // preds: addr_0_block_29 addr_0_block_30
      nextln:   v197 = bool.icmp.i8.ne v99, 0x0
      nextln:   jumpif v197, addr_0_block_32, addr_0_block_33
      check: addr_0_block_32: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_33: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_34: // preds: addr_0_block_32 addr_0_block_33
      nextln:   v198 = i52.unsigned_from_bits v122
      nextln:   v199 = int.modulo v198, 0x1
      nextln:   v200 = int.sub v198, v199
      nextln:   v201 = i52.to_bits v200
      nextln:   v202 = bool.icmp.i52.eq v122, v201
      nextln:   v203 = i8.load v122
      nextln:   v204 = i8.lshl v203, 0x0
      nextln:   v205 = i64.or 0x0, v204
      nextln:   v206 = bool.bitwise_not v6
      nextln:   jumpif v206, addr_0_block_35, addr_0_block_36
      check: addr_0_block_35: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37(v6, 0xc)
      check: addr_0_block_36: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37(v6, 0x0)
      check: addr_0_block_37(v207: i64, v208: i8): // preds: addr_0_block_35 addr_0_block_36
      nextln:   v209 = i64.wrapping_add v1, 0x1
      nextln:   v210 = i64.unsigned_from_bits v209
      nextln:   v211 = int.modulo v210, 0x1
      nextln:   v212 = int.sub v210, v211
      nextln:   v213 = i64.to_bits v212
      nextln:   v214 = bool.icmp.i64.eq v209, v213
      nextln:   v215 = i64.lshr v209, 0x30
      nextln:   v216 = i16.trunc.i64 v215
      nextln:   v217 = bool.icmp.i16.eq v216, 0x0
      nextln:   v218 = bool.bitwise_not v217
      nextln:   jumpif v218, addr_0_block_38, addr_0_block_39
      check: addr_0_block_38: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_41(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_39: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_40(v1337: i52, v1338: int, v1339: bool, v1340: bool): // preds: addr_0_block_39
      nextln:   v1341 = i52.trunc.i64 v209
      nextln:   jump addr_0_block_41(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1341, 0x1, 0x0)
      check: addr_0_block_41(v219: i3, v220: i1, v221: i1, v222: i1, v223: i1, v224: i4, v225: i1, v226: bool, v227: int, v228: int, v229: bool, v230: bool, v231: i8, v232: i8, v233: i52, v234: i1, v235: bool, v236: bool, v237: int, v238: i1, v239: bool, v240: i4, v241: i2, v242: i4, v243: i8, v244: i8, v245: i2, v246: i2, v247: bool, v248: i2, v249: i2, v250: bool, v251: bool, v252: bool, v253: bool, v254: i52, v255: i1, v256: i64, v257: i1, v258: i8, v259: i8, v260: i52, v261: i1, v262: bool, v263: bool, v264: int, v265: i1, v266: bool, v267: i4, v268: i2, v269: i4, v270: i8, v271: i8, v272: i2, v273: i2, v274: bool, v275: i2, v276: i2, v277: bool, v278: bool, v279: bool, v280: bool, v281: i52, v282: i1, v283: i64): // preds: addr_0_block_38 addr_0_block_40
      nextln:   v284 = bool.icmp.i8.ne v258, 0x0
      nextln:   v285 = bool.bitwise_not v284
      nextln:   v286 = bool.bitwise_not v6
      nextln:   v287 = bool.and v286, 0x1
      nextln:   v288 = bool.or v287, 0x0
      nextln:   v289 = bool.icmp.i8.ne v258, 0x0
      nextln:   v290 = bool.bitwise_not v289
      nextln:   v291 = bool.and v288, v290
      nextln:   v292 = bool.icmp.i8.eq v270, 0x1
      nextln:   v293 = bool.and v291, v292
      nextln:   jumpif v293, addr_0_block_42, addr_0_block_43
      check: addr_0_block_42: // preds: addr_0_block_41
      nextln:   jump addr_0_block_44
      check: addr_0_block_43: // preds: addr_0_block_41
      nextln:   jump addr_0_block_44
      check: addr_0_block_44: // preds: addr_0_block_42 addr_0_block_43
      nextln:   v294 = bool.icmp.i8.ne v258, 0x0
      nextln:   v295 = bool.bitwise_not v294
      nextln:   v296 = bool.icmp.i8.ne v258, 0x0
      nextln:   v297 = bool.bitwise_not v296
      nextln:   v298 = bool.icmp.i8.eq v270, 0x1
      nextln:   v299 = bool.and v297, v298
      nextln:   jumpif v229, addr_0_block_45, addr_0_block_46
      check: addr_0_block_45: // preds: addr_0_block_44
      nextln:   v300 = bool.icmp.i8.eq v258, 0x0
      nextln:   jump addr_0_block_47(0x1)
      check: addr_0_block_46: // preds: addr_0_block_44
      nextln:   jump addr_0_block_47(0x0)
      check: addr_0_block_47(v301: bool): // preds: addr_0_block_45 addr_0_block_46
      nextln:   v302 = bool.icmp.i8.eq v258, 0x0
      nextln:   v303 = bool.and v230, v302
      nextln:   jumpif v303, addr_0_block_48, addr_0_block_49
      check: addr_0_block_48: // preds: addr_0_block_47
      nextln:   jump addr_0_block_50(0x0, 0x0)
      check: addr_0_block_49: // preds: addr_0_block_47
      nextln:   jump addr_0_block_50(0x0, 0x0)
      check: addr_0_block_50(v304: bool, v305: bool): // preds: addr_0_block_48 addr_0_block_49
      nextln:   v306 = bool.or v301, v304
      nextln:   jumpif v306, addr_0_block_51, addr_0_block_64
      check: addr_0_block_51: // preds: addr_0_block_50
      nextln:   v307 = i52.unsigned_from_bits v254
      nextln:   v308 = int.modulo v307, 0x8
      nextln:   v309 = int.sub v307, v308
      nextln:   v310 = i52.to_bits v309
      nextln:   v311 = bool.icmp.i52.eq v254, v310
      nextln:   v312 = i64.load v254
      nextln:   jumpif v301, addr_0_block_52, addr_0_block_53
      nextln:   jump addr_0_block_65(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v312, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242, v243, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, 0x0, 0x0)
      check: addr_0_block_52: // no preds!
      nextln:   jump addr_0_block_54
      check: addr_0_block_53: // no preds!
      nextln:   jump addr_0_block_54
      check: addr_0_block_54: // preds: addr_0_block_52 addr_0_block_53
      nextln:   jumpif v304, addr_0_block_55, addr_0_block_56
      check: addr_0_block_55: // preds: addr_0_block_54
      nextln:   jump addr_0_block_57
      check: addr_0_block_56: // preds: addr_0_block_54
      nextln:   jump addr_0_block_57
      check: addr_0_block_57: // preds: addr_0_block_55 addr_0_block_56
      nextln:   v1357 = i52.unsigned_from_bits v254
      nextln:   v1358 = int.modulo v1357, 0x8
      nextln:   v1359 = int.sub v1357, v1358
      nextln:   v1360 = i52.to_bits v1359
      nextln:   v1361 = bool.icmp.i52.eq v254, v1360
      nextln:   v1362 = bool.icmp.i52.eq v254, 0x13000000
      nextln:   jumpif v1362, addr_0_block_58, addr_0_block_62
      check: addr_0_block_58: // preds: addr_0_block_57
      nextln:   v1363 = i64.unsigned_from_bits v312
      nextln:   v1364 = bool.icmp.int.eq v1363, 0x4
      nextln:   jumpif v1364, addr_0_block_59, addr_0_block_60
      nextln:   jump addr_0_block_63
      check: addr_0_block_59: // no preds!
      nextln:   jump addr_0_block_61
      check: addr_0_block_60: // no preds!
      nextln:   v1365 = i8.trunc.i64 v312
      nextln:   v1366 = i8.unsigned_from_bits v1365
      nextln:   jump addr_0_block_61
      check: addr_0_block_61: // preds: addr_0_block_59 addr_0_block_60
      check: addr_0_block_62: // preds: addr_0_block_57
      nextln:   store.i64 v312, v254
      nextln:   jump addr_0_block_63
      check: addr_0_block_63: // preds: addr_0_block_58 addr_0_block_62
      check: addr_0_block_64: // preds: addr_0_block_50
      nextln:   jump addr_0_block_65(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_65(v313: i8, v314: i1, v315: i16, v316: i8, v317: bool, v318: bool, v319: bool, v320: int, v321: i64, v322: i8, v323: i8, v324: i52, v325: i1, v326: bool, v327: bool, v328: int, v329: i1, v330: bool, v331: i4, v332: i2, v333: i4, v334: i8, v335: i8, v336: i2, v337: i2, v338: bool, v339: i2, v340: i2, v341: bool, v342: bool, v343: bool, v344: bool, v345: i52, v346: i1, v347: i64, v348: i2, v349: bool): // preds: addr_0_block_51 addr_0_block_64
      nextln:   v350 = bool.icmp.i8.ne v258, 0x0
      nextln:   v351 = bool.bitwise_not v350
      nextln:   v352 = bool.and v351, 0x1
      nextln:   v353 = bool.icmp.i8.ne v258, 0x0
      nextln:   v354 = bool.bitwise_not v353
      nextln:   v355 = bool.and 0x1, v354
      nextln:   jumpif v355, addr_0_block_66, addr_0_block_67
      check: addr_0_block_66: // preds: addr_0_block_65
      nextln:   jump addr_0_block_68
      check: addr_0_block_67: // preds: addr_0_block_65
      nextln:   jump addr_0_block_68
      check: addr_0_block_68: // preds: addr_0_block_66 addr_0_block_67
      nextln:   v356 = bool.icmp.i8.ne v258, 0x0
      nextln:   jumpif v356, addr_0_block_69, addr_0_block_70
      check: addr_0_block_69: // preds: addr_0_block_68
      nextln:   jump addr_0_block_71
      check: addr_0_block_70: // preds: addr_0_block_68
      nextln:   jump addr_0_block_71
      check: addr_0_block_71: // preds: addr_0_block_69 addr_0_block_70
      nextln:   v357 = i52.unsigned_from_bits v281
      nextln:   v358 = int.modulo v357, 0x1
      nextln:   v359 = int.sub v357, v358
      nextln:   v360 = i52.to_bits v359
      nextln:   v361 = bool.icmp.i52.eq v281, v360
      nextln:   v362 = i8.load v281
      nextln:   v363 = i8.lshl v362, 0x8
      nextln:   v364 = i64.or 0x0, v363
      nextln:   v365 = i64.wrapping_add v1, 0x2
      nextln:   v366 = i64.unsigned_from_bits v365
      nextln:   v367 = int.modulo v366, 0x1
      nextln:   v368 = int.sub v366, v367
      nextln:   v369 = i64.to_bits v368
      nextln:   v370 = bool.icmp.i64.eq v365, v369
      nextln:   v371 = i64.lshr v365, 0x30
      nextln:   v372 = i16.trunc.i64 v371
      nextln:   v373 = bool.icmp.i16.eq v372, 0x0
      nextln:   v374 = bool.bitwise_not v373
      nextln:   jumpif v374, addr_0_block_72, addr_0_block_73
      check: addr_0_block_72: // preds: addr_0_block_71
      nextln:   jump addr_0_block_74(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_75(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_73: // preds: addr_0_block_71
      nextln:   jump addr_0_block_74(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_74(v1332: i52, v1333: int, v1334: bool, v1335: bool): // preds: addr_0_block_73
      nextln:   v1336 = i52.trunc.i64 v365
      nextln:   jump addr_0_block_75(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1336, 0x1, 0x0)
      check: addr_0_block_75(v375: i3, v376: i1, v377: i1, v378: i1, v379: i1, v380: i4, v381: i1, v382: bool, v383: int, v384: int, v385: bool, v386: bool, v387: i8, v388: i8, v389: i52, v390: i1, v391: bool, v392: bool, v393: int, v394: i1, v395: bool, v396: i4, v397: i2, v398: i4, v399: i8, v400: i8, v401: i2, v402: i2, v403: bool, v404: i2, v405: i2, v406: bool, v407: bool, v408: bool, v409: bool, v410: i52, v411: i1, v412: i64, v413: i1, v414: i8, v415: i8, v416: i52, v417: i1, v418: bool, v419: bool, v420: int, v421: i1, v422: bool, v423: i4, v424: i2, v425: i4, v426: i8, v427: i8, v428: i2, v429: i2, v430: bool, v431: i2, v432: i2, v433: bool, v434: bool, v435: bool, v436: bool, v437: i52, v438: i1, v439: i64): // preds: addr_0_block_72 addr_0_block_74
      nextln:   v440 = bool.icmp.i8.ne v414, 0x0
      nextln:   v441 = bool.bitwise_not v440
      nextln:   v442 = bool.bitwise_not v6
      nextln:   v443 = bool.and v442, 0x1
      nextln:   v444 = bool.or v443, 0x0
      nextln:   v445 = bool.icmp.i8.ne v414, 0x0
      nextln:   v446 = bool.bitwise_not v445
      nextln:   v447 = bool.and v444, v446
      nextln:   v448 = bool.icmp.i8.eq v426, 0x1
      nextln:   v449 = bool.and v447, v448
      nextln:   jumpif v449, addr_0_block_76, addr_0_block_77
      check: addr_0_block_76: // preds: addr_0_block_75
      nextln:   jump addr_0_block_78
      check: addr_0_block_77: // preds: addr_0_block_75
      nextln:   jump addr_0_block_78
      check: addr_0_block_78: // preds: addr_0_block_76 addr_0_block_77
      nextln:   v450 = bool.icmp.i8.ne v414, 0x0
      nextln:   v451 = bool.bitwise_not v450
      nextln:   v452 = bool.icmp.i8.ne v414, 0x0
      nextln:   v453 = bool.bitwise_not v452
      nextln:   v454 = bool.icmp.i8.eq v426, 0x1
      nextln:   v455 = bool.and v453, v454
      nextln:   jumpif v385, addr_0_block_79, addr_0_block_80
      check: addr_0_block_79: // preds: addr_0_block_78
      nextln:   v456 = bool.icmp.i8.eq v414, 0x0
      nextln:   jump addr_0_block_81(0x1)
      check: addr_0_block_80: // preds: addr_0_block_78
      nextln:   jump addr_0_block_81(0x0)
      check: addr_0_block_81(v457: bool): // preds: addr_0_block_79 addr_0_block_80
      nextln:   v458 = bool.icmp.i8.eq v414, 0x0
      nextln:   v459 = bool.and v386, v458
      nextln:   jumpif v459, addr_0_block_82, addr_0_block_83
      check: addr_0_block_82: // preds: addr_0_block_81
      nextln:   jump addr_0_block_84(0x0, 0x0)
      check: addr_0_block_83: // preds: addr_0_block_81
      nextln:   jump addr_0_block_84(0x0, 0x0)
      check: addr_0_block_84(v460: bool, v461: bool): // preds: addr_0_block_82 addr_0_block_83
      nextln:   v462 = bool.or v457, v460
      nextln:   jumpif v462, addr_0_block_85, addr_0_block_98
      check: addr_0_block_85: // preds: addr_0_block_84
      nextln:   v463 = i52.unsigned_from_bits v410
      nextln:   v464 = int.modulo v463, 0x8
      nextln:   v465 = int.sub v463, v464
      nextln:   v466 = i52.to_bits v465
      nextln:   v467 = bool.icmp.i52.eq v410, v466
      nextln:   v468 = i64.load v410
      nextln:   jumpif v457, addr_0_block_86, addr_0_block_87
      nextln:   jump addr_0_block_99(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v468, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, v397, v398, v399, v400, v401, v402, v403, v404, v405, v406, v407, v408, v409, v410, v411, v412, 0x0, 0x0)
      check: addr_0_block_86: // no preds!
      nextln:   jump addr_0_block_88
      check: addr_0_block_87: // no preds!
      nextln:   jump addr_0_block_88
      check: addr_0_block_88: // preds: addr_0_block_86 addr_0_block_87
      nextln:   jumpif v460, addr_0_block_89, addr_0_block_90
      check: addr_0_block_89: // preds: addr_0_block_88
      nextln:   jump addr_0_block_91
      check: addr_0_block_90: // preds: addr_0_block_88
      nextln:   jump addr_0_block_91
      check: addr_0_block_91: // preds: addr_0_block_89 addr_0_block_90
      nextln:   v1367 = i52.unsigned_from_bits v410
      nextln:   v1368 = int.modulo v1367, 0x8
      nextln:   v1369 = int.sub v1367, v1368
      nextln:   v1370 = i52.to_bits v1369
      nextln:   v1371 = bool.icmp.i52.eq v410, v1370
      nextln:   v1372 = bool.icmp.i52.eq v410, 0x13000000
      nextln:   jumpif v1372, addr_0_block_92, addr_0_block_96
      check: addr_0_block_92: // preds: addr_0_block_91
      nextln:   v1373 = i64.unsigned_from_bits v468
      nextln:   v1374 = bool.icmp.int.eq v1373, 0x4
      nextln:   jumpif v1374, addr_0_block_93, addr_0_block_94
      nextln:   jump addr_0_block_97
      check: addr_0_block_93: // no preds!
      nextln:   jump addr_0_block_95
      check: addr_0_block_94: // no preds!
      nextln:   v1375 = i8.trunc.i64 v468
      nextln:   v1376 = i8.unsigned_from_bits v1375
      nextln:   jump addr_0_block_95
      check: addr_0_block_95: // preds: addr_0_block_93 addr_0_block_94
      check: addr_0_block_96: // preds: addr_0_block_91
      nextln:   store.i64 v468, v410
      nextln:   jump addr_0_block_97
      check: addr_0_block_97: // preds: addr_0_block_92 addr_0_block_96
      check: addr_0_block_98: // preds: addr_0_block_84
      nextln:   jump addr_0_block_99(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_99(v469: i8, v470: i1, v471: i16, v472: i8, v473: bool, v474: bool, v475: bool, v476: int, v477: i64, v478: i8, v479: i8, v480: i52, v481: i1, v482: bool, v483: bool, v484: int, v485: i1, v486: bool, v487: i4, v488: i2, v489: i4, v490: i8, v491: i8, v492: i2, v493: i2, v494: bool, v495: i2, v496: i2, v497: bool, v498: bool, v499: bool, v500: bool, v501: i52, v502: i1, v503: i64, v504: i2, v505: bool): // preds: addr_0_block_85 addr_0_block_98
      nextln:   v506 = bool.icmp.i8.ne v414, 0x0
      nextln:   v507 = bool.bitwise_not v506
      nextln:   v508 = bool.and v507, 0x1
      nextln:   v509 = bool.icmp.i8.ne v414, 0x0
      nextln:   v510 = bool.bitwise_not v509
      nextln:   v511 = bool.and 0x1, v510
      nextln:   jumpif v511, addr_0_block_100, addr_0_block_101
      check: addr_0_block_100: // preds: addr_0_block_99
      nextln:   jump addr_0_block_102
      check: addr_0_block_101: // preds: addr_0_block_99
      nextln:   jump addr_0_block_102
      check: addr_0_block_102: // preds: addr_0_block_100 addr_0_block_101
      nextln:   v512 = bool.icmp.i8.ne v414, 0x0
      nextln:   jumpif v512, addr_0_block_103, addr_0_block_104
      check: addr_0_block_103: // preds: addr_0_block_102
      nextln:   jump addr_0_block_105
      check: addr_0_block_104: // preds: addr_0_block_102
      nextln:   jump addr_0_block_105
      check: addr_0_block_105: // preds: addr_0_block_103 addr_0_block_104
      nextln:   v513 = i52.unsigned_from_bits v437
      nextln:   v514 = int.modulo v513, 0x1
      nextln:   v515 = int.sub v513, v514
      nextln:   v516 = i52.to_bits v515
      nextln:   v517 = bool.icmp.i52.eq v437, v516
      nextln:   v518 = i8.load v437
      nextln:   v519 = i64.and v364, 0xffffffffff00ffff
      nextln:   v520 = i8.lshl v518, 0x10
      nextln:   v521 = i64.or v519, v520
      nextln:   v522 = i64.wrapping_add v1, 0x3
      nextln:   v523 = i64.unsigned_from_bits v522
      nextln:   v524 = int.modulo v523, 0x1
      nextln:   v525 = int.sub v523, v524
      nextln:   v526 = i64.to_bits v525
      nextln:   v527 = bool.icmp.i64.eq v522, v526
      nextln:   v528 = i64.lshr v522, 0x30
      nextln:   v529 = i16.trunc.i64 v528
      nextln:   v530 = bool.icmp.i16.eq v529, 0x0
      nextln:   v531 = bool.bitwise_not v530
      nextln:   jumpif v531, addr_0_block_106, addr_0_block_107
      check: addr_0_block_106: // preds: addr_0_block_105
      nextln:   jump addr_0_block_108(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_109(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_107: // preds: addr_0_block_105
      nextln:   jump addr_0_block_108(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_108(v1327: i52, v1328: int, v1329: bool, v1330: bool): // preds: addr_0_block_107
      nextln:   v1331 = i52.trunc.i64 v522
      nextln:   jump addr_0_block_109(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1331, 0x1, 0x0)
      check: addr_0_block_109(v532: i3, v533: i1, v534: i1, v535: i1, v536: i1, v537: i4, v538: i1, v539: bool, v540: int, v541: int, v542: bool, v543: bool, v544: i8, v545: i8, v546: i52, v547: i1, v548: bool, v549: bool, v550: int, v551: i1, v552: bool, v553: i4, v554: i2, v555: i4, v556: i8, v557: i8, v558: i2, v559: i2, v560: bool, v561: i2, v562: i2, v563: bool, v564: bool, v565: bool, v566: bool, v567: i52, v568: i1, v569: i64, v570: i1, v571: i8, v572: i8, v573: i52, v574: i1, v575: bool, v576: bool, v577: int, v578: i1, v579: bool, v580: i4, v581: i2, v582: i4, v583: i8, v584: i8, v585: i2, v586: i2, v587: bool, v588: i2, v589: i2, v590: bool, v591: bool, v592: bool, v593: bool, v594: i52, v595: i1, v596: i64): // preds: addr_0_block_106 addr_0_block_108
      nextln:   v597 = bool.icmp.i8.ne v571, 0x0
      nextln:   v598 = bool.bitwise_not v597
      nextln:   v599 = bool.bitwise_not v6
      nextln:   v600 = bool.and v599, 0x1
      nextln:   v601 = bool.or v600, 0x0
      nextln:   v602 = bool.icmp.i8.ne v571, 0x0
      nextln:   v603 = bool.bitwise_not v602
      nextln:   v604 = bool.and v601, v603
      nextln:   v605 = bool.icmp.i8.eq v583, 0x1
      nextln:   v606 = bool.and v604, v605
      nextln:   jumpif v606, addr_0_block_110, addr_0_block_111
      check: addr_0_block_110: // preds: addr_0_block_109
      nextln:   jump addr_0_block_112
      check: addr_0_block_111: // preds: addr_0_block_109
      nextln:   jump addr_0_block_112
      check: addr_0_block_112: // preds: addr_0_block_110 addr_0_block_111
      nextln:   v607 = bool.icmp.i8.ne v571, 0x0
      nextln:   v608 = bool.bitwise_not v607
      nextln:   v609 = bool.icmp.i8.ne v571, 0x0
      nextln:   v610 = bool.bitwise_not v609
      nextln:   v611 = bool.icmp.i8.eq v583, 0x1
      nextln:   v612 = bool.and v610, v611
      nextln:   jumpif v542, addr_0_block_113, addr_0_block_114
      check: addr_0_block_113: // preds: addr_0_block_112
      nextln:   v613 = bool.icmp.i8.eq v571, 0x0
      nextln:   jump addr_0_block_115(0x1)
      check: addr_0_block_114: // preds: addr_0_block_112
      nextln:   jump addr_0_block_115(0x0)
      check: addr_0_block_115(v614: bool): // preds: addr_0_block_113 addr_0_block_114
      nextln:   v615 = bool.icmp.i8.eq v571, 0x0
      nextln:   v616 = bool.and v543, v615
      nextln:   jumpif v616, addr_0_block_116, addr_0_block_117
      check: addr_0_block_116: // preds: addr_0_block_115
      nextln:   jump addr_0_block_118(0x0, 0x0)
      check: addr_0_block_117: // preds: addr_0_block_115
      nextln:   jump addr_0_block_118(0x0, 0x0)
      check: addr_0_block_118(v617: bool, v618: bool): // preds: addr_0_block_116 addr_0_block_117
      nextln:   v619 = bool.or v614, v617
      nextln:   jumpif v619, addr_0_block_119, addr_0_block_132
      check: addr_0_block_119: // preds: addr_0_block_118
      nextln:   v620 = i52.unsigned_from_bits v567
      nextln:   v621 = int.modulo v620, 0x8
      nextln:   v622 = int.sub v620, v621
      nextln:   v623 = i52.to_bits v622
      nextln:   v624 = bool.icmp.i52.eq v567, v623
      nextln:   v625 = i64.load v567
      nextln:   jumpif v614, addr_0_block_120, addr_0_block_121
      nextln:   jump addr_0_block_133(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v625, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v557, v558, v559, v560, v561, v562, v563, v564, v565, v566, v567, v568, v569, 0x0, 0x0)
      check: addr_0_block_120: // no preds!
      nextln:   jump addr_0_block_122
      check: addr_0_block_121: // no preds!
      nextln:   jump addr_0_block_122
      check: addr_0_block_122: // preds: addr_0_block_120 addr_0_block_121
      nextln:   jumpif v617, addr_0_block_123, addr_0_block_124
      check: addr_0_block_123: // preds: addr_0_block_122
      nextln:   jump addr_0_block_125
      check: addr_0_block_124: // preds: addr_0_block_122
      nextln:   jump addr_0_block_125
      check: addr_0_block_125: // preds: addr_0_block_123 addr_0_block_124
      nextln:   v1377 = i52.unsigned_from_bits v567
      nextln:   v1378 = int.modulo v1377, 0x8
      nextln:   v1379 = int.sub v1377, v1378
      nextln:   v1380 = i52.to_bits v1379
      nextln:   v1381 = bool.icmp.i52.eq v567, v1380
      nextln:   v1382 = bool.icmp.i52.eq v567, 0x13000000
      nextln:   jumpif v1382, addr_0_block_126, addr_0_block_130
      check: addr_0_block_126: // preds: addr_0_block_125
      nextln:   v1383 = i64.unsigned_from_bits v625
      nextln:   v1384 = bool.icmp.int.eq v1383, 0x4
      nextln:   jumpif v1384, addr_0_block_127, addr_0_block_128
      nextln:   jump addr_0_block_131
      check: addr_0_block_127: // no preds!
      nextln:   jump addr_0_block_129
      check: addr_0_block_128: // no preds!
      nextln:   v1385 = i8.trunc.i64 v625
      nextln:   v1386 = i8.unsigned_from_bits v1385
      nextln:   jump addr_0_block_129
      check: addr_0_block_129: // preds: addr_0_block_127 addr_0_block_128
      check: addr_0_block_130: // preds: addr_0_block_125
      nextln:   store.i64 v625, v567
      nextln:   jump addr_0_block_131
      check: addr_0_block_131: // preds: addr_0_block_126 addr_0_block_130
      check: addr_0_block_132: // preds: addr_0_block_118
      nextln:   jump addr_0_block_133(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_133(v626: i8, v627: i1, v628: i16, v629: i8, v630: bool, v631: bool, v632: bool, v633: int, v634: i64, v635: i8, v636: i8, v637: i52, v638: i1, v639: bool, v640: bool, v641: int, v642: i1, v643: bool, v644: i4, v645: i2, v646: i4, v647: i8, v648: i8, v649: i2, v650: i2, v651: bool, v652: i2, v653: i2, v654: bool, v655: bool, v656: bool, v657: bool, v658: i52, v659: i1, v660: i64, v661: i2, v662: bool): // preds: addr_0_block_119 addr_0_block_132
      nextln:   v663 = bool.icmp.i8.ne v571, 0x0
      nextln:   v664 = bool.bitwise_not v663
      nextln:   v665 = bool.and v664, 0x1
      nextln:   v666 = bool.icmp.i8.ne v571, 0x0
      nextln:   v667 = bool.bitwise_not v666
      nextln:   v668 = bool.and 0x1, v667
      nextln:   jumpif v668, addr_0_block_134, addr_0_block_135
      check: addr_0_block_134: // preds: addr_0_block_133
      nextln:   jump addr_0_block_136
      check: addr_0_block_135: // preds: addr_0_block_133
      nextln:   jump addr_0_block_136
      check: addr_0_block_136: // preds: addr_0_block_134 addr_0_block_135
      nextln:   v669 = bool.icmp.i8.ne v571, 0x0
      nextln:   jumpif v669, addr_0_block_137, addr_0_block_138
      check: addr_0_block_137: // preds: addr_0_block_136
      nextln:   jump addr_0_block_139
      check: addr_0_block_138: // preds: addr_0_block_136
      nextln:   jump addr_0_block_139
      check: addr_0_block_139: // preds: addr_0_block_137 addr_0_block_138
      nextln:   v670 = i52.unsigned_from_bits v594
      nextln:   v671 = int.modulo v670, 0x1
      nextln:   v672 = int.sub v670, v671
      nextln:   v673 = i52.to_bits v672
      nextln:   v674 = bool.icmp.i52.eq v594, v673
      nextln:   v675 = i8.load v594
      nextln:   v676 = i64.and v521, 0xffffffff00ffffff
      nextln:   v677 = i8.lshl v675, 0x18
      nextln:   v678 = i64.or v676, v677
      nextln:   v679 = i64.wrapping_add v1, 0x4
      nextln:   v680 = i64.unsigned_from_bits v679
      nextln:   v681 = int.modulo v680, 0x1
      nextln:   v682 = int.sub v680, v681
      nextln:   v683 = i64.to_bits v682
      nextln:   v684 = bool.icmp.i64.eq v679, v683
      nextln:   v685 = i64.lshr v679, 0x30
      nextln:   v686 = i16.trunc.i64 v685
      nextln:   v687 = bool.icmp.i16.eq v686, 0x0
      nextln:   v688 = bool.bitwise_not v687
      nextln:   jumpif v688, addr_0_block_140, addr_0_block_141
      check: addr_0_block_140: // preds: addr_0_block_139
      nextln:   jump addr_0_block_142(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_143(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_141: // preds: addr_0_block_139
      nextln:   jump addr_0_block_142(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_142(v1322: i52, v1323: int, v1324: bool, v1325: bool): // preds: addr_0_block_141
      nextln:   v1326 = i52.trunc.i64 v679
      nextln:   jump addr_0_block_143(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1326, 0x1, 0x0)
      check: addr_0_block_143(v689: i3, v690: i1, v691: i1, v692: i1, v693: i1, v694: i4, v695: i1, v696: bool, v697: int, v698: int, v699: bool, v700: bool, v701: i8, v702: i8, v703: i52, v704: i1, v705: bool, v706: bool, v707: int, v708: i1, v709: bool, v710: i4, v711: i2, v712: i4, v713: i8, v714: i8, v715: i2, v716: i2, v717: bool, v718: i2, v719: i2, v720: bool, v721: bool, v722: bool, v723: bool, v724: i52, v725: i1, v726: i64, v727: i1, v728: i8, v729: i8, v730: i52, v731: i1, v732: bool, v733: bool, v734: int, v735: i1, v736: bool, v737: i4, v738: i2, v739: i4, v740: i8, v741: i8, v742: i2, v743: i2, v744: bool, v745: i2, v746: i2, v747: bool, v748: bool, v749: bool, v750: bool, v751: i52, v752: i1, v753: i64): // preds: addr_0_block_140 addr_0_block_142
      nextln:   v754 = bool.icmp.i8.ne v728, 0x0
      nextln:   v755 = bool.bitwise_not v754
      nextln:   v756 = bool.bitwise_not v6
      nextln:   v757 = bool.and v756, 0x1
      nextln:   v758 = bool.or v757, 0x0
      nextln:   v759 = bool.icmp.i8.ne v728, 0x0
      nextln:   v760 = bool.bitwise_not v759
      nextln:   v761 = bool.and v758, v760
      nextln:   v762 = bool.icmp.i8.eq v740, 0x1
      nextln:   v763 = bool.and v761, v762
      nextln:   jumpif v763, addr_0_block_144, addr_0_block_145
      check: addr_0_block_144: // preds: addr_0_block_143
      nextln:   jump addr_0_block_146
      check: addr_0_block_145: // preds: addr_0_block_143
      nextln:   jump addr_0_block_146
      check: addr_0_block_146: // preds: addr_0_block_144 addr_0_block_145
      nextln:   v764 = bool.icmp.i8.ne v728, 0x0
      nextln:   v765 = bool.bitwise_not v764
      nextln:   v766 = bool.icmp.i8.ne v728, 0x0
      nextln:   v767 = bool.bitwise_not v766
      nextln:   v768 = bool.icmp.i8.eq v740, 0x1
      nextln:   v769 = bool.and v767, v768
      nextln:   jumpif v699, addr_0_block_147, addr_0_block_148
      check: addr_0_block_147: // preds: addr_0_block_146
      nextln:   v770 = bool.icmp.i8.eq v728, 0x0
      nextln:   jump addr_0_block_149(0x1)
      check: addr_0_block_148: // preds: addr_0_block_146
      nextln:   jump addr_0_block_149(0x0)
      check: addr_0_block_149(v771: bool): // preds: addr_0_block_147 addr_0_block_148
      nextln:   v772 = bool.icmp.i8.eq v728, 0x0
      nextln:   v773 = bool.and v700, v772
      nextln:   jumpif v773, addr_0_block_150, addr_0_block_151
      check: addr_0_block_150: // preds: addr_0_block_149
      nextln:   jump addr_0_block_152(0x0, 0x0)
      check: addr_0_block_151: // preds: addr_0_block_149
      nextln:   jump addr_0_block_152(0x0, 0x0)
      check: addr_0_block_152(v774: bool, v775: bool): // preds: addr_0_block_150 addr_0_block_151
      nextln:   v776 = bool.or v771, v774
      nextln:   jumpif v776, addr_0_block_153, addr_0_block_166
      check: addr_0_block_153: // preds: addr_0_block_152
      nextln:   v777 = i52.unsigned_from_bits v724
      nextln:   v778 = int.modulo v777, 0x8
      nextln:   v779 = int.sub v777, v778
      nextln:   v780 = i52.to_bits v779
      nextln:   v781 = bool.icmp.i52.eq v724, v780
      nextln:   v782 = i64.load v724
      nextln:   jumpif v771, addr_0_block_154, addr_0_block_155
      nextln:   jump addr_0_block_167(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v782, v701, v702, v703, v704, v705, v706, v707, v708, v709, v710, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, 0x0, 0x0)
      check: addr_0_block_154: // no preds!
      nextln:   jump addr_0_block_156
      check: addr_0_block_155: // no preds!
      nextln:   jump addr_0_block_156
      check: addr_0_block_156: // preds: addr_0_block_154 addr_0_block_155
      nextln:   jumpif v774, addr_0_block_157, addr_0_block_158
      check: addr_0_block_157: // preds: addr_0_block_156
      nextln:   jump addr_0_block_159
      check: addr_0_block_158: // preds: addr_0_block_156
      nextln:   jump addr_0_block_159
      check: addr_0_block_159: // preds: addr_0_block_157 addr_0_block_158
      nextln:   v1387 = i52.unsigned_from_bits v724
      nextln:   v1388 = int.modulo v1387, 0x8
      nextln:   v1389 = int.sub v1387, v1388
      nextln:   v1390 = i52.to_bits v1389
      nextln:   v1391 = bool.icmp.i52.eq v724, v1390
      nextln:   v1392 = bool.icmp.i52.eq v724, 0x13000000
      nextln:   jumpif v1392, addr_0_block_160, addr_0_block_164
      check: addr_0_block_160: // preds: addr_0_block_159
      nextln:   v1393 = i64.unsigned_from_bits v782
      nextln:   v1394 = bool.icmp.int.eq v1393, 0x4
      nextln:   jumpif v1394, addr_0_block_161, addr_0_block_162
      nextln:   jump addr_0_block_165
      check: addr_0_block_161: // no preds!
      nextln:   jump addr_0_block_163
      check: addr_0_block_162: // no preds!
      nextln:   v1395 = i8.trunc.i64 v782
      nextln:   v1396 = i8.unsigned_from_bits v1395
      nextln:   jump addr_0_block_163
      check: addr_0_block_163: // preds: addr_0_block_161 addr_0_block_162
      check: addr_0_block_164: // preds: addr_0_block_159
      nextln:   store.i64 v782, v724
      nextln:   jump addr_0_block_165
      check: addr_0_block_165: // preds: addr_0_block_160 addr_0_block_164
      check: addr_0_block_166: // preds: addr_0_block_152
      nextln:   jump addr_0_block_167(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_167(v783: i8, v784: i1, v785: i16, v786: i8, v787: bool, v788: bool, v789: bool, v790: int, v791: i64, v792: i8, v793: i8, v794: i52, v795: i1, v796: bool, v797: bool, v798: int, v799: i1, v800: bool, v801: i4, v802: i2, v803: i4, v804: i8, v805: i8, v806: i2, v807: i2, v808: bool, v809: i2, v810: i2, v811: bool, v812: bool, v813: bool, v814: bool, v815: i52, v816: i1, v817: i64, v818: i2, v819: bool): // preds: addr_0_block_153 addr_0_block_166
      nextln:   v820 = bool.icmp.i8.ne v728, 0x0
      nextln:   v821 = bool.bitwise_not v820
      nextln:   v822 = bool.and v821, 0x1
      nextln:   v823 = bool.icmp.i8.ne v728, 0x0
      nextln:   v824 = bool.bitwise_not v823
      nextln:   v825 = bool.and 0x1, v824
      nextln:   jumpif v825, addr_0_block_168, addr_0_block_169
      check: addr_0_block_168: // preds: addr_0_block_167
      nextln:   jump addr_0_block_170
      check: addr_0_block_169: // preds: addr_0_block_167
      nextln:   jump addr_0_block_170
      check: addr_0_block_170: // preds: addr_0_block_168 addr_0_block_169
      nextln:   v826 = bool.icmp.i8.ne v728, 0x0
      nextln:   jumpif v826, addr_0_block_171, addr_0_block_172
      check: addr_0_block_171: // preds: addr_0_block_170
      nextln:   jump addr_0_block_173
      check: addr_0_block_172: // preds: addr_0_block_170
      nextln:   jump addr_0_block_173
      check: addr_0_block_173: // preds: addr_0_block_171 addr_0_block_172
      nextln:   v827 = i52.unsigned_from_bits v751
      nextln:   v828 = int.modulo v827, 0x1
      nextln:   v829 = int.sub v827, v828
      nextln:   v830 = i52.to_bits v829
      nextln:   v831 = bool.icmp.i52.eq v751, v830
      nextln:   v832 = i8.load v751
      nextln:   v833 = i64.and v678, 0xffffff00ffffffff
      nextln:   v834 = i8.lshl v832, 0x20
      nextln:   v835 = i64.or v833, v834
      nextln:   v836 = i64.wrapping_add v1, 0x5
      nextln:   v837 = i64.unsigned_from_bits v836
      nextln:   v838 = int.modulo v837, 0x1
      nextln:   v839 = int.sub v837, v838
      nextln:   v840 = i64.to_bits v839
      nextln:   v841 = bool.icmp.i64.eq v836, v840
      nextln:   v842 = i64.lshr v836, 0x30
      nextln:   v843 = i16.trunc.i64 v842
      nextln:   v844 = bool.icmp.i16.eq v843, 0x0
      nextln:   v845 = bool.bitwise_not v844
      nextln:   jumpif v845, addr_0_block_174, addr_0_block_175
      check: addr_0_block_174: // preds: addr_0_block_173
      nextln:   jump addr_0_block_176(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_177(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_175: // preds: addr_0_block_173
      nextln:   jump addr_0_block_176(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_176(v1317: i52, v1318: int, v1319: bool, v1320: bool): // preds: addr_0_block_175
      nextln:   v1321 = i52.trunc.i64 v836
      nextln:   jump addr_0_block_177(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1321, 0x1, 0x0)
      check: addr_0_block_177(v846: i3, v847: i1, v848: i1, v849: i1, v850: i1, v851: i4, v852: i1, v853: bool, v854: int, v855: int, v856: bool, v857: bool, v858: i8, v859: i8, v860: i52, v861: i1, v862: bool, v863: bool, v864: int, v865: i1, v866: bool, v867: i4, v868: i2, v869: i4, v870: i8, v871: i8, v872: i2, v873: i2, v874: bool, v875: i2, v876: i2, v877: bool, v878: bool, v879: bool, v880: bool, v881: i52, v882: i1, v883: i64, v884: i1, v885: i8, v886: i8, v887: i52, v888: i1, v889: bool, v890: bool, v891: int, v892: i1, v893: bool, v894: i4, v895: i2, v896: i4, v897: i8, v898: i8, v899: i2, v900: i2, v901: bool, v902: i2, v903: i2, v904: bool, v905: bool, v906: bool, v907: bool, v908: i52, v909: i1, v910: i64): // preds: addr_0_block_174 addr_0_block_176
      nextln:   v911 = bool.icmp.i8.ne v885, 0x0
      nextln:   v912 = bool.bitwise_not v911
      nextln:   v913 = bool.bitwise_not v6
      nextln:   v914 = bool.and v913, 0x1
      nextln:   v915 = bool.or v914, 0x0
      nextln:   v916 = bool.icmp.i8.ne v885, 0x0
      nextln:   v917 = bool.bitwise_not v916
      nextln:   v918 = bool.and v915, v917
      nextln:   v919 = bool.icmp.i8.eq v897, 0x1
      nextln:   v920 = bool.and v918, v919
      nextln:   jumpif v920, addr_0_block_178, addr_0_block_179
      check: addr_0_block_178: // preds: addr_0_block_177
      nextln:   jump addr_0_block_180
      check: addr_0_block_179: // preds: addr_0_block_177
      nextln:   jump addr_0_block_180
      check: addr_0_block_180: // preds: addr_0_block_178 addr_0_block_179
      nextln:   v921 = bool.icmp.i8.ne v885, 0x0
      nextln:   v922 = bool.bitwise_not v921
      nextln:   v923 = bool.icmp.i8.ne v885, 0x0
      nextln:   v924 = bool.bitwise_not v923
      nextln:   v925 = bool.icmp.i8.eq v897, 0x1
      nextln:   v926 = bool.and v924, v925
      nextln:   jumpif v856, addr_0_block_181, addr_0_block_182
      check: addr_0_block_181: // preds: addr_0_block_180
      nextln:   v927 = bool.icmp.i8.eq v885, 0x0
      nextln:   jump addr_0_block_183(0x1)
      check: addr_0_block_182: // preds: addr_0_block_180
      nextln:   jump addr_0_block_183(0x0)
      check: addr_0_block_183(v928: bool): // preds: addr_0_block_181 addr_0_block_182
      nextln:   v929 = bool.icmp.i8.eq v885, 0x0
      nextln:   v930 = bool.and v857, v929
      nextln:   jumpif v930, addr_0_block_184, addr_0_block_185
      check: addr_0_block_184: // preds: addr_0_block_183
      nextln:   jump addr_0_block_186(0x0, 0x0)
      check: addr_0_block_185: // preds: addr_0_block_183
      nextln:   jump addr_0_block_186(0x0, 0x0)
      check: addr_0_block_186(v931: bool, v932: bool): // preds: addr_0_block_184 addr_0_block_185
      nextln:   v933 = bool.or v928, v931
      nextln:   jumpif v933, addr_0_block_187, addr_0_block_200
      check: addr_0_block_187: // preds: addr_0_block_186
      nextln:   v934 = i52.unsigned_from_bits v881
      nextln:   v935 = int.modulo v934, 0x8
      nextln:   v936 = int.sub v934, v935
      nextln:   v937 = i52.to_bits v936
      nextln:   v938 = bool.icmp.i52.eq v881, v937
      nextln:   v939 = i64.load v881
      nextln:   jumpif v928, addr_0_block_188, addr_0_block_189
      nextln:   jump addr_0_block_201(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v939, v858, v859, v860, v861, v862, v863, v864, v865, v866, v867, v868, v869, v870, v871, v872, v873, v874, v875, v876, v877, v878, v879, v880, v881, v882, v883, 0x0, 0x0)
      check: addr_0_block_188: // no preds!
      nextln:   jump addr_0_block_190
      check: addr_0_block_189: // no preds!
      nextln:   jump addr_0_block_190
      check: addr_0_block_190: // preds: addr_0_block_188 addr_0_block_189
      nextln:   jumpif v931, addr_0_block_191, addr_0_block_192
      check: addr_0_block_191: // preds: addr_0_block_190
      nextln:   jump addr_0_block_193
      check: addr_0_block_192: // preds: addr_0_block_190
      nextln:   jump addr_0_block_193
      check: addr_0_block_193: // preds: addr_0_block_191 addr_0_block_192
      nextln:   v1397 = i52.unsigned_from_bits v881
      nextln:   v1398 = int.modulo v1397, 0x8
      nextln:   v1399 = int.sub v1397, v1398
      nextln:   v1400 = i52.to_bits v1399
      nextln:   v1401 = bool.icmp.i52.eq v881, v1400
      nextln:   v1402 = bool.icmp.i52.eq v881, 0x13000000
      nextln:   jumpif v1402, addr_0_block_194, addr_0_block_198
      check: addr_0_block_194: // preds: addr_0_block_193
      nextln:   v1403 = i64.unsigned_from_bits v939
      nextln:   v1404 = bool.icmp.int.eq v1403, 0x4
      nextln:   jumpif v1404, addr_0_block_195, addr_0_block_196
      nextln:   jump addr_0_block_199
      check: addr_0_block_195: // no preds!
      nextln:   jump addr_0_block_197
      check: addr_0_block_196: // no preds!
      nextln:   v1405 = i8.trunc.i64 v939
      nextln:   v1406 = i8.unsigned_from_bits v1405
      nextln:   jump addr_0_block_197
      check: addr_0_block_197: // preds: addr_0_block_195 addr_0_block_196
      check: addr_0_block_198: // preds: addr_0_block_193
      nextln:   store.i64 v939, v881
      nextln:   jump addr_0_block_199
      check: addr_0_block_199: // preds: addr_0_block_194 addr_0_block_198
      check: addr_0_block_200: // preds: addr_0_block_186
      nextln:   jump addr_0_block_201(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_201(v940: i8, v941: i1, v942: i16, v943: i8, v944: bool, v945: bool, v946: bool, v947: int, v948: i64, v949: i8, v950: i8, v951: i52, v952: i1, v953: bool, v954: bool, v955: int, v956: i1, v957: bool, v958: i4, v959: i2, v960: i4, v961: i8, v962: i8, v963: i2, v964: i2, v965: bool, v966: i2, v967: i2, v968: bool, v969: bool, v970: bool, v971: bool, v972: i52, v973: i1, v974: i64, v975: i2, v976: bool): // preds: addr_0_block_187 addr_0_block_200
      nextln:   v977 = bool.icmp.i8.ne v885, 0x0
      nextln:   v978 = bool.bitwise_not v977
      nextln:   v979 = bool.and v978, 0x1
      nextln:   v980 = bool.icmp.i8.ne v885, 0x0
      nextln:   v981 = bool.bitwise_not v980
      nextln:   v982 = bool.and 0x1, v981
      nextln:   jumpif v982, addr_0_block_202, addr_0_block_203
      check: addr_0_block_202: // preds: addr_0_block_201
      nextln:   jump addr_0_block_204
      check: addr_0_block_203: // preds: addr_0_block_201
      nextln:   jump addr_0_block_204
      check: addr_0_block_204: // preds: addr_0_block_202 addr_0_block_203
      nextln:   v983 = bool.icmp.i8.ne v885, 0x0
      nextln:   jumpif v983, addr_0_block_205, addr_0_block_206
      check: addr_0_block_205: // preds: addr_0_block_204
      nextln:   jump addr_0_block_207
      check: addr_0_block_206: // preds: addr_0_block_204
      nextln:   jump addr_0_block_207
      check: addr_0_block_207: // preds: addr_0_block_205 addr_0_block_206
      nextln:   v984 = i52.unsigned_from_bits v908
      nextln:   v985 = int.modulo v984, 0x1
      nextln:   v986 = int.sub v984, v985
      nextln:   v987 = i52.to_bits v986
      nextln:   v988 = bool.icmp.i52.eq v908, v987
      nextln:   v989 = i8.load v908
      nextln:   v990 = i64.and v835, 0xffff00ffffffffff
      nextln:   v991 = i8.lshl v989, 0x28
      nextln:   v992 = i64.or v990, v991
      nextln:   v993 = i64.wrapping_add v1, 0x6
      nextln:   v994 = i64.unsigned_from_bits v993
      nextln:   v995 = int.modulo v994, 0x1
      nextln:   v996 = int.sub v994, v995
      nextln:   v997 = i64.to_bits v996
      nextln:   v998 = bool.icmp.i64.eq v993, v997
      nextln:   v999 = i64.lshr v993, 0x30
      nextln:   v1000 = i16.trunc.i64 v999
      nextln:   v1001 = bool.icmp.i16.eq v1000, 0x0
      nextln:   v1002 = bool.bitwise_not v1001
      nextln:   jumpif v1002, addr_0_block_208, addr_0_block_209
      check: addr_0_block_208: // preds: addr_0_block_207
      nextln:   jump addr_0_block_210(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_211(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_209: // preds: addr_0_block_207
      nextln:   jump addr_0_block_210(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_210(v1312: i52, v1313: int, v1314: bool, v1315: bool): // preds: addr_0_block_209
      nextln:   v1316 = i52.trunc.i64 v993
      nextln:   jump addr_0_block_211(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1316, 0x1, 0x0)
      check: addr_0_block_211(v1003: i3, v1004: i1, v1005: i1, v1006: i1, v1007: i1, v1008: i4, v1009: i1, v1010: bool, v1011: int, v1012: int, v1013: bool, v1014: bool, v1015: i8, v1016: i8, v1017: i52, v1018: i1, v1019: bool, v1020: bool, v1021: int, v1022: i1, v1023: bool, v1024: i4, v1025: i2, v1026: i4, v1027: i8, v1028: i8, v1029: i2, v1030: i2, v1031: bool, v1032: i2, v1033: i2, v1034: bool, v1035: bool, v1036: bool, v1037: bool, v1038: i52, v1039: i1, v1040: i64, v1041: i1, v1042: i8, v1043: i8, v1044: i52, v1045: i1, v1046: bool, v1047: bool, v1048: int, v1049: i1, v1050: bool, v1051: i4, v1052: i2, v1053: i4, v1054: i8, v1055: i8, v1056: i2, v1057: i2, v1058: bool, v1059: i2, v1060: i2, v1061: bool, v1062: bool, v1063: bool, v1064: bool, v1065: i52, v1066: i1, v1067: i64): // preds: addr_0_block_208 addr_0_block_210
      nextln:   v1068 = bool.icmp.i8.ne v1042, 0x0
      nextln:   v1069 = bool.bitwise_not v1068
      nextln:   v1070 = bool.bitwise_not v6
      nextln:   v1071 = bool.and v1070, 0x1
      nextln:   v1072 = bool.or v1071, 0x0
      nextln:   v1073 = bool.icmp.i8.ne v1042, 0x0
      nextln:   v1074 = bool.bitwise_not v1073
      nextln:   v1075 = bool.and v1072, v1074
      nextln:   v1076 = bool.icmp.i8.eq v1054, 0x1
      nextln:   v1077 = bool.and v1075, v1076
      nextln:   jumpif v1077, addr_0_block_212, addr_0_block_213
      check: addr_0_block_212: // preds: addr_0_block_211
      nextln:   jump addr_0_block_214
      check: addr_0_block_213: // preds: addr_0_block_211
      nextln:   jump addr_0_block_214
      check: addr_0_block_214: // preds: addr_0_block_212 addr_0_block_213
      nextln:   v1078 = bool.icmp.i8.ne v1042, 0x0
      nextln:   v1079 = bool.bitwise_not v1078
      nextln:   v1080 = bool.icmp.i8.ne v1042, 0x0
      nextln:   v1081 = bool.bitwise_not v1080
      nextln:   v1082 = bool.icmp.i8.eq v1054, 0x1
      nextln:   v1083 = bool.and v1081, v1082
      nextln:   jumpif v1013, addr_0_block_215, addr_0_block_216
      check: addr_0_block_215: // preds: addr_0_block_214
      nextln:   v1084 = bool.icmp.i8.eq v1042, 0x0
      nextln:   jump addr_0_block_217(0x1)
      check: addr_0_block_216: // preds: addr_0_block_214
      nextln:   jump addr_0_block_217(0x0)
      check: addr_0_block_217(v1085: bool): // preds: addr_0_block_215 addr_0_block_216
      nextln:   v1086 = bool.icmp.i8.eq v1042, 0x0
      nextln:   v1087 = bool.and v1014, v1086
      nextln:   jumpif v1087, addr_0_block_218, addr_0_block_219
      check: addr_0_block_218: // preds: addr_0_block_217
      nextln:   jump addr_0_block_220(0x0, 0x0)
      check: addr_0_block_219: // preds: addr_0_block_217
      nextln:   jump addr_0_block_220(0x0, 0x0)
      check: addr_0_block_220(v1088: bool, v1089: bool): // preds: addr_0_block_218 addr_0_block_219
      nextln:   v1090 = bool.or v1085, v1088
      nextln:   jumpif v1090, addr_0_block_221, addr_0_block_234
      check: addr_0_block_221: // preds: addr_0_block_220
      nextln:   v1091 = i52.unsigned_from_bits v1038
      nextln:   v1092 = int.modulo v1091, 0x8
      nextln:   v1093 = int.sub v1091, v1092
      nextln:   v1094 = i52.to_bits v1093
      nextln:   v1095 = bool.icmp.i52.eq v1038, v1094
      nextln:   v1096 = i64.load v1038
      nextln:   jumpif v1085, addr_0_block_222, addr_0_block_223
      nextln:   jump addr_0_block_235(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v1096, v1015, v1016, v1017, v1018, v1019, v1020, v1021, v1022, v1023, v1024, v1025, v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, 0x0, 0x0)
      check: addr_0_block_222: // no preds!
      nextln:   jump addr_0_block_224
      check: addr_0_block_223: // no preds!
      nextln:   jump addr_0_block_224
      check: addr_0_block_224: // preds: addr_0_block_222 addr_0_block_223
      nextln:   jumpif v1088, addr_0_block_225, addr_0_block_226
      check: addr_0_block_225: // preds: addr_0_block_224
      nextln:   jump addr_0_block_227
      check: addr_0_block_226: // preds: addr_0_block_224
      nextln:   jump addr_0_block_227
      check: addr_0_block_227: // preds: addr_0_block_225 addr_0_block_226
      nextln:   v1407 = i52.unsigned_from_bits v1038
      nextln:   v1408 = int.modulo v1407, 0x8
      nextln:   v1409 = int.sub v1407, v1408
      nextln:   v1410 = i52.to_bits v1409
      nextln:   v1411 = bool.icmp.i52.eq v1038, v1410
      nextln:   v1412 = bool.icmp.i52.eq v1038, 0x13000000
      nextln:   jumpif v1412, addr_0_block_228, addr_0_block_232
      check: addr_0_block_228: // preds: addr_0_block_227
      nextln:   v1413 = i64.unsigned_from_bits v1096
      nextln:   v1414 = bool.icmp.int.eq v1413, 0x4
      nextln:   jumpif v1414, addr_0_block_229, addr_0_block_230
      nextln:   jump addr_0_block_233
      check: addr_0_block_229: // no preds!
      nextln:   jump addr_0_block_231
      check: addr_0_block_230: // no preds!
      nextln:   v1415 = i8.trunc.i64 v1096
      nextln:   v1416 = i8.unsigned_from_bits v1415
      nextln:   jump addr_0_block_231
      check: addr_0_block_231: // preds: addr_0_block_229 addr_0_block_230
      check: addr_0_block_232: // preds: addr_0_block_227
      nextln:   store.i64 v1096, v1038
      nextln:   jump addr_0_block_233
      check: addr_0_block_233: // preds: addr_0_block_228 addr_0_block_232
      check: addr_0_block_234: // preds: addr_0_block_220
      nextln:   jump addr_0_block_235(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_235(v1097: i8, v1098: i1, v1099: i16, v1100: i8, v1101: bool, v1102: bool, v1103: bool, v1104: int, v1105: i64, v1106: i8, v1107: i8, v1108: i52, v1109: i1, v1110: bool, v1111: bool, v1112: int, v1113: i1, v1114: bool, v1115: i4, v1116: i2, v1117: i4, v1118: i8, v1119: i8, v1120: i2, v1121: i2, v1122: bool, v1123: i2, v1124: i2, v1125: bool, v1126: bool, v1127: bool, v1128: bool, v1129: i52, v1130: i1, v1131: i64, v1132: i2, v1133: bool): // preds: addr_0_block_221 addr_0_block_234
      nextln:   v1134 = bool.icmp.i8.ne v1042, 0x0
      nextln:   v1135 = bool.bitwise_not v1134
      nextln:   v1136 = bool.and v1135, 0x1
      nextln:   v1137 = bool.icmp.i8.ne v1042, 0x0
      nextln:   v1138 = bool.bitwise_not v1137
      nextln:   v1139 = bool.and 0x1, v1138
      nextln:   jumpif v1139, addr_0_block_236, addr_0_block_237
      check: addr_0_block_236: // preds: addr_0_block_235
      nextln:   jump addr_0_block_238
      check: addr_0_block_237: // preds: addr_0_block_235
      nextln:   jump addr_0_block_238
      check: addr_0_block_238: // preds: addr_0_block_236 addr_0_block_237
      nextln:   v1140 = bool.icmp.i8.ne v1042, 0x0
      nextln:   jumpif v1140, addr_0_block_239, addr_0_block_240
      check: addr_0_block_239: // preds: addr_0_block_238
      nextln:   jump addr_0_block_241
      check: addr_0_block_240: // preds: addr_0_block_238
      nextln:   jump addr_0_block_241
      check: addr_0_block_241: // preds: addr_0_block_239 addr_0_block_240
      nextln:   v1141 = i52.unsigned_from_bits v1065
      nextln:   v1142 = int.modulo v1141, 0x1
      nextln:   v1143 = int.sub v1141, v1142
      nextln:   v1144 = i52.to_bits v1143
      nextln:   v1145 = bool.icmp.i52.eq v1065, v1144
      nextln:   v1146 = i8.load v1065
      nextln:   v1147 = i64.and v992, 0xff00ffffffffffff
      nextln:   v1148 = i8.lshl v1146, 0x30
      nextln:   v1149 = i64.or v1147, v1148
      nextln:   v1150 = i64.wrapping_add v1, 0x7
      nextln:   v1151 = i64.unsigned_from_bits v1150
      nextln:   v1152 = int.modulo v1151, 0x1
      nextln:   v1153 = int.sub v1151, v1152
      nextln:   v1154 = i64.to_bits v1153
      nextln:   v1155 = bool.icmp.i64.eq v1150, v1154
      nextln:   v1156 = i64.lshr v1150, 0x30
      nextln:   v1157 = i16.trunc.i64 v1156
      nextln:   v1158 = bool.icmp.i16.eq v1157, 0x0
      nextln:   v1159 = bool.bitwise_not v1158
      nextln:   jumpif v1159, addr_0_block_242, addr_0_block_243
      check: addr_0_block_242: // preds: addr_0_block_241
      nextln:   jump addr_0_block_244(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_245(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_243: // preds: addr_0_block_241
      nextln:   jump addr_0_block_244(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_244(v1307: i52, v1308: int, v1309: bool, v1310: bool): // preds: addr_0_block_243
      nextln:   v1311 = i52.trunc.i64 v1150
      nextln:   jump addr_0_block_245(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1311, 0x1, 0x0)
      check: addr_0_block_245(v1160: i3, v1161: i1, v1162: i1, v1163: i1, v1164: i1, v1165: i4, v1166: i1, v1167: bool, v1168: int, v1169: int, v1170: bool, v1171: bool, v1172: i8, v1173: i8, v1174: i52, v1175: i1, v1176: bool, v1177: bool, v1178: int, v1179: i1, v1180: bool, v1181: i4, v1182: i2, v1183: i4, v1184: i8, v1185: i8, v1186: i2, v1187: i2, v1188: bool, v1189: i2, v1190: i2, v1191: bool, v1192: bool, v1193: bool, v1194: bool, v1195: i52, v1196: i1, v1197: i64, v1198: i1, v1199: i8, v1200: i8, v1201: i52, v1202: i1, v1203: bool, v1204: bool, v1205: int, v1206: i1, v1207: bool, v1208: i4, v1209: i2, v1210: i4, v1211: i8, v1212: i8, v1213: i2, v1214: i2, v1215: bool, v1216: i2, v1217: i2, v1218: bool, v1219: bool, v1220: bool, v1221: bool, v1222: i52, v1223: i1, v1224: i64): // preds: addr_0_block_242 addr_0_block_244
      nextln:   v1225 = bool.icmp.i8.ne v1199, 0x0
      nextln:   v1226 = bool.bitwise_not v1225
      nextln:   v1227 = bool.bitwise_not v6
      nextln:   v1228 = bool.and v1227, 0x1
      nextln:   v1229 = bool.or v1228, 0x0
      nextln:   v1230 = bool.icmp.i8.ne v1199, 0x0
      nextln:   v1231 = bool.bitwise_not v1230
      nextln:   v1232 = bool.and v1229, v1231
      nextln:   v1233 = bool.icmp.i8.eq v1211, 0x1
      nextln:   v1234 = bool.and v1232, v1233
      nextln:   jumpif v1234, addr_0_block_246, addr_0_block_247
      check: addr_0_block_246: // preds: addr_0_block_245
      nextln:   jump addr_0_block_248
      check: addr_0_block_247: // preds: addr_0_block_245
      nextln:   jump addr_0_block_248
      check: addr_0_block_248: // preds: addr_0_block_246 addr_0_block_247
      nextln:   v1235 = bool.icmp.i8.ne v1199, 0x0
      nextln:   v1236 = bool.bitwise_not v1235
      nextln:   v1237 = bool.icmp.i8.ne v1199, 0x0
      nextln:   v1238 = bool.bitwise_not v1237
      nextln:   v1239 = bool.icmp.i8.eq v1211, 0x1
      nextln:   v1240 = bool.and v1238, v1239
      nextln:   jumpif v1170, addr_0_block_249, addr_0_block_250
      check: addr_0_block_249: // preds: addr_0_block_248
      nextln:   v1241 = bool.icmp.i8.eq v1199, 0x0
      nextln:   jump addr_0_block_251(0x1)
      check: addr_0_block_250: // preds: addr_0_block_248
      nextln:   jump addr_0_block_251(0x0)
      check: addr_0_block_251(v1242: bool): // preds: addr_0_block_249 addr_0_block_250
      nextln:   v1243 = bool.icmp.i8.eq v1199, 0x0
      nextln:   v1244 = bool.and v1171, v1243
      nextln:   jumpif v1244, addr_0_block_252, addr_0_block_253
      check: addr_0_block_252: // preds: addr_0_block_251
      nextln:   jump addr_0_block_254(0x0, 0x0)
      check: addr_0_block_253: // preds: addr_0_block_251
      nextln:   jump addr_0_block_254(0x0, 0x0)
      check: addr_0_block_254(v1245: bool, v1246: bool): // preds: addr_0_block_252 addr_0_block_253
      nextln:   v1247 = bool.or v1242, v1245
      nextln:   jumpif v1247, addr_0_block_255, addr_0_block_268
      check: addr_0_block_255: // preds: addr_0_block_254
      nextln:   v1248 = i52.unsigned_from_bits v1195
      nextln:   v1249 = int.modulo v1248, 0x8
      nextln:   v1250 = int.sub v1248, v1249
      nextln:   v1251 = i52.to_bits v1250
      nextln:   v1252 = bool.icmp.i52.eq v1195, v1251
      nextln:   v1253 = i64.load v1195
      nextln:   jumpif v1242, addr_0_block_256, addr_0_block_257
      nextln:   jump addr_0_block_269(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v1253, v1172, v1173, v1174, v1175, v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, v1186, v1187, v1188, v1189, v1190, v1191, v1192, v1193, v1194, v1195, v1196, v1197, 0x0, 0x0)
      check: addr_0_block_256: // no preds!
      nextln:   jump addr_0_block_258
      check: addr_0_block_257: // no preds!
      nextln:   jump addr_0_block_258
      check: addr_0_block_258: // preds: addr_0_block_256 addr_0_block_257
      nextln:   jumpif v1245, addr_0_block_259, addr_0_block_260
      check: addr_0_block_259: // preds: addr_0_block_258
      nextln:   jump addr_0_block_261
      check: addr_0_block_260: // preds: addr_0_block_258
      nextln:   jump addr_0_block_261
      check: addr_0_block_261: // preds: addr_0_block_259 addr_0_block_260
      nextln:   v1417 = i52.unsigned_from_bits v1195
      nextln:   v1418 = int.modulo v1417, 0x8
      nextln:   v1419 = int.sub v1417, v1418
      nextln:   v1420 = i52.to_bits v1419
      nextln:   v1421 = bool.icmp.i52.eq v1195, v1420
      nextln:   v1422 = bool.icmp.i52.eq v1195, 0x13000000
      nextln:   jumpif v1422, addr_0_block_262, addr_0_block_266
      check: addr_0_block_262: // preds: addr_0_block_261
      nextln:   v1423 = i64.unsigned_from_bits v1253
      nextln:   v1424 = bool.icmp.int.eq v1423, 0x4
      nextln:   jumpif v1424, addr_0_block_263, addr_0_block_264
      nextln:   jump addr_0_block_267
      check: addr_0_block_263: // no preds!
      nextln:   jump addr_0_block_265
      check: addr_0_block_264: // no preds!
      nextln:   v1425 = i8.trunc.i64 v1253
      nextln:   v1426 = i8.unsigned_from_bits v1425
      nextln:   jump addr_0_block_265
      check: addr_0_block_265: // preds: addr_0_block_263 addr_0_block_264
      check: addr_0_block_266: // preds: addr_0_block_261
      nextln:   store.i64 v1253, v1195
      nextln:   jump addr_0_block_267
      check: addr_0_block_267: // preds: addr_0_block_262 addr_0_block_266
      check: addr_0_block_268: // preds: addr_0_block_254
      nextln:   jump addr_0_block_269(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_269(v1254: i8, v1255: i1, v1256: i16, v1257: i8, v1258: bool, v1259: bool, v1260: bool, v1261: int, v1262: i64, v1263: i8, v1264: i8, v1265: i52, v1266: i1, v1267: bool, v1268: bool, v1269: int, v1270: i1, v1271: bool, v1272: i4, v1273: i2, v1274: i4, v1275: i8, v1276: i8, v1277: i2, v1278: i2, v1279: bool, v1280: i2, v1281: i2, v1282: bool, v1283: bool, v1284: bool, v1285: bool, v1286: i52, v1287: i1, v1288: i64, v1289: i2, v1290: bool): // preds: addr_0_block_255 addr_0_block_268
      nextln:   v1291 = bool.icmp.i8.ne v1199, 0x0
      nextln:   v1292 = bool.bitwise_not v1291
      nextln:   v1293 = bool.and v1292, 0x1
      nextln:   v1294 = bool.icmp.i8.ne v1199, 0x0
      nextln:   v1295 = bool.bitwise_not v1294
      nextln:   v1296 = bool.and 0x1, v1295
      nextln:   jumpif v1296, addr_0_block_270, addr_0_block_271
      check: addr_0_block_270: // preds: addr_0_block_269
      nextln:   jump addr_0_block_272
      check: addr_0_block_271: // preds: addr_0_block_269
      nextln:   jump addr_0_block_272
      check: addr_0_block_272: // preds: addr_0_block_270 addr_0_block_271
      nextln:   v1297 = bool.icmp.i8.ne v1199, 0x0
      nextln:   jumpif v1297, addr_0_block_273, addr_0_block_274
      check: addr_0_block_273: // preds: addr_0_block_272
      nextln:   jump addr_0_block_275
      check: addr_0_block_274: // preds: addr_0_block_272
      nextln:   jump addr_0_block_275
      check: addr_0_block_275: // preds: addr_0_block_273 addr_0_block_274
      nextln:   v1298 = i52.unsigned_from_bits v1222
      nextln:   v1299 = int.modulo v1298, 0x1
      nextln:   v1300 = int.sub v1298, v1299
      nextln:   v1301 = i52.to_bits v1300
      nextln:   v1302 = bool.icmp.i52.eq v1222, v1301
      nextln:   v1303 = i8.load v1222
      nextln:   v1304 = i64.and v1149, 0xffffffffffffff
      nextln:   v1305 = i8.lshl v1303, 0x38
      nextln:   v1306 = i64.or v1304, v1305
      check: addr_0_block_276: // preds: entry
      nextln:   v51 = i64.unsigned_from_bits v1
      nextln:   v52 = int.modulo v51, 0x8
      nextln:   v53 = int.sub v51, v52
      nextln:   v54 = i64.to_bits v53
      nextln:   v55 = bool.icmp.i64.eq v1, v54
      nextln:   v56 = i64.lshr v1, 0x30
      nextln:   v57 = i16.trunc.i64 v56
      nextln:   v58 = bool.icmp.i16.eq v57, 0x0
      nextln:   v59 = bool.bitwise_not v58
      nextln:   jumpif v59, addr_0_block_277, addr_0_block_278
      nextln:   jump addr_0_block_311(v6, 0x0, v1570)
      check: addr_0_block_277: // no preds!
      nextln:   jump addr_0_block_279(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_280(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_278: // no preds!
      nextln:   jump addr_0_block_279(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_279(v1571: i52, v1572: int, v1573: bool, v1574: bool): // preds: addr_0_block_278
      nextln:   v1575 = i52.trunc.i64 v1
      nextln:   jump addr_0_block_280(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1575, 0x1, 0x0)
      check: addr_0_block_280(v1427: i3, v1428: i1, v1429: i1, v1430: i1, v1431: i1, v1432: i4, v1433: i1, v1434: bool, v1435: int, v1436: int, v1437: bool, v1438: bool, v1439: i8, v1440: i8, v1441: i52, v1442: i1, v1443: bool, v1444: bool, v1445: int, v1446: i1, v1447: bool, v1448: i4, v1449: i2, v1450: i4, v1451: i8, v1452: i8, v1453: i2, v1454: i2, v1455: bool, v1456: i2, v1457: i2, v1458: bool, v1459: bool, v1460: bool, v1461: bool, v1462: i52, v1463: i1, v1464: i64, v1465: i1, v1466: i8, v1467: i8, v1468: i52, v1469: i1, v1470: bool, v1471: bool, v1472: int, v1473: i1, v1474: bool, v1475: i4, v1476: i2, v1477: i4, v1478: i8, v1479: i8, v1480: i2, v1481: i2, v1482: bool, v1483: i2, v1484: i2, v1485: bool, v1486: bool, v1487: bool, v1488: bool, v1489: i52, v1490: i1, v1491: i64): // preds: addr_0_block_277 addr_0_block_279
      nextln:   v1492 = bool.icmp.i8.ne v1466, 0x0
      nextln:   v1493 = bool.bitwise_not v1492
      nextln:   v1494 = bool.bitwise_not v6
      nextln:   v1495 = bool.and v1494, 0x1
      nextln:   v1496 = bool.or v1495, 0x0
      nextln:   v1497 = bool.icmp.i8.ne v1466, 0x0
      nextln:   v1498 = bool.bitwise_not v1497
      nextln:   v1499 = bool.and v1496, v1498
      nextln:   v1500 = bool.icmp.i8.eq v1478, 0x1
      nextln:   v1501 = bool.and v1499, v1500
      nextln:   jumpif v1501, addr_0_block_281, addr_0_block_282
      check: addr_0_block_281: // preds: addr_0_block_280
      nextln:   jump addr_0_block_283
      check: addr_0_block_282: // preds: addr_0_block_280
      nextln:   jump addr_0_block_283
      check: addr_0_block_283: // preds: addr_0_block_281 addr_0_block_282
      nextln:   v1502 = bool.icmp.i8.ne v1466, 0x0
      nextln:   v1503 = bool.bitwise_not v1502
      nextln:   v1504 = bool.icmp.i8.ne v1466, 0x0
      nextln:   v1505 = bool.bitwise_not v1504
      nextln:   v1506 = bool.icmp.i8.eq v1478, 0x1
      nextln:   v1507 = bool.and v1505, v1506
      nextln:   jumpif v1437, addr_0_block_284, addr_0_block_285
      check: addr_0_block_284: // preds: addr_0_block_283
      nextln:   v1508 = bool.icmp.i8.eq v1466, 0x0
      nextln:   jump addr_0_block_286(0x1)
      check: addr_0_block_285: // preds: addr_0_block_283
      nextln:   jump addr_0_block_286(0x0)
      check: addr_0_block_286(v1509: bool): // preds: addr_0_block_284 addr_0_block_285
      nextln:   v1510 = bool.icmp.i8.eq v1466, 0x0
      nextln:   v1511 = bool.and v1438, v1510
      nextln:   jumpif v1511, addr_0_block_287, addr_0_block_288
      check: addr_0_block_287: // preds: addr_0_block_286
      nextln:   jump addr_0_block_289(0x0, 0x0)
      check: addr_0_block_288: // preds: addr_0_block_286
      nextln:   jump addr_0_block_289(0x0, 0x0)
      check: addr_0_block_289(v1512: bool, v1513: bool): // preds: addr_0_block_287 addr_0_block_288
      nextln:   v1514 = bool.or v1509, v1512
      nextln:   jumpif v1514, addr_0_block_290, addr_0_block_303
      check: addr_0_block_290: // preds: addr_0_block_289
      nextln:   v1515 = i52.unsigned_from_bits v1462
      nextln:   v1516 = int.modulo v1515, 0x8
      nextln:   v1517 = int.sub v1515, v1516
      nextln:   v1518 = i52.to_bits v1517
      nextln:   v1519 = bool.icmp.i52.eq v1462, v1518
      nextln:   v1520 = i64.load v1462
      nextln:   jumpif v1509, addr_0_block_291, addr_0_block_292
      nextln:   jump addr_0_block_304(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v1520, v1439, v1440, v1441, v1442, v1443, v1444, v1445, v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464, 0x0, 0x0)
      check: addr_0_block_291: // no preds!
      nextln:   jump addr_0_block_293
      check: addr_0_block_292: // no preds!
      nextln:   jump addr_0_block_293
      check: addr_0_block_293: // preds: addr_0_block_291 addr_0_block_292
      nextln:   jumpif v1512, addr_0_block_294, addr_0_block_295
      check: addr_0_block_294: // preds: addr_0_block_293
      nextln:   jump addr_0_block_296
      check: addr_0_block_295: // preds: addr_0_block_293
      nextln:   jump addr_0_block_296
      check: addr_0_block_296: // preds: addr_0_block_294 addr_0_block_295
      nextln:   v1576 = i52.unsigned_from_bits v1462
      nextln:   v1577 = int.modulo v1576, 0x8
      nextln:   v1578 = int.sub v1576, v1577
      nextln:   v1579 = i52.to_bits v1578
      nextln:   v1580 = bool.icmp.i52.eq v1462, v1579
      nextln:   v1581 = bool.icmp.i52.eq v1462, 0x13000000
      nextln:   jumpif v1581, addr_0_block_297, addr_0_block_301
      check: addr_0_block_297: // preds: addr_0_block_296
      nextln:   v1582 = i64.unsigned_from_bits v1520
      nextln:   v1583 = bool.icmp.int.eq v1582, 0x4
      nextln:   jumpif v1583, addr_0_block_298, addr_0_block_299
      nextln:   jump addr_0_block_302
      check: addr_0_block_298: // no preds!
      nextln:   jump addr_0_block_300
      check: addr_0_block_299: // no preds!
      nextln:   v1584 = i8.trunc.i64 v1520
      nextln:   v1585 = i8.unsigned_from_bits v1584
      nextln:   jump addr_0_block_300
      check: addr_0_block_300: // preds: addr_0_block_298 addr_0_block_299
      check: addr_0_block_301: // preds: addr_0_block_296
      nextln:   store.i64 v1520, v1462
      nextln:   jump addr_0_block_302
      check: addr_0_block_302: // preds: addr_0_block_297 addr_0_block_301
      check: addr_0_block_303: // preds: addr_0_block_289
      nextln:   jump addr_0_block_304(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_304(v1521: i8, v1522: i1, v1523: i16, v1524: i8, v1525: bool, v1526: bool, v1527: bool, v1528: int, v1529: i64, v1530: i8, v1531: i8, v1532: i52, v1533: i1, v1534: bool, v1535: bool, v1536: int, v1537: i1, v1538: bool, v1539: i4, v1540: i2, v1541: i4, v1542: i8, v1543: i8, v1544: i2, v1545: i2, v1546: bool, v1547: i2, v1548: i2, v1549: bool, v1550: bool, v1551: bool, v1552: bool, v1553: i52, v1554: i1, v1555: i64, v1556: i2, v1557: bool): // preds: addr_0_block_290 addr_0_block_303
      nextln:   v1558 = bool.icmp.i8.ne v1466, 0x0
      nextln:   v1559 = bool.bitwise_not v1558
      nextln:   v1560 = bool.and v1559, 0x1
      nextln:   v1561 = bool.icmp.i8.ne v1466, 0x0
      nextln:   v1562 = bool.bitwise_not v1561
      nextln:   v1563 = bool.and 0x1, v1562
      nextln:   jumpif v1563, addr_0_block_305, addr_0_block_306
      check: addr_0_block_305: // preds: addr_0_block_304
      nextln:   jump addr_0_block_307
      check: addr_0_block_306: // preds: addr_0_block_304
      nextln:   jump addr_0_block_307
      check: addr_0_block_307: // preds: addr_0_block_305 addr_0_block_306
      nextln:   v1564 = bool.icmp.i8.ne v1466, 0x0
      nextln:   jumpif v1564, addr_0_block_308, addr_0_block_309
      check: addr_0_block_308: // preds: addr_0_block_307
      nextln:   jump addr_0_block_310
      check: addr_0_block_309: // preds: addr_0_block_307
      nextln:   jump addr_0_block_310
      check: addr_0_block_310: // preds: addr_0_block_308 addr_0_block_309
      nextln:   v1565 = i52.unsigned_from_bits v1489
      nextln:   v1566 = int.modulo v1565, 0x8
      nextln:   v1567 = int.sub v1565, v1566
      nextln:   v1568 = i52.to_bits v1567
      nextln:   v1569 = bool.icmp.i52.eq v1489, v1568
      nextln:   v1570 = i64.load v1489
      check: addr_0_block_311(v18: i64, v19: i8, v20: i64): // preds: addr_0_block_0 addr_0_block_276
      nextln:   v21 = i64.wrapping_add v0, 0x8
      nextln:   v22 = i64.unsigned_from_bits v21
      nextln:   v23 = int.modulo v22, 0x8
      nextln:   v24 = int.sub v22, v23
      nextln:   v25 = i64.to_bits v24
      nextln:   v26 = bool.icmp.i64.eq v21, v25
      nextln:   v27 = bool.bitwise_not v26
      nextln:   v28 = bool.bitwise_not v26
      nextln:   jumpif v28, addr_0_block_312, addr_0_block_588
      check: addr_0_block_312: // preds: addr_0_block_311
      nextln:   v29 = i64.unsigned_from_bits v21
      nextln:   v30 = int.modulo v29, 0x1
      nextln:   v31 = int.sub v29, v30
      nextln:   v32 = i64.to_bits v31
      nextln:   v33 = bool.icmp.i64.eq v21, v32
      nextln:   v34 = i64.lshr v21, 0x30
      nextln:   v35 = i16.trunc.i64 v34
      nextln:   v36 = bool.icmp.i16.eq v35, 0x0
      nextln:   v37 = bool.bitwise_not v36
      nextln:   jumpif v37, addr_0_block_313, addr_0_block_314
      nextln:   jump addr_0_block_623(v1733, v1734, v2832)
      check: addr_0_block_313: // no preds!
      nextln:   jump addr_0_block_315(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_316(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_314: // no preds!
      nextln:   jump addr_0_block_315(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_315(v2868: i52, v2869: int, v2870: bool, v2871: bool): // preds: addr_0_block_314
      nextln:   v2872 = i52.trunc.i64 v21
      nextln:   jump addr_0_block_316(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v2872, 0x1, 0x0)
      check: addr_0_block_316(v1586: i3, v1587: i1, v1588: i1, v1589: i1, v1590: i1, v1591: i4, v1592: i1, v1593: bool, v1594: int, v1595: int, v1596: bool, v1597: bool, v1598: i8, v1599: i8, v1600: i52, v1601: i1, v1602: bool, v1603: bool, v1604: int, v1605: i1, v1606: bool, v1607: i4, v1608: i2, v1609: i4, v1610: i8, v1611: i8, v1612: i2, v1613: i2, v1614: bool, v1615: i2, v1616: i2, v1617: bool, v1618: bool, v1619: bool, v1620: bool, v1621: i52, v1622: i1, v1623: i64, v1624: i1, v1625: i8, v1626: i8, v1627: i52, v1628: i1, v1629: bool, v1630: bool, v1631: int, v1632: i1, v1633: bool, v1634: i4, v1635: i2, v1636: i4, v1637: i8, v1638: i8, v1639: i2, v1640: i2, v1641: bool, v1642: i2, v1643: i2, v1644: bool, v1645: bool, v1646: bool, v1647: bool, v1648: i52, v1649: i1, v1650: i64): // preds: addr_0_block_313 addr_0_block_315
      nextln:   v1651 = bool.icmp.i8.ne v1625, 0x0
      nextln:   v1652 = bool.bitwise_not v1651
      nextln:   v1653 = bool.bitwise_not v26
      nextln:   v1654 = bool.and v1653, 0x1
      nextln:   v1655 = bool.or v1654, 0x0
      nextln:   v1656 = bool.icmp.i8.ne v1625, 0x0
      nextln:   v1657 = bool.bitwise_not v1656
      nextln:   v1658 = bool.and v1655, v1657
      nextln:   v1659 = bool.icmp.i8.eq v1637, 0x1
      nextln:   v1660 = bool.and v1658, v1659
      nextln:   jumpif v1660, addr_0_block_317, addr_0_block_318
      check: addr_0_block_317: // preds: addr_0_block_316
      nextln:   jump addr_0_block_319
      check: addr_0_block_318: // preds: addr_0_block_316
      nextln:   jump addr_0_block_319
      check: addr_0_block_319: // preds: addr_0_block_317 addr_0_block_318
      nextln:   v1661 = bool.icmp.i8.ne v1625, 0x0
      nextln:   v1662 = bool.bitwise_not v1661
      nextln:   v1663 = bool.icmp.i8.ne v1625, 0x0
      nextln:   v1664 = bool.bitwise_not v1663
      nextln:   v1665 = bool.icmp.i8.eq v1637, 0x1
      nextln:   v1666 = bool.and v1664, v1665
      nextln:   jumpif v1596, addr_0_block_320, addr_0_block_321
      check: addr_0_block_320: // preds: addr_0_block_319
      nextln:   v1667 = bool.icmp.i8.eq v1625, 0x0
      nextln:   jump addr_0_block_322(0x1)
      check: addr_0_block_321: // preds: addr_0_block_319
      nextln:   jump addr_0_block_322(0x0)
      check: addr_0_block_322(v1668: bool): // preds: addr_0_block_320 addr_0_block_321
      nextln:   v1669 = bool.icmp.i8.eq v1625, 0x0
      nextln:   v1670 = bool.and v1597, v1669
      nextln:   jumpif v1670, addr_0_block_323, addr_0_block_324
      check: addr_0_block_323: // preds: addr_0_block_322
      nextln:   jump addr_0_block_325(0x0, 0x0)
      check: addr_0_block_324: // preds: addr_0_block_322
      nextln:   jump addr_0_block_325(0x0, 0x0)
      check: addr_0_block_325(v1671: bool, v1672: bool): // preds: addr_0_block_323 addr_0_block_324
      nextln:   v1673 = bool.or v1668, v1671
      nextln:   jumpif v1673, addr_0_block_326, addr_0_block_339
      check: addr_0_block_326: // preds: addr_0_block_325
      nextln:   v1674 = i52.unsigned_from_bits v1621
      nextln:   v1675 = int.modulo v1674, 0x8
      nextln:   v1676 = int.sub v1674, v1675
      nextln:   v1677 = i52.to_bits v1676
      nextln:   v1678 = bool.icmp.i52.eq v1621, v1677
      nextln:   v1679 = i64.load v1621
      nextln:   jumpif v1668, addr_0_block_327, addr_0_block_328
      nextln:   jump addr_0_block_340(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v1679, v1598, v1599, v1600, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1608, v1609, v1610, v1611, v1612, v1613, v1614, v1615, v1616, v1617, v1618, v1619, v1620, v1621, v1622, v1623, 0x0, 0x0)
      check: addr_0_block_327: // no preds!
      nextln:   jump addr_0_block_329
      check: addr_0_block_328: // no preds!
      nextln:   jump addr_0_block_329
      check: addr_0_block_329: // preds: addr_0_block_327 addr_0_block_328
      nextln:   jumpif v1671, addr_0_block_330, addr_0_block_331
      check: addr_0_block_330: // preds: addr_0_block_329
      nextln:   jump addr_0_block_332
      check: addr_0_block_331: // preds: addr_0_block_329
      nextln:   jump addr_0_block_332
      check: addr_0_block_332: // preds: addr_0_block_330 addr_0_block_331
      nextln:   v2873 = i52.unsigned_from_bits v1621
      nextln:   v2874 = int.modulo v2873, 0x8
      nextln:   v2875 = int.sub v2873, v2874
      nextln:   v2876 = i52.to_bits v2875
      nextln:   v2877 = bool.icmp.i52.eq v1621, v2876
      nextln:   v2878 = bool.icmp.i52.eq v1621, 0x13000000
      nextln:   jumpif v2878, addr_0_block_333, addr_0_block_337
      check: addr_0_block_333: // preds: addr_0_block_332
      nextln:   v2879 = i64.unsigned_from_bits v1679
      nextln:   v2880 = bool.icmp.int.eq v2879, 0x4
      nextln:   jumpif v2880, addr_0_block_334, addr_0_block_335
      nextln:   jump addr_0_block_338
      check: addr_0_block_334: // no preds!
      nextln:   jump addr_0_block_336
      check: addr_0_block_335: // no preds!
      nextln:   v2881 = i8.trunc.i64 v1679
      nextln:   v2882 = i8.unsigned_from_bits v2881
      nextln:   jump addr_0_block_336
      check: addr_0_block_336: // preds: addr_0_block_334 addr_0_block_335
      check: addr_0_block_337: // preds: addr_0_block_332
      nextln:   store.i64 v1679, v1621
      nextln:   jump addr_0_block_338
      check: addr_0_block_338: // preds: addr_0_block_333 addr_0_block_337
      check: addr_0_block_339: // preds: addr_0_block_325
      nextln:   jump addr_0_block_340(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_340(v1680: i8, v1681: i1, v1682: i16, v1683: i8, v1684: bool, v1685: bool, v1686: bool, v1687: int, v1688: i64, v1689: i8, v1690: i8, v1691: i52, v1692: i1, v1693: bool, v1694: bool, v1695: int, v1696: i1, v1697: bool, v1698: i4, v1699: i2, v1700: i4, v1701: i8, v1702: i8, v1703: i2, v1704: i2, v1705: bool, v1706: i2, v1707: i2, v1708: bool, v1709: bool, v1710: bool, v1711: bool, v1712: i52, v1713: i1, v1714: i64, v1715: i2, v1716: bool): // preds: addr_0_block_326 addr_0_block_339
      nextln:   v1717 = bool.icmp.i8.ne v1625, 0x0
      nextln:   v1718 = bool.bitwise_not v1717
      nextln:   v1719 = bool.and v1718, 0x1
      nextln:   v1720 = bool.icmp.i8.ne v1625, 0x0
      nextln:   v1721 = bool.bitwise_not v1720
      nextln:   v1722 = bool.and 0x1, v1721
      nextln:   jumpif v1722, addr_0_block_341, addr_0_block_342
      check: addr_0_block_341: // preds: addr_0_block_340
      nextln:   jump addr_0_block_343
      check: addr_0_block_342: // preds: addr_0_block_340
      nextln:   jump addr_0_block_343
      check: addr_0_block_343: // preds: addr_0_block_341 addr_0_block_342
      nextln:   v1723 = bool.icmp.i8.ne v1625, 0x0
      nextln:   jumpif v1723, addr_0_block_344, addr_0_block_345
      check: addr_0_block_344: // preds: addr_0_block_343
      nextln:   jump addr_0_block_346
      check: addr_0_block_345: // preds: addr_0_block_343
      nextln:   jump addr_0_block_346
      check: addr_0_block_346: // preds: addr_0_block_344 addr_0_block_345
      nextln:   v1724 = i52.unsigned_from_bits v1648
      nextln:   v1725 = int.modulo v1724, 0x1
      nextln:   v1726 = int.sub v1724, v1725
      nextln:   v1727 = i52.to_bits v1726
      nextln:   v1728 = bool.icmp.i52.eq v1648, v1727
      nextln:   v1729 = i8.load v1648
      nextln:   v1730 = i8.lshl v1729, 0x0
      nextln:   v1731 = i64.or 0x0, v1730
      nextln:   v1732 = bool.bitwise_not v26
      nextln:   jumpif v1732, addr_0_block_347, addr_0_block_348
      check: addr_0_block_347: // preds: addr_0_block_346
      nextln:   jump addr_0_block_349(v26, 0xc)
      check: addr_0_block_348: // preds: addr_0_block_346
      nextln:   jump addr_0_block_349(v26, 0x0)
      check: addr_0_block_349(v1733: i64, v1734: i8): // preds: addr_0_block_347 addr_0_block_348
      nextln:   v1735 = i64.wrapping_add v21, 0x1
      nextln:   v1736 = i64.unsigned_from_bits v1735
      nextln:   v1737 = int.modulo v1736, 0x1
      nextln:   v1738 = int.sub v1736, v1737
      nextln:   v1739 = i64.to_bits v1738
      nextln:   v1740 = bool.icmp.i64.eq v1735, v1739
      nextln:   v1741 = i64.lshr v1735, 0x30
      nextln:   v1742 = i16.trunc.i64 v1741
      nextln:   v1743 = bool.icmp.i16.eq v1742, 0x0
      nextln:   v1744 = bool.bitwise_not v1743
      nextln:   jumpif v1744, addr_0_block_350, addr_0_block_351
      check: addr_0_block_350: // preds: addr_0_block_349
      nextln:   jump addr_0_block_352(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_353(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_351: // preds: addr_0_block_349
      nextln:   jump addr_0_block_352(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_352(v2863: i52, v2864: int, v2865: bool, v2866: bool): // preds: addr_0_block_351
      nextln:   v2867 = i52.trunc.i64 v1735
      nextln:   jump addr_0_block_353(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v2867, 0x1, 0x0)
      check: addr_0_block_353(v1745: i3, v1746: i1, v1747: i1, v1748: i1, v1749: i1, v1750: i4, v1751: i1, v1752: bool, v1753: int, v1754: int, v1755: bool, v1756: bool, v1757: i8, v1758: i8, v1759: i52, v1760: i1, v1761: bool, v1762: bool, v1763: int, v1764: i1, v1765: bool, v1766: i4, v1767: i2, v1768: i4, v1769: i8, v1770: i8, v1771: i2, v1772: i2, v1773: bool, v1774: i2, v1775: i2, v1776: bool, v1777: bool, v1778: bool, v1779: bool, v1780: i52, v1781: i1, v1782: i64, v1783: i1, v1784: i8, v1785: i8, v1786: i52, v1787: i1, v1788: bool, v1789: bool, v1790: int, v1791: i1, v1792: bool, v1793: i4, v1794: i2, v1795: i4, v1796: i8, v1797: i8, v1798: i2, v1799: i2, v1800: bool, v1801: i2, v1802: i2, v1803: bool, v1804: bool, v1805: bool, v1806: bool, v1807: i52, v1808: i1, v1809: i64): // preds: addr_0_block_350 addr_0_block_352
      nextln:   v1810 = bool.icmp.i8.ne v1784, 0x0
      nextln:   v1811 = bool.bitwise_not v1810
      nextln:   v1812 = bool.bitwise_not v26
      nextln:   v1813 = bool.and v1812, 0x1
      nextln:   v1814 = bool.or v1813, 0x0
      nextln:   v1815 = bool.icmp.i8.ne v1784, 0x0
      nextln:   v1816 = bool.bitwise_not v1815
      nextln:   v1817 = bool.and v1814, v1816
      nextln:   v1818 = bool.icmp.i8.eq v1796, 0x1
      nextln:   v1819 = bool.and v1817, v1818
      nextln:   jumpif v1819, addr_0_block_354, addr_0_block_355
      check: addr_0_block_354: // preds: addr_0_block_353
      nextln:   jump addr_0_block_356
      check: addr_0_block_355: // preds: addr_0_block_353
      nextln:   jump addr_0_block_356
      check: addr_0_block_356: // preds: addr_0_block_354 addr_0_block_355
      nextln:   v1820 = bool.icmp.i8.ne v1784, 0x0
      nextln:   v1821 = bool.bitwise_not v1820
      nextln:   v1822 = bool.icmp.i8.ne v1784, 0x0
      nextln:   v1823 = bool.bitwise_not v1822
      nextln:   v1824 = bool.icmp.i8.eq v1796, 0x1
      nextln:   v1825 = bool.and v1823, v1824
      nextln:   jumpif v1755, addr_0_block_357, addr_0_block_358
      check: addr_0_block_357: // preds: addr_0_block_356
      nextln:   v1826 = bool.icmp.i8.eq v1784, 0x0
      nextln:   jump addr_0_block_359(0x1)
      check: addr_0_block_358: // preds: addr_0_block_356
      nextln:   jump addr_0_block_359(0x0)
      check: addr_0_block_359(v1827: bool): // preds: addr_0_block_357 addr_0_block_358
      nextln:   v1828 = bool.icmp.i8.eq v1784, 0x0
      nextln:   v1829 = bool.and v1756, v1828
      nextln:   jumpif v1829, addr_0_block_360, addr_0_block_361
      check: addr_0_block_360: // preds: addr_0_block_359
      nextln:   jump addr_0_block_362(0x0, 0x0)
      check: addr_0_block_361: // preds: addr_0_block_359
      nextln:   jump addr_0_block_362(0x0, 0x0)
      check: addr_0_block_362(v1830: bool, v1831: bool): // preds: addr_0_block_360 addr_0_block_361
      nextln:   v1832 = bool.or v1827, v1830
      nextln:   jumpif v1832, addr_0_block_363, addr_0_block_376
      check: addr_0_block_363: // preds: addr_0_block_362
      nextln:   v1833 = i52.unsigned_from_bits v1780
      nextln:   v1834 = int.modulo v1833, 0x8
      nextln:   v1835 = int.sub v1833, v1834
      nextln:   v1836 = i52.to_bits v1835
      nextln:   v1837 = bool.icmp.i52.eq v1780, v1836
      nextln:   v1838 = i64.load v1780
      nextln:   jumpif v1827, addr_0_block_364, addr_0_block_365
      nextln:   jump addr_0_block_377(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v1838, v1757, v1758, v1759, v1760, v1761, v1762, v1763, v1764, v1765, v1766, v1767, v1768, v1769, v1770, v1771, v1772, v1773, v1774, v1775, v1776, v1777, v1778, v1779, v1780, v1781, v1782, 0x0, 0x0)
      check: addr_0_block_364: // no preds!
      nextln:   jump addr_0_block_366
      check: addr_0_block_365: // no preds!
      nextln:   jump addr_0_block_366
      check: addr_0_block_366: // preds: addr_0_block_364 addr_0_block_365
      nextln:   jumpif v1830, addr_0_block_367, addr_0_block_368
      check: addr_0_block_367: // preds: addr_0_block_366
      nextln:   jump addr_0_block_369
      check: addr_0_block_368: // preds: addr_0_block_366
      nextln:   jump addr_0_block_369
      check: addr_0_block_369: // preds: addr_0_block_367 addr_0_block_368
      nextln:   v2883 = i52.unsigned_from_bits v1780
      nextln:   v2884 = int.modulo v2883, 0x8
      nextln:   v2885 = int.sub v2883, v2884
      nextln:   v2886 = i52.to_bits v2885
      nextln:   v2887 = bool.icmp.i52.eq v1780, v2886
      nextln:   v2888 = bool.icmp.i52.eq v1780, 0x13000000
      nextln:   jumpif v2888, addr_0_block_370, addr_0_block_374
      check: addr_0_block_370: // preds: addr_0_block_369
      nextln:   v2889 = i64.unsigned_from_bits v1838
      nextln:   v2890 = bool.icmp.int.eq v2889, 0x4
      nextln:   jumpif v2890, addr_0_block_371, addr_0_block_372
      nextln:   jump addr_0_block_375
      check: addr_0_block_371: // no preds!
      nextln:   jump addr_0_block_373
      check: addr_0_block_372: // no preds!
      nextln:   v2891 = i8.trunc.i64 v1838
      nextln:   v2892 = i8.unsigned_from_bits v2891
      nextln:   jump addr_0_block_373
      check: addr_0_block_373: // preds: addr_0_block_371 addr_0_block_372
      check: addr_0_block_374: // preds: addr_0_block_369
      nextln:   store.i64 v1838, v1780
      nextln:   jump addr_0_block_375
      check: addr_0_block_375: // preds: addr_0_block_370 addr_0_block_374
      check: addr_0_block_376: // preds: addr_0_block_362
      nextln:   jump addr_0_block_377(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_377(v1839: i8, v1840: i1, v1841: i16, v1842: i8, v1843: bool, v1844: bool, v1845: bool, v1846: int, v1847: i64, v1848: i8, v1849: i8, v1850: i52, v1851: i1, v1852: bool, v1853: bool, v1854: int, v1855: i1, v1856: bool, v1857: i4, v1858: i2, v1859: i4, v1860: i8, v1861: i8, v1862: i2, v1863: i2, v1864: bool, v1865: i2, v1866: i2, v1867: bool, v1868: bool, v1869: bool, v1870: bool, v1871: i52, v1872: i1, v1873: i64, v1874: i2, v1875: bool): // preds: addr_0_block_363 addr_0_block_376
      nextln:   v1876 = bool.icmp.i8.ne v1784, 0x0
      nextln:   v1877 = bool.bitwise_not v1876
      nextln:   v1878 = bool.and v1877, 0x1
      nextln:   v1879 = bool.icmp.i8.ne v1784, 0x0
      nextln:   v1880 = bool.bitwise_not v1879
      nextln:   v1881 = bool.and 0x1, v1880
      nextln:   jumpif v1881, addr_0_block_378, addr_0_block_379
      check: addr_0_block_378: // preds: addr_0_block_377
      nextln:   jump addr_0_block_380
      check: addr_0_block_379: // preds: addr_0_block_377
      nextln:   jump addr_0_block_380
      check: addr_0_block_380: // preds: addr_0_block_378 addr_0_block_379
      nextln:   v1882 = bool.icmp.i8.ne v1784, 0x0
      nextln:   jumpif v1882, addr_0_block_381, addr_0_block_382
      check: addr_0_block_381: // preds: addr_0_block_380
      nextln:   jump addr_0_block_383
      check: addr_0_block_382: // preds: addr_0_block_380
      nextln:   jump addr_0_block_383
      check: addr_0_block_383: // preds: addr_0_block_381 addr_0_block_382
      nextln:   v1883 = i52.unsigned_from_bits v1807
      nextln:   v1884 = int.modulo v1883, 0x1
      nextln:   v1885 = int.sub v1883, v1884
      nextln:   v1886 = i52.to_bits v1885
      nextln:   v1887 = bool.icmp.i52.eq v1807, v1886
      nextln:   v1888 = i8.load v1807
      nextln:   v1889 = i8.lshl v1888, 0x8
      nextln:   v1890 = i64.or 0x0, v1889
      nextln:   v1891 = i64.wrapping_add v21, 0x2
      nextln:   v1892 = i64.unsigned_from_bits v1891
      nextln:   v1893 = int.modulo v1892, 0x1
      nextln:   v1894 = int.sub v1892, v1893
      nextln:   v1895 = i64.to_bits v1894
      nextln:   v1896 = bool.icmp.i64.eq v1891, v1895
      nextln:   v1897 = i64.lshr v1891, 0x30
      nextln:   v1898 = i16.trunc.i64 v1897
      nextln:   v1899 = bool.icmp.i16.eq v1898, 0x0
      nextln:   v1900 = bool.bitwise_not v1899
      nextln:   jumpif v1900, addr_0_block_384, addr_0_block_385
      check: addr_0_block_384: // preds: addr_0_block_383
      nextln:   jump addr_0_block_386(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_387(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_385: // preds: addr_0_block_383
      nextln:   jump addr_0_block_386(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_386(v2858: i52, v2859: int, v2860: bool, v2861: bool): // preds: addr_0_block_385
      nextln:   v2862 = i52.trunc.i64 v1891
      nextln:   jump addr_0_block_387(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v2862, 0x1, 0x0)
      check: addr_0_block_387(v1901: i3, v1902: i1, v1903: i1, v1904: i1, v1905: i1, v1906: i4, v1907: i1, v1908: bool, v1909: int, v1910: int, v1911: bool, v1912: bool, v1913: i8, v1914: i8, v1915: i52, v1916: i1, v1917: bool, v1918: bool, v1919: int, v1920: i1, v1921: bool, v1922: i4, v1923: i2, v1924: i4, v1925: i8, v1926: i8, v1927: i2, v1928: i2, v1929: bool, v1930: i2, v1931: i2, v1932: bool, v1933: bool, v1934: bool, v1935: bool, v1936: i52, v1937: i1, v1938: i64, v1939: i1, v1940: i8, v1941: i8, v1942: i52, v1943: i1, v1944: bool, v1945: bool, v1946: int, v1947: i1, v1948: bool, v1949: i4, v1950: i2, v1951: i4, v1952: i8, v1953: i8, v1954: i2, v1955: i2, v1956: bool, v1957: i2, v1958: i2, v1959: bool, v1960: bool, v1961: bool, v1962: bool, v1963: i52, v1964: i1, v1965: i64): // preds: addr_0_block_384 addr_0_block_386
      nextln:   v1966 = bool.icmp.i8.ne v1940, 0x0
      nextln:   v1967 = bool.bitwise_not v1966
      nextln:   v1968 = bool.bitwise_not v26
      nextln:   v1969 = bool.and v1968, 0x1
      nextln:   v1970 = bool.or v1969, 0x0
      nextln:   v1971 = bool.icmp.i8.ne v1940, 0x0
      nextln:   v1972 = bool.bitwise_not v1971
      nextln:   v1973 = bool.and v1970, v1972
      nextln:   v1974 = bool.icmp.i8.eq v1952, 0x1
      nextln:   v1975 = bool.and v1973, v1974
      nextln:   jumpif v1975, addr_0_block_388, addr_0_block_389
      check: addr_0_block_388: // preds: addr_0_block_387
      nextln:   jump addr_0_block_390
      check: addr_0_block_389: // preds: addr_0_block_387
      nextln:   jump addr_0_block_390
      check: addr_0_block_390: // preds: addr_0_block_388 addr_0_block_389
      nextln:   v1976 = bool.icmp.i8.ne v1940, 0x0
      nextln:   v1977 = bool.bitwise_not v1976
      nextln:   v1978 = bool.icmp.i8.ne v1940, 0x0
      nextln:   v1979 = bool.bitwise_not v1978
      nextln:   v1980 = bool.icmp.i8.eq v1952, 0x1
      nextln:   v1981 = bool.and v1979, v1980
      nextln:   jumpif v1911, addr_0_block_391, addr_0_block_392
      check: addr_0_block_391: // preds: addr_0_block_390
      nextln:   v1982 = bool.icmp.i8.eq v1940, 0x0
      nextln:   jump addr_0_block_393(0x1)
      check: addr_0_block_392: // preds: addr_0_block_390
      nextln:   jump addr_0_block_393(0x0)
      check: addr_0_block_393(v1983: bool): // preds: addr_0_block_391 addr_0_block_392
      nextln:   v1984 = bool.icmp.i8.eq v1940, 0x0
      nextln:   v1985 = bool.and v1912, v1984
      nextln:   jumpif v1985, addr_0_block_394, addr_0_block_395
      check: addr_0_block_394: // preds: addr_0_block_393
      nextln:   jump addr_0_block_396(0x0, 0x0)
      check: addr_0_block_395: // preds: addr_0_block_393
      nextln:   jump addr_0_block_396(0x0, 0x0)
      check: addr_0_block_396(v1986: bool, v1987: bool): // preds: addr_0_block_394 addr_0_block_395
      nextln:   v1988 = bool.or v1983, v1986
      nextln:   jumpif v1988, addr_0_block_397, addr_0_block_410
      check: addr_0_block_397: // preds: addr_0_block_396
      nextln:   v1989 = i52.unsigned_from_bits v1936
      nextln:   v1990 = int.modulo v1989, 0x8
      nextln:   v1991 = int.sub v1989, v1990
      nextln:   v1992 = i52.to_bits v1991
      nextln:   v1993 = bool.icmp.i52.eq v1936, v1992
      nextln:   v1994 = i64.load v1936
      nextln:   jumpif v1983, addr_0_block_398, addr_0_block_399
      nextln:   jump addr_0_block_411(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v1994, v1913, v1914, v1915, v1916, v1917, v1918, v1919, v1920, v1921, v1922, v1923, v1924, v1925, v1926, v1927, v1928, v1929, v1930, v1931, v1932, v1933, v1934, v1935, v1936, v1937, v1938, 0x0, 0x0)
      check: addr_0_block_398: // no preds!
      nextln:   jump addr_0_block_400
      check: addr_0_block_399: // no preds!
      nextln:   jump addr_0_block_400
      check: addr_0_block_400: // preds: addr_0_block_398 addr_0_block_399
      nextln:   jumpif v1986, addr_0_block_401, addr_0_block_402
      check: addr_0_block_401: // preds: addr_0_block_400
      nextln:   jump addr_0_block_403
      check: addr_0_block_402: // preds: addr_0_block_400
      nextln:   jump addr_0_block_403
      check: addr_0_block_403: // preds: addr_0_block_401 addr_0_block_402
      nextln:   v2893 = i52.unsigned_from_bits v1936
      nextln:   v2894 = int.modulo v2893, 0x8
      nextln:   v2895 = int.sub v2893, v2894
      nextln:   v2896 = i52.to_bits v2895
      nextln:   v2897 = bool.icmp.i52.eq v1936, v2896
      nextln:   v2898 = bool.icmp.i52.eq v1936, 0x13000000
      nextln:   jumpif v2898, addr_0_block_404, addr_0_block_408
      check: addr_0_block_404: // preds: addr_0_block_403
      nextln:   v2899 = i64.unsigned_from_bits v1994
      nextln:   v2900 = bool.icmp.int.eq v2899, 0x4
      nextln:   jumpif v2900, addr_0_block_405, addr_0_block_406
      nextln:   jump addr_0_block_409
      check: addr_0_block_405: // no preds!
      nextln:   jump addr_0_block_407
      check: addr_0_block_406: // no preds!
      nextln:   v2901 = i8.trunc.i64 v1994
      nextln:   v2902 = i8.unsigned_from_bits v2901
      nextln:   jump addr_0_block_407
      check: addr_0_block_407: // preds: addr_0_block_405 addr_0_block_406
      check: addr_0_block_408: // preds: addr_0_block_403
      nextln:   store.i64 v1994, v1936
      nextln:   jump addr_0_block_409
      check: addr_0_block_409: // preds: addr_0_block_404 addr_0_block_408
      check: addr_0_block_410: // preds: addr_0_block_396
      nextln:   jump addr_0_block_411(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_411(v1995: i8, v1996: i1, v1997: i16, v1998: i8, v1999: bool, v2000: bool, v2001: bool, v2002: int, v2003: i64, v2004: i8, v2005: i8, v2006: i52, v2007: i1, v2008: bool, v2009: bool, v2010: int, v2011: i1, v2012: bool, v2013: i4, v2014: i2, v2015: i4, v2016: i8, v2017: i8, v2018: i2, v2019: i2, v2020: bool, v2021: i2, v2022: i2, v2023: bool, v2024: bool, v2025: bool, v2026: bool, v2027: i52, v2028: i1, v2029: i64, v2030: i2, v2031: bool): // preds: addr_0_block_397 addr_0_block_410
      nextln:   v2032 = bool.icmp.i8.ne v1940, 0x0
      nextln:   v2033 = bool.bitwise_not v2032
      nextln:   v2034 = bool.and v2033, 0x1
      nextln:   v2035 = bool.icmp.i8.ne v1940, 0x0
      nextln:   v2036 = bool.bitwise_not v2035
      nextln:   v2037 = bool.and 0x1, v2036
      nextln:   jumpif v2037, addr_0_block_412, addr_0_block_413
      check: addr_0_block_412: // preds: addr_0_block_411
      nextln:   jump addr_0_block_414
      check: addr_0_block_413: // preds: addr_0_block_411
      nextln:   jump addr_0_block_414
      check: addr_0_block_414: // preds: addr_0_block_412 addr_0_block_413
      nextln:   v2038 = bool.icmp.i8.ne v1940, 0x0
      nextln:   jumpif v2038, addr_0_block_415, addr_0_block_416
      check: addr_0_block_415: // preds: addr_0_block_414
      nextln:   jump addr_0_block_417
      check: addr_0_block_416: // preds: addr_0_block_414
      nextln:   jump addr_0_block_417
      check: addr_0_block_417: // preds: addr_0_block_415 addr_0_block_416
      nextln:   v2039 = i52.unsigned_from_bits v1963
      nextln:   v2040 = int.modulo v2039, 0x1
      nextln:   v2041 = int.sub v2039, v2040
      nextln:   v2042 = i52.to_bits v2041
      nextln:   v2043 = bool.icmp.i52.eq v1963, v2042
      nextln:   v2044 = i8.load v1963
      nextln:   v2045 = i64.and v1890, 0xffffffffff00ffff
      nextln:   v2046 = i8.lshl v2044, 0x10
      nextln:   v2047 = i64.or v2045, v2046
      nextln:   v2048 = i64.wrapping_add v21, 0x3
      nextln:   v2049 = i64.unsigned_from_bits v2048
      nextln:   v2050 = int.modulo v2049, 0x1
      nextln:   v2051 = int.sub v2049, v2050
      nextln:   v2052 = i64.to_bits v2051
      nextln:   v2053 = bool.icmp.i64.eq v2048, v2052
      nextln:   v2054 = i64.lshr v2048, 0x30
      nextln:   v2055 = i16.trunc.i64 v2054
      nextln:   v2056 = bool.icmp.i16.eq v2055, 0x0
      nextln:   v2057 = bool.bitwise_not v2056
      nextln:   jumpif v2057, addr_0_block_418, addr_0_block_419
      check: addr_0_block_418: // preds: addr_0_block_417
      nextln:   jump addr_0_block_420(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_421(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_419: // preds: addr_0_block_417
      nextln:   jump addr_0_block_420(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_420(v2853: i52, v2854: int, v2855: bool, v2856: bool): // preds: addr_0_block_419
      nextln:   v2857 = i52.trunc.i64 v2048
      nextln:   jump addr_0_block_421(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v2857, 0x1, 0x0)
      check: addr_0_block_421(v2058: i3, v2059: i1, v2060: i1, v2061: i1, v2062: i1, v2063: i4, v2064: i1, v2065: bool, v2066: int, v2067: int, v2068: bool, v2069: bool, v2070: i8, v2071: i8, v2072: i52, v2073: i1, v2074: bool, v2075: bool, v2076: int, v2077: i1, v2078: bool, v2079: i4, v2080: i2, v2081: i4, v2082: i8, v2083: i8, v2084: i2, v2085: i2, v2086: bool, v2087: i2, v2088: i2, v2089: bool, v2090: bool, v2091: bool, v2092: bool, v2093: i52, v2094: i1, v2095: i64, v2096: i1, v2097: i8, v2098: i8, v2099: i52, v2100: i1, v2101: bool, v2102: bool, v2103: int, v2104: i1, v2105: bool, v2106: i4, v2107: i2, v2108: i4, v2109: i8, v2110: i8, v2111: i2, v2112: i2, v2113: bool, v2114: i2, v2115: i2, v2116: bool, v2117: bool, v2118: bool, v2119: bool, v2120: i52, v2121: i1, v2122: i64): // preds: addr_0_block_418 addr_0_block_420
      nextln:   v2123 = bool.icmp.i8.ne v2097, 0x0
      nextln:   v2124 = bool.bitwise_not v2123
      nextln:   v2125 = bool.bitwise_not v26
      nextln:   v2126 = bool.and v2125, 0x1
      nextln:   v2127 = bool.or v2126, 0x0
      nextln:   v2128 = bool.icmp.i8.ne v2097, 0x0
      nextln:   v2129 = bool.bitwise_not v2128
      nextln:   v2130 = bool.and v2127, v2129
      nextln:   v2131 = bool.icmp.i8.eq v2109, 0x1
      nextln:   v2132 = bool.and v2130, v2131
      nextln:   jumpif v2132, addr_0_block_422, addr_0_block_423
      check: addr_0_block_422: // preds: addr_0_block_421
      nextln:   jump addr_0_block_424
      check: addr_0_block_423: // preds: addr_0_block_421
      nextln:   jump addr_0_block_424
      check: addr_0_block_424: // preds: addr_0_block_422 addr_0_block_423
      nextln:   v2133 = bool.icmp.i8.ne v2097, 0x0
      nextln:   v2134 = bool.bitwise_not v2133
      nextln:   v2135 = bool.icmp.i8.ne v2097, 0x0
      nextln:   v2136 = bool.bitwise_not v2135
      nextln:   v2137 = bool.icmp.i8.eq v2109, 0x1
      nextln:   v2138 = bool.and v2136, v2137
      nextln:   jumpif v2068, addr_0_block_425, addr_0_block_426
      check: addr_0_block_425: // preds: addr_0_block_424
      nextln:   v2139 = bool.icmp.i8.eq v2097, 0x0
      nextln:   jump addr_0_block_427(0x1)
      check: addr_0_block_426: // preds: addr_0_block_424
      nextln:   jump addr_0_block_427(0x0)
      check: addr_0_block_427(v2140: bool): // preds: addr_0_block_425 addr_0_block_426
      nextln:   v2141 = bool.icmp.i8.eq v2097, 0x0
      nextln:   v2142 = bool.and v2069, v2141
      nextln:   jumpif v2142, addr_0_block_428, addr_0_block_429
      check: addr_0_block_428: // preds: addr_0_block_427
      nextln:   jump addr_0_block_430(0x0, 0x0)
      check: addr_0_block_429: // preds: addr_0_block_427
      nextln:   jump addr_0_block_430(0x0, 0x0)
      check: addr_0_block_430(v2143: bool, v2144: bool): // preds: addr_0_block_428 addr_0_block_429
      nextln:   v2145 = bool.or v2140, v2143
      nextln:   jumpif v2145, addr_0_block_431, addr_0_block_444
      check: addr_0_block_431: // preds: addr_0_block_430
      nextln:   v2146 = i52.unsigned_from_bits v2093
      nextln:   v2147 = int.modulo v2146, 0x8
      nextln:   v2148 = int.sub v2146, v2147
      nextln:   v2149 = i52.to_bits v2148
      nextln:   v2150 = bool.icmp.i52.eq v2093, v2149
      nextln:   v2151 = i64.load v2093
      nextln:   jumpif v2140, addr_0_block_432, addr_0_block_433
      nextln:   jump addr_0_block_445(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v2151, v2070, v2071, v2072, v2073, v2074, v2075, v2076, v2077, v2078, v2079, v2080, v2081, v2082, v2083, v2084, v2085, v2086, v2087, v2088, v2089, v2090, v2091, v2092, v2093, v2094, v2095, 0x0, 0x0)
      check: addr_0_block_432: // no preds!
      nextln:   jump addr_0_block_434
      check: addr_0_block_433: // no preds!
      nextln:   jump addr_0_block_434
      check: addr_0_block_434: // preds: addr_0_block_432 addr_0_block_433
      nextln:   jumpif v2143, addr_0_block_435, addr_0_block_436
      check: addr_0_block_435: // preds: addr_0_block_434
      nextln:   jump addr_0_block_437
      check: addr_0_block_436: // preds: addr_0_block_434
      nextln:   jump addr_0_block_437
      check: addr_0_block_437: // preds: addr_0_block_435 addr_0_block_436
      nextln:   v2903 = i52.unsigned_from_bits v2093
      nextln:   v2904 = int.modulo v2903, 0x8
      nextln:   v2905 = int.sub v2903, v2904
      nextln:   v2906 = i52.to_bits v2905
      nextln:   v2907 = bool.icmp.i52.eq v2093, v2906
      nextln:   v2908 = bool.icmp.i52.eq v2093, 0x13000000
      nextln:   jumpif v2908, addr_0_block_438, addr_0_block_442
      check: addr_0_block_438: // preds: addr_0_block_437
      nextln:   v2909 = i64.unsigned_from_bits v2151
      nextln:   v2910 = bool.icmp.int.eq v2909, 0x4
      nextln:   jumpif v2910, addr_0_block_439, addr_0_block_440
      nextln:   jump addr_0_block_443
      check: addr_0_block_439: // no preds!
      nextln:   jump addr_0_block_441
      check: addr_0_block_440: // no preds!
      nextln:   v2911 = i8.trunc.i64 v2151
      nextln:   v2912 = i8.unsigned_from_bits v2911
      nextln:   jump addr_0_block_441
      check: addr_0_block_441: // preds: addr_0_block_439 addr_0_block_440
      check: addr_0_block_442: // preds: addr_0_block_437
      nextln:   store.i64 v2151, v2093
      nextln:   jump addr_0_block_443
      check: addr_0_block_443: // preds: addr_0_block_438 addr_0_block_442
      check: addr_0_block_444: // preds: addr_0_block_430
      nextln:   jump addr_0_block_445(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_445(v2152: i8, v2153: i1, v2154: i16, v2155: i8, v2156: bool, v2157: bool, v2158: bool, v2159: int, v2160: i64, v2161: i8, v2162: i8, v2163: i52, v2164: i1, v2165: bool, v2166: bool, v2167: int, v2168: i1, v2169: bool, v2170: i4, v2171: i2, v2172: i4, v2173: i8, v2174: i8, v2175: i2, v2176: i2, v2177: bool, v2178: i2, v2179: i2, v2180: bool, v2181: bool, v2182: bool, v2183: bool, v2184: i52, v2185: i1, v2186: i64, v2187: i2, v2188: bool): // preds: addr_0_block_431 addr_0_block_444
      nextln:   v2189 = bool.icmp.i8.ne v2097, 0x0
      nextln:   v2190 = bool.bitwise_not v2189
      nextln:   v2191 = bool.and v2190, 0x1
      nextln:   v2192 = bool.icmp.i8.ne v2097, 0x0
      nextln:   v2193 = bool.bitwise_not v2192
      nextln:   v2194 = bool.and 0x1, v2193
      nextln:   jumpif v2194, addr_0_block_446, addr_0_block_447
      check: addr_0_block_446: // preds: addr_0_block_445
      nextln:   jump addr_0_block_448
      check: addr_0_block_447: // preds: addr_0_block_445
      nextln:   jump addr_0_block_448
      check: addr_0_block_448: // preds: addr_0_block_446 addr_0_block_447
      nextln:   v2195 = bool.icmp.i8.ne v2097, 0x0
      nextln:   jumpif v2195, addr_0_block_449, addr_0_block_450
      check: addr_0_block_449: // preds: addr_0_block_448
      nextln:   jump addr_0_block_451
      check: addr_0_block_450: // preds: addr_0_block_448
      nextln:   jump addr_0_block_451
      check: addr_0_block_451: // preds: addr_0_block_449 addr_0_block_450
      nextln:   v2196 = i52.unsigned_from_bits v2120
      nextln:   v2197 = int.modulo v2196, 0x1
      nextln:   v2198 = int.sub v2196, v2197
      nextln:   v2199 = i52.to_bits v2198
      nextln:   v2200 = bool.icmp.i52.eq v2120, v2199
      nextln:   v2201 = i8.load v2120
      nextln:   v2202 = i64.and v2047, 0xffffffff00ffffff
      nextln:   v2203 = i8.lshl v2201, 0x18
      nextln:   v2204 = i64.or v2202, v2203
      nextln:   v2205 = i64.wrapping_add v21, 0x4
      nextln:   v2206 = i64.unsigned_from_bits v2205
      nextln:   v2207 = int.modulo v2206, 0x1
      nextln:   v2208 = int.sub v2206, v2207
      nextln:   v2209 = i64.to_bits v2208
      nextln:   v2210 = bool.icmp.i64.eq v2205, v2209
      nextln:   v2211 = i64.lshr v2205, 0x30
      nextln:   v2212 = i16.trunc.i64 v2211
      nextln:   v2213 = bool.icmp.i16.eq v2212, 0x0
      nextln:   v2214 = bool.bitwise_not v2213
      nextln:   jumpif v2214, addr_0_block_452, addr_0_block_453
      check: addr_0_block_452: // preds: addr_0_block_451
      nextln:   jump addr_0_block_454(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_455(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_453: // preds: addr_0_block_451
      nextln:   jump addr_0_block_454(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_454(v2848: i52, v2849: int, v2850: bool, v2851: bool): // preds: addr_0_block_453
      nextln:   v2852 = i52.trunc.i64 v2205
      nextln:   jump addr_0_block_455(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v2852, 0x1, 0x0)
      check: addr_0_block_455(v2215: i3, v2216: i1, v2217: i1, v2218: i1, v2219: i1, v2220: i4, v2221: i1, v2222: bool, v2223: int, v2224: int, v2225: bool, v2226: bool, v2227: i8, v2228: i8, v2229: i52, v2230: i1, v2231: bool, v2232: bool, v2233: int, v2234: i1, v2235: bool, v2236: i4, v2237: i2, v2238: i4, v2239: i8, v2240: i8, v2241: i2, v2242: i2, v2243: bool, v2244: i2, v2245: i2, v2246: bool, v2247: bool, v2248: bool, v2249: bool, v2250: i52, v2251: i1, v2252: i64, v2253: i1, v2254: i8, v2255: i8, v2256: i52, v2257: i1, v2258: bool, v2259: bool, v2260: int, v2261: i1, v2262: bool, v2263: i4, v2264: i2, v2265: i4, v2266: i8, v2267: i8, v2268: i2, v2269: i2, v2270: bool, v2271: i2, v2272: i2, v2273: bool, v2274: bool, v2275: bool, v2276: bool, v2277: i52, v2278: i1, v2279: i64): // preds: addr_0_block_452 addr_0_block_454
      nextln:   v2280 = bool.icmp.i8.ne v2254, 0x0
      nextln:   v2281 = bool.bitwise_not v2280
      nextln:   v2282 = bool.bitwise_not v26
      nextln:   v2283 = bool.and v2282, 0x1
      nextln:   v2284 = bool.or v2283, 0x0
      nextln:   v2285 = bool.icmp.i8.ne v2254, 0x0
      nextln:   v2286 = bool.bitwise_not v2285
      nextln:   v2287 = bool.and v2284, v2286
      nextln:   v2288 = bool.icmp.i8.eq v2266, 0x1
      nextln:   v2289 = bool.and v2287, v2288
      nextln:   jumpif v2289, addr_0_block_456, addr_0_block_457
      check: addr_0_block_456: // preds: addr_0_block_455
      nextln:   jump addr_0_block_458
      check: addr_0_block_457: // preds: addr_0_block_455
      nextln:   jump addr_0_block_458
      check: addr_0_block_458: // preds: addr_0_block_456 addr_0_block_457
      nextln:   v2290 = bool.icmp.i8.ne v2254, 0x0
      nextln:   v2291 = bool.bitwise_not v2290
      nextln:   v2292 = bool.icmp.i8.ne v2254, 0x0
      nextln:   v2293 = bool.bitwise_not v2292
      nextln:   v2294 = bool.icmp.i8.eq v2266, 0x1
      nextln:   v2295 = bool.and v2293, v2294
      nextln:   jumpif v2225, addr_0_block_459, addr_0_block_460
      check: addr_0_block_459: // preds: addr_0_block_458
      nextln:   v2296 = bool.icmp.i8.eq v2254, 0x0
      nextln:   jump addr_0_block_461(0x1)
      check: addr_0_block_460: // preds: addr_0_block_458
      nextln:   jump addr_0_block_461(0x0)
      check: addr_0_block_461(v2297: bool): // preds: addr_0_block_459 addr_0_block_460
      nextln:   v2298 = bool.icmp.i8.eq v2254, 0x0
      nextln:   v2299 = bool.and v2226, v2298
      nextln:   jumpif v2299, addr_0_block_462, addr_0_block_463
      check: addr_0_block_462: // preds: addr_0_block_461
      nextln:   jump addr_0_block_464(0x0, 0x0)
      check: addr_0_block_463: // preds: addr_0_block_461
      nextln:   jump addr_0_block_464(0x0, 0x0)
      check: addr_0_block_464(v2300: bool, v2301: bool): // preds: addr_0_block_462 addr_0_block_463
      nextln:   v2302 = bool.or v2297, v2300
      nextln:   jumpif v2302, addr_0_block_465, addr_0_block_478
      check: addr_0_block_465: // preds: addr_0_block_464
      nextln:   v2303 = i52.unsigned_from_bits v2250
      nextln:   v2304 = int.modulo v2303, 0x8
      nextln:   v2305 = int.sub v2303, v2304
      nextln:   v2306 = i52.to_bits v2305
      nextln:   v2307 = bool.icmp.i52.eq v2250, v2306
      nextln:   v2308 = i64.load v2250
      nextln:   jumpif v2297, addr_0_block_466, addr_0_block_467
      nextln:   jump addr_0_block_479(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v2308, v2227, v2228, v2229, v2230, v2231, v2232, v2233, v2234, v2235, v2236, v2237, v2238, v2239, v2240, v2241, v2242, v2243, v2244, v2245, v2246, v2247, v2248, v2249, v2250, v2251, v2252, 0x0, 0x0)
      check: addr_0_block_466: // no preds!
      nextln:   jump addr_0_block_468
      check: addr_0_block_467: // no preds!
      nextln:   jump addr_0_block_468
      check: addr_0_block_468: // preds: addr_0_block_466 addr_0_block_467
      nextln:   jumpif v2300, addr_0_block_469, addr_0_block_470
      check: addr_0_block_469: // preds: addr_0_block_468
      nextln:   jump addr_0_block_471
      check: addr_0_block_470: // preds: addr_0_block_468
      nextln:   jump addr_0_block_471
      check: addr_0_block_471: // preds: addr_0_block_469 addr_0_block_470
      nextln:   v2913 = i52.unsigned_from_bits v2250
      nextln:   v2914 = int.modulo v2913, 0x8
      nextln:   v2915 = int.sub v2913, v2914
      nextln:   v2916 = i52.to_bits v2915
      nextln:   v2917 = bool.icmp.i52.eq v2250, v2916
      nextln:   v2918 = bool.icmp.i52.eq v2250, 0x13000000
      nextln:   jumpif v2918, addr_0_block_472, addr_0_block_476
      check: addr_0_block_472: // preds: addr_0_block_471
      nextln:   v2919 = i64.unsigned_from_bits v2308
      nextln:   v2920 = bool.icmp.int.eq v2919, 0x4
      nextln:   jumpif v2920, addr_0_block_473, addr_0_block_474
      nextln:   jump addr_0_block_477
      check: addr_0_block_473: // no preds!
      nextln:   jump addr_0_block_475
      check: addr_0_block_474: // no preds!
      nextln:   v2921 = i8.trunc.i64 v2308
      nextln:   v2922 = i8.unsigned_from_bits v2921
      nextln:   jump addr_0_block_475
      check: addr_0_block_475: // preds: addr_0_block_473 addr_0_block_474
      check: addr_0_block_476: // preds: addr_0_block_471
      nextln:   store.i64 v2308, v2250
      nextln:   jump addr_0_block_477
      check: addr_0_block_477: // preds: addr_0_block_472 addr_0_block_476
      check: addr_0_block_478: // preds: addr_0_block_464
      nextln:   jump addr_0_block_479(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_479(v2309: i8, v2310: i1, v2311: i16, v2312: i8, v2313: bool, v2314: bool, v2315: bool, v2316: int, v2317: i64, v2318: i8, v2319: i8, v2320: i52, v2321: i1, v2322: bool, v2323: bool, v2324: int, v2325: i1, v2326: bool, v2327: i4, v2328: i2, v2329: i4, v2330: i8, v2331: i8, v2332: i2, v2333: i2, v2334: bool, v2335: i2, v2336: i2, v2337: bool, v2338: bool, v2339: bool, v2340: bool, v2341: i52, v2342: i1, v2343: i64, v2344: i2, v2345: bool): // preds: addr_0_block_465 addr_0_block_478
      nextln:   v2346 = bool.icmp.i8.ne v2254, 0x0
      nextln:   v2347 = bool.bitwise_not v2346
      nextln:   v2348 = bool.and v2347, 0x1
      nextln:   v2349 = bool.icmp.i8.ne v2254, 0x0
      nextln:   v2350 = bool.bitwise_not v2349
      nextln:   v2351 = bool.and 0x1, v2350
      nextln:   jumpif v2351, addr_0_block_480, addr_0_block_481
      check: addr_0_block_480: // preds: addr_0_block_479
      nextln:   jump addr_0_block_482
      check: addr_0_block_481: // preds: addr_0_block_479
      nextln:   jump addr_0_block_482
      check: addr_0_block_482: // preds: addr_0_block_480 addr_0_block_481
      nextln:   v2352 = bool.icmp.i8.ne v2254, 0x0
      nextln:   jumpif v2352, addr_0_block_483, addr_0_block_484
      check: addr_0_block_483: // preds: addr_0_block_482
      nextln:   jump addr_0_block_485
      check: addr_0_block_484: // preds: addr_0_block_482
      nextln:   jump addr_0_block_485
      check: addr_0_block_485: // preds: addr_0_block_483 addr_0_block_484
      nextln:   v2353 = i52.unsigned_from_bits v2277
      nextln:   v2354 = int.modulo v2353, 0x1
      nextln:   v2355 = int.sub v2353, v2354
      nextln:   v2356 = i52.to_bits v2355
      nextln:   v2357 = bool.icmp.i52.eq v2277, v2356
      nextln:   v2358 = i8.load v2277
      nextln:   v2359 = i64.and v2204, 0xffffff00ffffffff
      nextln:   v2360 = i8.lshl v2358, 0x20
      nextln:   v2361 = i64.or v2359, v2360
      nextln:   v2362 = i64.wrapping_add v21, 0x5
      nextln:   v2363 = i64.unsigned_from_bits v2362
      nextln:   v2364 = int.modulo v2363, 0x1
      nextln:   v2365 = int.sub v2363, v2364
      nextln:   v2366 = i64.to_bits v2365
      nextln:   v2367 = bool.icmp.i64.eq v2362, v2366
      nextln:   v2368 = i64.lshr v2362, 0x30
      nextln:   v2369 = i16.trunc.i64 v2368
      nextln:   v2370 = bool.icmp.i16.eq v2369, 0x0
      nextln:   v2371 = bool.bitwise_not v2370
      nextln:   jumpif v2371, addr_0_block_486, addr_0_block_487
      check: addr_0_block_486: // preds: addr_0_block_485
      nextln:   jump addr_0_block_488(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_489(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_487: // preds: addr_0_block_485
      nextln:   jump addr_0_block_488(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_488(v2843: i52, v2844: int, v2845: bool, v2846: bool): // preds: addr_0_block_487
      nextln:   v2847 = i52.trunc.i64 v2362
      nextln:   jump addr_0_block_489(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v2847, 0x1, 0x0)
      check: addr_0_block_489(v2372: i3, v2373: i1, v2374: i1, v2375: i1, v2376: i1, v2377: i4, v2378: i1, v2379: bool, v2380: int, v2381: int, v2382: bool, v2383: bool, v2384: i8, v2385: i8, v2386: i52, v2387: i1, v2388: bool, v2389: bool, v2390: int, v2391: i1, v2392: bool, v2393: i4, v2394: i2, v2395: i4, v2396: i8, v2397: i8, v2398: i2, v2399: i2, v2400: bool, v2401: i2, v2402: i2, v2403: bool, v2404: bool, v2405: bool, v2406: bool, v2407: i52, v2408: i1, v2409: i64, v2410: i1, v2411: i8, v2412: i8, v2413: i52, v2414: i1, v2415: bool, v2416: bool, v2417: int, v2418: i1, v2419: bool, v2420: i4, v2421: i2, v2422: i4, v2423: i8, v2424: i8, v2425: i2, v2426: i2, v2427: bool, v2428: i2, v2429: i2, v2430: bool, v2431: bool, v2432: bool, v2433: bool, v2434: i52, v2435: i1, v2436: i64): // preds: addr_0_block_486 addr_0_block_488
      nextln:   v2437 = bool.icmp.i8.ne v2411, 0x0
      nextln:   v2438 = bool.bitwise_not v2437
      nextln:   v2439 = bool.bitwise_not v26
      nextln:   v2440 = bool.and v2439, 0x1
      nextln:   v2441 = bool.or v2440, 0x0
      nextln:   v2442 = bool.icmp.i8.ne v2411, 0x0
      nextln:   v2443 = bool.bitwise_not v2442
      nextln:   v2444 = bool.and v2441, v2443
      nextln:   v2445 = bool.icmp.i8.eq v2423, 0x1
      nextln:   v2446 = bool.and v2444, v2445
      nextln:   jumpif v2446, addr_0_block_490, addr_0_block_491
      check: addr_0_block_490: // preds: addr_0_block_489
      nextln:   jump addr_0_block_492
      check: addr_0_block_491: // preds: addr_0_block_489
      nextln:   jump addr_0_block_492
      check: addr_0_block_492: // preds: addr_0_block_490 addr_0_block_491
      nextln:   v2447 = bool.icmp.i8.ne v2411, 0x0
      nextln:   v2448 = bool.bitwise_not v2447
      nextln:   v2449 = bool.icmp.i8.ne v2411, 0x0
      nextln:   v2450 = bool.bitwise_not v2449
      nextln:   v2451 = bool.icmp.i8.eq v2423, 0x1
      nextln:   v2452 = bool.and v2450, v2451
      nextln:   jumpif v2382, addr_0_block_493, addr_0_block_494
      check: addr_0_block_493: // preds: addr_0_block_492
      nextln:   v2453 = bool.icmp.i8.eq v2411, 0x0
      nextln:   jump addr_0_block_495(0x1)
      check: addr_0_block_494: // preds: addr_0_block_492
      nextln:   jump addr_0_block_495(0x0)
      check: addr_0_block_495(v2454: bool): // preds: addr_0_block_493 addr_0_block_494
      nextln:   v2455 = bool.icmp.i8.eq v2411, 0x0
      nextln:   v2456 = bool.and v2383, v2455
      nextln:   jumpif v2456, addr_0_block_496, addr_0_block_497
      check: addr_0_block_496: // preds: addr_0_block_495
      nextln:   jump addr_0_block_498(0x0, 0x0)
      check: addr_0_block_497: // preds: addr_0_block_495
      nextln:   jump addr_0_block_498(0x0, 0x0)
      check: addr_0_block_498(v2457: bool, v2458: bool): // preds: addr_0_block_496 addr_0_block_497
      nextln:   v2459 = bool.or v2454, v2457
      nextln:   jumpif v2459, addr_0_block_499, addr_0_block_512
      check: addr_0_block_499: // preds: addr_0_block_498
      nextln:   v2460 = i52.unsigned_from_bits v2407
      nextln:   v2461 = int.modulo v2460, 0x8
      nextln:   v2462 = int.sub v2460, v2461
      nextln:   v2463 = i52.to_bits v2462
      nextln:   v2464 = bool.icmp.i52.eq v2407, v2463
      nextln:   v2465 = i64.load v2407
      nextln:   jumpif v2454, addr_0_block_500, addr_0_block_501
      nextln:   jump addr_0_block_513(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v2465, v2384, v2385, v2386, v2387, v2388, v2389, v2390, v2391, v2392, v2393, v2394, v2395, v2396, v2397, v2398, v2399, v2400, v2401, v2402, v2403, v2404, v2405, v2406, v2407, v2408, v2409, 0x0, 0x0)
      check: addr_0_block_500: // no preds!
      nextln:   jump addr_0_block_502
      check: addr_0_block_501: // no preds!
      nextln:   jump addr_0_block_502
      check: addr_0_block_502: // preds: addr_0_block_500 addr_0_block_501
      nextln:   jumpif v2457, addr_0_block_503, addr_0_block_504
      check: addr_0_block_503: // preds: addr_0_block_502
      nextln:   jump addr_0_block_505
      check: addr_0_block_504: // preds: addr_0_block_502
      nextln:   jump addr_0_block_505
      check: addr_0_block_505: // preds: addr_0_block_503 addr_0_block_504
      nextln:   v2923 = i52.unsigned_from_bits v2407
      nextln:   v2924 = int.modulo v2923, 0x8
      nextln:   v2925 = int.sub v2923, v2924
      nextln:   v2926 = i52.to_bits v2925
      nextln:   v2927 = bool.icmp.i52.eq v2407, v2926
      nextln:   v2928 = bool.icmp.i52.eq v2407, 0x13000000
      nextln:   jumpif v2928, addr_0_block_506, addr_0_block_510
      check: addr_0_block_506: // preds: addr_0_block_505
      nextln:   v2929 = i64.unsigned_from_bits v2465
      nextln:   v2930 = bool.icmp.int.eq v2929, 0x4
      nextln:   jumpif v2930, addr_0_block_507, addr_0_block_508
      nextln:   jump addr_0_block_511
      check: addr_0_block_507: // no preds!
      nextln:   jump addr_0_block_509
      check: addr_0_block_508: // no preds!
      nextln:   v2931 = i8.trunc.i64 v2465
      nextln:   v2932 = i8.unsigned_from_bits v2931
      nextln:   jump addr_0_block_509
      check: addr_0_block_509: // preds: addr_0_block_507 addr_0_block_508
      check: addr_0_block_510: // preds: addr_0_block_505
      nextln:   store.i64 v2465, v2407
      nextln:   jump addr_0_block_511
      check: addr_0_block_511: // preds: addr_0_block_506 addr_0_block_510
      check: addr_0_block_512: // preds: addr_0_block_498
      nextln:   jump addr_0_block_513(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_513(v2466: i8, v2467: i1, v2468: i16, v2469: i8, v2470: bool, v2471: bool, v2472: bool, v2473: int, v2474: i64, v2475: i8, v2476: i8, v2477: i52, v2478: i1, v2479: bool, v2480: bool, v2481: int, v2482: i1, v2483: bool, v2484: i4, v2485: i2, v2486: i4, v2487: i8, v2488: i8, v2489: i2, v2490: i2, v2491: bool, v2492: i2, v2493: i2, v2494: bool, v2495: bool, v2496: bool, v2497: bool, v2498: i52, v2499: i1, v2500: i64, v2501: i2, v2502: bool): // preds: addr_0_block_499 addr_0_block_512
      nextln:   v2503 = bool.icmp.i8.ne v2411, 0x0
      nextln:   v2504 = bool.bitwise_not v2503
      nextln:   v2505 = bool.and v2504, 0x1
      nextln:   v2506 = bool.icmp.i8.ne v2411, 0x0
      nextln:   v2507 = bool.bitwise_not v2506
      nextln:   v2508 = bool.and 0x1, v2507
      nextln:   jumpif v2508, addr_0_block_514, addr_0_block_515
      check: addr_0_block_514: // preds: addr_0_block_513
      nextln:   jump addr_0_block_516
      check: addr_0_block_515: // preds: addr_0_block_513
      nextln:   jump addr_0_block_516
      check: addr_0_block_516: // preds: addr_0_block_514 addr_0_block_515
      nextln:   v2509 = bool.icmp.i8.ne v2411, 0x0
      nextln:   jumpif v2509, addr_0_block_517, addr_0_block_518
      check: addr_0_block_517: // preds: addr_0_block_516
      nextln:   jump addr_0_block_519
      check: addr_0_block_518: // preds: addr_0_block_516
      nextln:   jump addr_0_block_519
      check: addr_0_block_519: // preds: addr_0_block_517 addr_0_block_518
      nextln:   v2510 = i52.unsigned_from_bits v2434
      nextln:   v2511 = int.modulo v2510, 0x1
      nextln:   v2512 = int.sub v2510, v2511
      nextln:   v2513 = i52.to_bits v2512
      nextln:   v2514 = bool.icmp.i52.eq v2434, v2513
      nextln:   v2515 = i8.load v2434
      nextln:   v2516 = i64.and v2361, 0xffff00ffffffffff
      nextln:   v2517 = i8.lshl v2515, 0x28
      nextln:   v2518 = i64.or v2516, v2517
      nextln:   v2519 = i64.wrapping_add v21, 0x6
      nextln:   v2520 = i64.unsigned_from_bits v2519
      nextln:   v2521 = int.modulo v2520, 0x1
      nextln:   v2522 = int.sub v2520, v2521
      nextln:   v2523 = i64.to_bits v2522
      nextln:   v2524 = bool.icmp.i64.eq v2519, v2523
      nextln:   v2525 = i64.lshr v2519, 0x30
      nextln:   v2526 = i16.trunc.i64 v2525
      nextln:   v2527 = bool.icmp.i16.eq v2526, 0x0
      nextln:   v2528 = bool.bitwise_not v2527
      nextln:   jumpif v2528, addr_0_block_520, addr_0_block_521
      check: addr_0_block_520: // preds: addr_0_block_519
      nextln:   jump addr_0_block_522(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_523(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_521: // preds: addr_0_block_519
      nextln:   jump addr_0_block_522(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_522(v2838: i52, v2839: int, v2840: bool, v2841: bool): // preds: addr_0_block_521
      nextln:   v2842 = i52.trunc.i64 v2519
      nextln:   jump addr_0_block_523(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v2842, 0x1, 0x0)
      check: addr_0_block_523(v2529: i3, v2530: i1, v2531: i1, v2532: i1, v2533: i1, v2534: i4, v2535: i1, v2536: bool, v2537: int, v2538: int, v2539: bool, v2540: bool, v2541: i8, v2542: i8, v2543: i52, v2544: i1, v2545: bool, v2546: bool, v2547: int, v2548: i1, v2549: bool, v2550: i4, v2551: i2, v2552: i4, v2553: i8, v2554: i8, v2555: i2, v2556: i2, v2557: bool, v2558: i2, v2559: i2, v2560: bool, v2561: bool, v2562: bool, v2563: bool, v2564: i52, v2565: i1, v2566: i64, v2567: i1, v2568: i8, v2569: i8, v2570: i52, v2571: i1, v2572: bool, v2573: bool, v2574: int, v2575: i1, v2576: bool, v2577: i4, v2578: i2, v2579: i4, v2580: i8, v2581: i8, v2582: i2, v2583: i2, v2584: bool, v2585: i2, v2586: i2, v2587: bool, v2588: bool, v2589: bool, v2590: bool, v2591: i52, v2592: i1, v2593: i64): // preds: addr_0_block_520 addr_0_block_522
      nextln:   v2594 = bool.icmp.i8.ne v2568, 0x0
      nextln:   v2595 = bool.bitwise_not v2594
      nextln:   v2596 = bool.bitwise_not v26
      nextln:   v2597 = bool.and v2596, 0x1
      nextln:   v2598 = bool.or v2597, 0x0
      nextln:   v2599 = bool.icmp.i8.ne v2568, 0x0
      nextln:   v2600 = bool.bitwise_not v2599
      nextln:   v2601 = bool.and v2598, v2600
      nextln:   v2602 = bool.icmp.i8.eq v2580, 0x1
      nextln:   v2603 = bool.and v2601, v2602
      nextln:   jumpif v2603, addr_0_block_524, addr_0_block_525
      check: addr_0_block_524: // preds: addr_0_block_523
      nextln:   jump addr_0_block_526
      check: addr_0_block_525: // preds: addr_0_block_523
      nextln:   jump addr_0_block_526
      check: addr_0_block_526: // preds: addr_0_block_524 addr_0_block_525
      nextln:   v2604 = bool.icmp.i8.ne v2568, 0x0
      nextln:   v2605 = bool.bitwise_not v2604
      nextln:   v2606 = bool.icmp.i8.ne v2568, 0x0
      nextln:   v2607 = bool.bitwise_not v2606
      nextln:   v2608 = bool.icmp.i8.eq v2580, 0x1
      nextln:   v2609 = bool.and v2607, v2608
      nextln:   jumpif v2539, addr_0_block_527, addr_0_block_528
      check: addr_0_block_527: // preds: addr_0_block_526
      nextln:   v2610 = bool.icmp.i8.eq v2568, 0x0
      nextln:   jump addr_0_block_529(0x1)
      check: addr_0_block_528: // preds: addr_0_block_526
      nextln:   jump addr_0_block_529(0x0)
      check: addr_0_block_529(v2611: bool): // preds: addr_0_block_527 addr_0_block_528
      nextln:   v2612 = bool.icmp.i8.eq v2568, 0x0
      nextln:   v2613 = bool.and v2540, v2612
      nextln:   jumpif v2613, addr_0_block_530, addr_0_block_531
      check: addr_0_block_530: // preds: addr_0_block_529
      nextln:   jump addr_0_block_532(0x0, 0x0)
      check: addr_0_block_531: // preds: addr_0_block_529
      nextln:   jump addr_0_block_532(0x0, 0x0)
      check: addr_0_block_532(v2614: bool, v2615: bool): // preds: addr_0_block_530 addr_0_block_531
      nextln:   v2616 = bool.or v2611, v2614
      nextln:   jumpif v2616, addr_0_block_533, addr_0_block_546
      check: addr_0_block_533: // preds: addr_0_block_532
      nextln:   v2617 = i52.unsigned_from_bits v2564
      nextln:   v2618 = int.modulo v2617, 0x8
      nextln:   v2619 = int.sub v2617, v2618
      nextln:   v2620 = i52.to_bits v2619
      nextln:   v2621 = bool.icmp.i52.eq v2564, v2620
      nextln:   v2622 = i64.load v2564
      nextln:   jumpif v2611, addr_0_block_534, addr_0_block_535
      nextln:   jump addr_0_block_547(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v2622, v2541, v2542, v2543, v2544, v2545, v2546, v2547, v2548, v2549, v2550, v2551, v2552, v2553, v2554, v2555, v2556, v2557, v2558, v2559, v2560, v2561, v2562, v2563, v2564, v2565, v2566, 0x0, 0x0)
      check: addr_0_block_534: // no preds!
      nextln:   jump addr_0_block_536
      check: addr_0_block_535: // no preds!
      nextln:   jump addr_0_block_536
      check: addr_0_block_536: // preds: addr_0_block_534 addr_0_block_535
      nextln:   jumpif v2614, addr_0_block_537, addr_0_block_538
      check: addr_0_block_537: // preds: addr_0_block_536
      nextln:   jump addr_0_block_539
      check: addr_0_block_538: // preds: addr_0_block_536
      nextln:   jump addr_0_block_539
      check: addr_0_block_539: // preds: addr_0_block_537 addr_0_block_538
      nextln:   v2933 = i52.unsigned_from_bits v2564
      nextln:   v2934 = int.modulo v2933, 0x8
      nextln:   v2935 = int.sub v2933, v2934
      nextln:   v2936 = i52.to_bits v2935
      nextln:   v2937 = bool.icmp.i52.eq v2564, v2936
      nextln:   v2938 = bool.icmp.i52.eq v2564, 0x13000000
      nextln:   jumpif v2938, addr_0_block_540, addr_0_block_544
      check: addr_0_block_540: // preds: addr_0_block_539
      nextln:   v2939 = i64.unsigned_from_bits v2622
      nextln:   v2940 = bool.icmp.int.eq v2939, 0x4
      nextln:   jumpif v2940, addr_0_block_541, addr_0_block_542
      nextln:   jump addr_0_block_545
      check: addr_0_block_541: // no preds!
      nextln:   jump addr_0_block_543
      check: addr_0_block_542: // no preds!
      nextln:   v2941 = i8.trunc.i64 v2622
      nextln:   v2942 = i8.unsigned_from_bits v2941
      nextln:   jump addr_0_block_543
      check: addr_0_block_543: // preds: addr_0_block_541 addr_0_block_542
      check: addr_0_block_544: // preds: addr_0_block_539
      nextln:   store.i64 v2622, v2564
      nextln:   jump addr_0_block_545
      check: addr_0_block_545: // preds: addr_0_block_540 addr_0_block_544
      check: addr_0_block_546: // preds: addr_0_block_532
      nextln:   jump addr_0_block_547(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_547(v2623: i8, v2624: i1, v2625: i16, v2626: i8, v2627: bool, v2628: bool, v2629: bool, v2630: int, v2631: i64, v2632: i8, v2633: i8, v2634: i52, v2635: i1, v2636: bool, v2637: bool, v2638: int, v2639: i1, v2640: bool, v2641: i4, v2642: i2, v2643: i4, v2644: i8, v2645: i8, v2646: i2, v2647: i2, v2648: bool, v2649: i2, v2650: i2, v2651: bool, v2652: bool, v2653: bool, v2654: bool, v2655: i52, v2656: i1, v2657: i64, v2658: i2, v2659: bool): // preds: addr_0_block_533 addr_0_block_546
      nextln:   v2660 = bool.icmp.i8.ne v2568, 0x0
      nextln:   v2661 = bool.bitwise_not v2660
      nextln:   v2662 = bool.and v2661, 0x1
      nextln:   v2663 = bool.icmp.i8.ne v2568, 0x0
      nextln:   v2664 = bool.bitwise_not v2663
      nextln:   v2665 = bool.and 0x1, v2664
      nextln:   jumpif v2665, addr_0_block_548, addr_0_block_549
      check: addr_0_block_548: // preds: addr_0_block_547
      nextln:   jump addr_0_block_550
      check: addr_0_block_549: // preds: addr_0_block_547
      nextln:   jump addr_0_block_550
      check: addr_0_block_550: // preds: addr_0_block_548 addr_0_block_549
      nextln:   v2666 = bool.icmp.i8.ne v2568, 0x0
      nextln:   jumpif v2666, addr_0_block_551, addr_0_block_552
      check: addr_0_block_551: // preds: addr_0_block_550
      nextln:   jump addr_0_block_553
      check: addr_0_block_552: // preds: addr_0_block_550
      nextln:   jump addr_0_block_553
      check: addr_0_block_553: // preds: addr_0_block_551 addr_0_block_552
      nextln:   v2667 = i52.unsigned_from_bits v2591
      nextln:   v2668 = int.modulo v2667, 0x1
      nextln:   v2669 = int.sub v2667, v2668
      nextln:   v2670 = i52.to_bits v2669
      nextln:   v2671 = bool.icmp.i52.eq v2591, v2670
      nextln:   v2672 = i8.load v2591
      nextln:   v2673 = i64.and v2518, 0xff00ffffffffffff
      nextln:   v2674 = i8.lshl v2672, 0x30
      nextln:   v2675 = i64.or v2673, v2674
      nextln:   v2676 = i64.wrapping_add v21, 0x7
      nextln:   v2677 = i64.unsigned_from_bits v2676
      nextln:   v2678 = int.modulo v2677, 0x1
      nextln:   v2679 = int.sub v2677, v2678
      nextln:   v2680 = i64.to_bits v2679
      nextln:   v2681 = bool.icmp.i64.eq v2676, v2680
      nextln:   v2682 = i64.lshr v2676, 0x30
      nextln:   v2683 = i16.trunc.i64 v2682
      nextln:   v2684 = bool.icmp.i16.eq v2683, 0x0
      nextln:   v2685 = bool.bitwise_not v2684
      nextln:   jumpif v2685, addr_0_block_554, addr_0_block_555
      check: addr_0_block_554: // preds: addr_0_block_553
      nextln:   jump addr_0_block_556(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_557(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_555: // preds: addr_0_block_553
      nextln:   jump addr_0_block_556(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_556(v2833: i52, v2834: int, v2835: bool, v2836: bool): // preds: addr_0_block_555
      nextln:   v2837 = i52.trunc.i64 v2676
      nextln:   jump addr_0_block_557(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v2837, 0x1, 0x0)
      check: addr_0_block_557(v2686: i3, v2687: i1, v2688: i1, v2689: i1, v2690: i1, v2691: i4, v2692: i1, v2693: bool, v2694: int, v2695: int, v2696: bool, v2697: bool, v2698: i8, v2699: i8, v2700: i52, v2701: i1, v2702: bool, v2703: bool, v2704: int, v2705: i1, v2706: bool, v2707: i4, v2708: i2, v2709: i4, v2710: i8, v2711: i8, v2712: i2, v2713: i2, v2714: bool, v2715: i2, v2716: i2, v2717: bool, v2718: bool, v2719: bool, v2720: bool, v2721: i52, v2722: i1, v2723: i64, v2724: i1, v2725: i8, v2726: i8, v2727: i52, v2728: i1, v2729: bool, v2730: bool, v2731: int, v2732: i1, v2733: bool, v2734: i4, v2735: i2, v2736: i4, v2737: i8, v2738: i8, v2739: i2, v2740: i2, v2741: bool, v2742: i2, v2743: i2, v2744: bool, v2745: bool, v2746: bool, v2747: bool, v2748: i52, v2749: i1, v2750: i64): // preds: addr_0_block_554 addr_0_block_556
      nextln:   v2751 = bool.icmp.i8.ne v2725, 0x0
      nextln:   v2752 = bool.bitwise_not v2751
      nextln:   v2753 = bool.bitwise_not v26
      nextln:   v2754 = bool.and v2753, 0x1
      nextln:   v2755 = bool.or v2754, 0x0
      nextln:   v2756 = bool.icmp.i8.ne v2725, 0x0
      nextln:   v2757 = bool.bitwise_not v2756
      nextln:   v2758 = bool.and v2755, v2757
      nextln:   v2759 = bool.icmp.i8.eq v2737, 0x1
      nextln:   v2760 = bool.and v2758, v2759
      nextln:   jumpif v2760, addr_0_block_558, addr_0_block_559
      check: addr_0_block_558: // preds: addr_0_block_557
      nextln:   jump addr_0_block_560
      check: addr_0_block_559: // preds: addr_0_block_557
      nextln:   jump addr_0_block_560
      check: addr_0_block_560: // preds: addr_0_block_558 addr_0_block_559
      nextln:   v2761 = bool.icmp.i8.ne v2725, 0x0
      nextln:   v2762 = bool.bitwise_not v2761
      nextln:   v2763 = bool.icmp.i8.ne v2725, 0x0
      nextln:   v2764 = bool.bitwise_not v2763
      nextln:   v2765 = bool.icmp.i8.eq v2737, 0x1
      nextln:   v2766 = bool.and v2764, v2765
      nextln:   jumpif v2696, addr_0_block_561, addr_0_block_562
      check: addr_0_block_561: // preds: addr_0_block_560
      nextln:   v2767 = bool.icmp.i8.eq v2725, 0x0
      nextln:   jump addr_0_block_563(0x1)
      check: addr_0_block_562: // preds: addr_0_block_560
      nextln:   jump addr_0_block_563(0x0)
      check: addr_0_block_563(v2768: bool): // preds: addr_0_block_561 addr_0_block_562
      nextln:   v2769 = bool.icmp.i8.eq v2725, 0x0
      nextln:   v2770 = bool.and v2697, v2769
      nextln:   jumpif v2770, addr_0_block_564, addr_0_block_565
      check: addr_0_block_564: // preds: addr_0_block_563
      nextln:   jump addr_0_block_566(0x0, 0x0)
      check: addr_0_block_565: // preds: addr_0_block_563
      nextln:   jump addr_0_block_566(0x0, 0x0)
      check: addr_0_block_566(v2771: bool, v2772: bool): // preds: addr_0_block_564 addr_0_block_565
      nextln:   v2773 = bool.or v2768, v2771
      nextln:   jumpif v2773, addr_0_block_567, addr_0_block_580
      check: addr_0_block_567: // preds: addr_0_block_566
      nextln:   v2774 = i52.unsigned_from_bits v2721
      nextln:   v2775 = int.modulo v2774, 0x8
      nextln:   v2776 = int.sub v2774, v2775
      nextln:   v2777 = i52.to_bits v2776
      nextln:   v2778 = bool.icmp.i52.eq v2721, v2777
      nextln:   v2779 = i64.load v2721
      nextln:   jumpif v2768, addr_0_block_568, addr_0_block_569
      nextln:   jump addr_0_block_581(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v2779, v2698, v2699, v2700, v2701, v2702, v2703, v2704, v2705, v2706, v2707, v2708, v2709, v2710, v2711, v2712, v2713, v2714, v2715, v2716, v2717, v2718, v2719, v2720, v2721, v2722, v2723, 0x0, 0x0)
      check: addr_0_block_568: // no preds!
      nextln:   jump addr_0_block_570
      check: addr_0_block_569: // no preds!
      nextln:   jump addr_0_block_570
      check: addr_0_block_570: // preds: addr_0_block_568 addr_0_block_569
      nextln:   jumpif v2771, addr_0_block_571, addr_0_block_572
      check: addr_0_block_571: // preds: addr_0_block_570
      nextln:   jump addr_0_block_573
      check: addr_0_block_572: // preds: addr_0_block_570
      nextln:   jump addr_0_block_573
      check: addr_0_block_573: // preds: addr_0_block_571 addr_0_block_572
      nextln:   v2943 = i52.unsigned_from_bits v2721
      nextln:   v2944 = int.modulo v2943, 0x8
      nextln:   v2945 = int.sub v2943, v2944
      nextln:   v2946 = i52.to_bits v2945
      nextln:   v2947 = bool.icmp.i52.eq v2721, v2946
      nextln:   v2948 = bool.icmp.i52.eq v2721, 0x13000000
      nextln:   jumpif v2948, addr_0_block_574, addr_0_block_578
      check: addr_0_block_574: // preds: addr_0_block_573
      nextln:   v2949 = i64.unsigned_from_bits v2779
      nextln:   v2950 = bool.icmp.int.eq v2949, 0x4
      nextln:   jumpif v2950, addr_0_block_575, addr_0_block_576
      nextln:   jump addr_0_block_579
      check: addr_0_block_575: // no preds!
      nextln:   jump addr_0_block_577
      check: addr_0_block_576: // no preds!
      nextln:   v2951 = i8.trunc.i64 v2779
      nextln:   v2952 = i8.unsigned_from_bits v2951
      nextln:   jump addr_0_block_577
      check: addr_0_block_577: // preds: addr_0_block_575 addr_0_block_576
      check: addr_0_block_578: // preds: addr_0_block_573
      nextln:   store.i64 v2779, v2721
      nextln:   jump addr_0_block_579
      check: addr_0_block_579: // preds: addr_0_block_574 addr_0_block_578
      check: addr_0_block_580: // preds: addr_0_block_566
      nextln:   jump addr_0_block_581(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_581(v2780: i8, v2781: i1, v2782: i16, v2783: i8, v2784: bool, v2785: bool, v2786: bool, v2787: int, v2788: i64, v2789: i8, v2790: i8, v2791: i52, v2792: i1, v2793: bool, v2794: bool, v2795: int, v2796: i1, v2797: bool, v2798: i4, v2799: i2, v2800: i4, v2801: i8, v2802: i8, v2803: i2, v2804: i2, v2805: bool, v2806: i2, v2807: i2, v2808: bool, v2809: bool, v2810: bool, v2811: bool, v2812: i52, v2813: i1, v2814: i64, v2815: i2, v2816: bool): // preds: addr_0_block_567 addr_0_block_580
      nextln:   v2817 = bool.icmp.i8.ne v2725, 0x0
      nextln:   v2818 = bool.bitwise_not v2817
      nextln:   v2819 = bool.and v2818, 0x1
      nextln:   v2820 = bool.icmp.i8.ne v2725, 0x0
      nextln:   v2821 = bool.bitwise_not v2820
      nextln:   v2822 = bool.and 0x1, v2821
      nextln:   jumpif v2822, addr_0_block_582, addr_0_block_583
      check: addr_0_block_582: // preds: addr_0_block_581
      nextln:   jump addr_0_block_584
      check: addr_0_block_583: // preds: addr_0_block_581
      nextln:   jump addr_0_block_584
      check: addr_0_block_584: // preds: addr_0_block_582 addr_0_block_583
      nextln:   v2823 = bool.icmp.i8.ne v2725, 0x0
      nextln:   jumpif v2823, addr_0_block_585, addr_0_block_586
      check: addr_0_block_585: // preds: addr_0_block_584
      nextln:   jump addr_0_block_587
      check: addr_0_block_586: // preds: addr_0_block_584
      nextln:   jump addr_0_block_587
      check: addr_0_block_587: // preds: addr_0_block_585 addr_0_block_586
      nextln:   v2824 = i52.unsigned_from_bits v2748
      nextln:   v2825 = int.modulo v2824, 0x1
      nextln:   v2826 = int.sub v2824, v2825
      nextln:   v2827 = i52.to_bits v2826
      nextln:   v2828 = bool.icmp.i52.eq v2748, v2827
      nextln:   v2829 = i8.load v2748
      nextln:   v2830 = i64.and v2675, 0xffffffffffffff
      nextln:   v2831 = i8.lshl v2829, 0x38
      nextln:   v2832 = i64.or v2830, v2831
      check: addr_0_block_588: // preds: addr_0_block_311
      nextln:   v42 = i64.unsigned_from_bits v21
      nextln:   v43 = int.modulo v42, 0x8
      nextln:   v44 = int.sub v42, v43
      nextln:   v45 = i64.to_bits v44
      nextln:   v46 = bool.icmp.i64.eq v21, v45
      nextln:   v47 = i64.lshr v21, 0x30
      nextln:   v48 = i16.trunc.i64 v47
      nextln:   v49 = bool.icmp.i16.eq v48, 0x0
      nextln:   v50 = bool.bitwise_not v49
      nextln:   jumpif v50, addr_0_block_589, addr_0_block_590
      nextln:   jump addr_0_block_623(v26, 0x0, v3096)
      check: addr_0_block_589: // no preds!
      nextln:   jump addr_0_block_591(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_592(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_590: // no preds!
      nextln:   jump addr_0_block_591(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_591(v3097: i52, v3098: int, v3099: bool, v3100: bool): // preds: addr_0_block_590
      nextln:   v3101 = i52.trunc.i64 v21
      nextln:   jump addr_0_block_592(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v3101, 0x1, 0x0)
      check: addr_0_block_592(v2953: i3, v2954: i1, v2955: i1, v2956: i1, v2957: i1, v2958: i4, v2959: i1, v2960: bool, v2961: int, v2962: int, v2963: bool, v2964: bool, v2965: i8, v2966: i8, v2967: i52, v2968: i1, v2969: bool, v2970: bool, v2971: int, v2972: i1, v2973: bool, v2974: i4, v2975: i2, v2976: i4, v2977: i8, v2978: i8, v2979: i2, v2980: i2, v2981: bool, v2982: i2, v2983: i2, v2984: bool, v2985: bool, v2986: bool, v2987: bool, v2988: i52, v2989: i1, v2990: i64, v2991: i1, v2992: i8, v2993: i8, v2994: i52, v2995: i1, v2996: bool, v2997: bool, v2998: int, v2999: i1, v3000: bool, v3001: i4, v3002: i2, v3003: i4, v3004: i8, v3005: i8, v3006: i2, v3007: i2, v3008: bool, v3009: i2, v3010: i2, v3011: bool, v3012: bool, v3013: bool, v3014: bool, v3015: i52, v3016: i1, v3017: i64): // preds: addr_0_block_589 addr_0_block_591
      nextln:   v3018 = bool.icmp.i8.ne v2992, 0x0
      nextln:   v3019 = bool.bitwise_not v3018
      nextln:   v3020 = bool.bitwise_not v26
      nextln:   v3021 = bool.and v3020, 0x1
      nextln:   v3022 = bool.or v3021, 0x0
      nextln:   v3023 = bool.icmp.i8.ne v2992, 0x0
      nextln:   v3024 = bool.bitwise_not v3023
      nextln:   v3025 = bool.and v3022, v3024
      nextln:   v3026 = bool.icmp.i8.eq v3004, 0x1
      nextln:   v3027 = bool.and v3025, v3026
      nextln:   jumpif v3027, addr_0_block_593, addr_0_block_594
      check: addr_0_block_593: // preds: addr_0_block_592
      nextln:   jump addr_0_block_595
      check: addr_0_block_594: // preds: addr_0_block_592
      nextln:   jump addr_0_block_595
      check: addr_0_block_595: // preds: addr_0_block_593 addr_0_block_594
      nextln:   v3028 = bool.icmp.i8.ne v2992, 0x0
      nextln:   v3029 = bool.bitwise_not v3028
      nextln:   v3030 = bool.icmp.i8.ne v2992, 0x0
      nextln:   v3031 = bool.bitwise_not v3030
      nextln:   v3032 = bool.icmp.i8.eq v3004, 0x1
      nextln:   v3033 = bool.and v3031, v3032
      nextln:   jumpif v2963, addr_0_block_596, addr_0_block_597
      check: addr_0_block_596: // preds: addr_0_block_595
      nextln:   v3034 = bool.icmp.i8.eq v2992, 0x0
      nextln:   jump addr_0_block_598(0x1)
      check: addr_0_block_597: // preds: addr_0_block_595
      nextln:   jump addr_0_block_598(0x0)
      check: addr_0_block_598(v3035: bool): // preds: addr_0_block_596 addr_0_block_597
      nextln:   v3036 = bool.icmp.i8.eq v2992, 0x0
      nextln:   v3037 = bool.and v2964, v3036
      nextln:   jumpif v3037, addr_0_block_599, addr_0_block_600
      check: addr_0_block_599: // preds: addr_0_block_598
      nextln:   jump addr_0_block_601(0x0, 0x0)
      check: addr_0_block_600: // preds: addr_0_block_598
      nextln:   jump addr_0_block_601(0x0, 0x0)
      check: addr_0_block_601(v3038: bool, v3039: bool): // preds: addr_0_block_599 addr_0_block_600
      nextln:   v3040 = bool.or v3035, v3038
      nextln:   jumpif v3040, addr_0_block_602, addr_0_block_615
      check: addr_0_block_602: // preds: addr_0_block_601
      nextln:   v3041 = i52.unsigned_from_bits v2988
      nextln:   v3042 = int.modulo v3041, 0x8
      nextln:   v3043 = int.sub v3041, v3042
      nextln:   v3044 = i52.to_bits v3043
      nextln:   v3045 = bool.icmp.i52.eq v2988, v3044
      nextln:   v3046 = i64.load v2988
      nextln:   jumpif v3035, addr_0_block_603, addr_0_block_604
      nextln:   jump addr_0_block_616(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v3046, v2965, v2966, v2967, v2968, v2969, v2970, v2971, v2972, v2973, v2974, v2975, v2976, v2977, v2978, v2979, v2980, v2981, v2982, v2983, v2984, v2985, v2986, v2987, v2988, v2989, v2990, 0x0, 0x0)
      check: addr_0_block_603: // no preds!
      nextln:   jump addr_0_block_605
      check: addr_0_block_604: // no preds!
      nextln:   jump addr_0_block_605
      check: addr_0_block_605: // preds: addr_0_block_603 addr_0_block_604
      nextln:   jumpif v3038, addr_0_block_606, addr_0_block_607
      check: addr_0_block_606: // preds: addr_0_block_605
      nextln:   jump addr_0_block_608
      check: addr_0_block_607: // preds: addr_0_block_605
      nextln:   jump addr_0_block_608
      check: addr_0_block_608: // preds: addr_0_block_606 addr_0_block_607
      nextln:   v3102 = i52.unsigned_from_bits v2988
      nextln:   v3103 = int.modulo v3102, 0x8
      nextln:   v3104 = int.sub v3102, v3103
      nextln:   v3105 = i52.to_bits v3104
      nextln:   v3106 = bool.icmp.i52.eq v2988, v3105
      nextln:   v3107 = bool.icmp.i52.eq v2988, 0x13000000
      nextln:   jumpif v3107, addr_0_block_609, addr_0_block_613
      check: addr_0_block_609: // preds: addr_0_block_608
      nextln:   v3108 = i64.unsigned_from_bits v3046
      nextln:   v3109 = bool.icmp.int.eq v3108, 0x4
      nextln:   jumpif v3109, addr_0_block_610, addr_0_block_611
      nextln:   jump addr_0_block_614
      check: addr_0_block_610: // no preds!
      nextln:   jump addr_0_block_612
      check: addr_0_block_611: // no preds!
      nextln:   v3110 = i8.trunc.i64 v3046
      nextln:   v3111 = i8.unsigned_from_bits v3110
      nextln:   jump addr_0_block_612
      check: addr_0_block_612: // preds: addr_0_block_610 addr_0_block_611
      check: addr_0_block_613: // preds: addr_0_block_608
      nextln:   store.i64 v3046, v2988
      nextln:   jump addr_0_block_614
      check: addr_0_block_614: // preds: addr_0_block_609 addr_0_block_613
      check: addr_0_block_615: // preds: addr_0_block_601
      nextln:   jump addr_0_block_616(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_616(v3047: i8, v3048: i1, v3049: i16, v3050: i8, v3051: bool, v3052: bool, v3053: bool, v3054: int, v3055: i64, v3056: i8, v3057: i8, v3058: i52, v3059: i1, v3060: bool, v3061: bool, v3062: int, v3063: i1, v3064: bool, v3065: i4, v3066: i2, v3067: i4, v3068: i8, v3069: i8, v3070: i2, v3071: i2, v3072: bool, v3073: i2, v3074: i2, v3075: bool, v3076: bool, v3077: bool, v3078: bool, v3079: i52, v3080: i1, v3081: i64, v3082: i2, v3083: bool): // preds: addr_0_block_602 addr_0_block_615
      nextln:   v3084 = bool.icmp.i8.ne v2992, 0x0
      nextln:   v3085 = bool.bitwise_not v3084
      nextln:   v3086 = bool.and v3085, 0x1
      nextln:   v3087 = bool.icmp.i8.ne v2992, 0x0
      nextln:   v3088 = bool.bitwise_not v3087
      nextln:   v3089 = bool.and 0x1, v3088
      nextln:   jumpif v3089, addr_0_block_617, addr_0_block_618
      check: addr_0_block_617: // preds: addr_0_block_616
      nextln:   jump addr_0_block_619
      check: addr_0_block_618: // preds: addr_0_block_616
      nextln:   jump addr_0_block_619
      check: addr_0_block_619: // preds: addr_0_block_617 addr_0_block_618
      nextln:   v3090 = bool.icmp.i8.ne v2992, 0x0
      nextln:   jumpif v3090, addr_0_block_620, addr_0_block_621
      check: addr_0_block_620: // preds: addr_0_block_619
      nextln:   jump addr_0_block_622
      check: addr_0_block_621: // preds: addr_0_block_619
      nextln:   jump addr_0_block_622
      check: addr_0_block_622: // preds: addr_0_block_620 addr_0_block_621
      nextln:   v3091 = i52.unsigned_from_bits v3015
      nextln:   v3092 = int.modulo v3091, 0x8
      nextln:   v3093 = int.sub v3091, v3092
      nextln:   v3094 = i52.to_bits v3093
      nextln:   v3095 = bool.icmp.i52.eq v3015, v3094
      nextln:   v3096 = i64.load v3015
      check: addr_0_block_623(v38: i64, v39: i8, v40: i64): // preds: addr_0_block_312 addr_0_block_588
      nextln:   write_reg.i64 v20, "x0"
      nextln:   write_reg.i64 v40, "x1"
      nextln:   v41 = i64.wrapping_add v0, 0x8
      nextln:   write_reg.i64 v41, "x2"
- name: ldp_2
  bytes: [0x81, 0x08, 0xc2, 0x28]
  directives: |
      check: entry: // entry block; no preds!
      nextln:   v0 = i64.read_reg "x4"
      nextln:   v1 = i64.wrapping_add v0, 0x0
      nextln:   v2 = i64.unsigned_from_bits v1
      nextln:   v3 = int.modulo v2, 0x4
      nextln:   v4 = int.sub v2, v3
      nextln:   v5 = i64.to_bits v4
      nextln:   v6 = bool.icmp.i64.eq v1, v5
      nextln:   v7 = bool.bitwise_not v6
      nextln:   v8 = bool.bitwise_not v6
      nextln:   jumpif v8, addr_0_block_0, addr_0_block_140
      check: addr_0_block_0: // preds: entry
      nextln:   v9 = i64.unsigned_from_bits v1
      nextln:   v10 = int.modulo v9, 0x1
      nextln:   v11 = int.sub v9, v10
      nextln:   v12 = i64.to_bits v11
      nextln:   v13 = bool.icmp.i64.eq v1, v12
      nextln:   v14 = i64.lshr v1, 0x30
      nextln:   v15 = i16.trunc.i64 v14
      nextln:   v16 = bool.icmp.i16.eq v15, 0x0
      nextln:   v17 = bool.bitwise_not v16
      nextln:   jumpif v17, addr_0_block_1, addr_0_block_2
      nextln:   jump addr_0_block_175(v215, v216, v686)
      check: addr_0_block_1: // no preds!
      nextln:   jump addr_0_block_3(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_4(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_2: // no preds!
      nextln:   jump addr_0_block_3(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_3(v702: i52, v703: int, v704: bool, v705: bool): // preds: addr_0_block_2
      nextln:   v706 = i52.trunc.i64 v1
      nextln:   jump addr_0_block_4(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v706, 0x1, 0x0)
      check: addr_0_block_4(v68: i3, v69: i1, v70: i1, v71: i1, v72: i1, v73: i4, v74: i1, v75: bool, v76: int, v77: int, v78: bool, v79: bool, v80: i8, v81: i8, v82: i52, v83: i1, v84: bool, v85: bool, v86: int, v87: i1, v88: bool, v89: i4, v90: i2, v91: i4, v92: i8, v93: i8, v94: i2, v95: i2, v96: bool, v97: i2, v98: i2, v99: bool, v100: bool, v101: bool, v102: bool, v103: i52, v104: i1, v105: i64, v106: i1, v107: i8, v108: i8, v109: i52, v110: i1, v111: bool, v112: bool, v113: int, v114: i1, v115: bool, v116: i4, v117: i2, v118: i4, v119: i8, v120: i8, v121: i2, v122: i2, v123: bool, v124: i2, v125: i2, v126: bool, v127: bool, v128: bool, v129: bool, v130: i52, v131: i1, v132: i64): // preds: addr_0_block_1 addr_0_block_3
      nextln:   v133 = bool.icmp.i8.ne v107, 0x0
      nextln:   v134 = bool.bitwise_not v133
      nextln:   v135 = bool.bitwise_not v6
      nextln:   v136 = bool.and v135, 0x1
      nextln:   v137 = bool.or v136, 0x0
      nextln:   v138 = bool.icmp.i8.ne v107, 0x0
      nextln:   v139 = bool.bitwise_not v138
      nextln:   v140 = bool.and v137, v139
      nextln:   v141 = bool.icmp.i8.eq v119, 0x1
      nextln:   v142 = bool.and v140, v141
      nextln:   jumpif v142, addr_0_block_5, addr_0_block_6
      check: addr_0_block_5: // preds: addr_0_block_4
      nextln:   jump addr_0_block_7
      check: addr_0_block_6: // preds: addr_0_block_4
      nextln:   jump addr_0_block_7
      check: addr_0_block_7: // preds: addr_0_block_5 addr_0_block_6
      nextln:   v143 = bool.icmp.i8.ne v107, 0x0
      nextln:   v144 = bool.bitwise_not v143
      nextln:   v145 = bool.icmp.i8.ne v107, 0x0
      nextln:   v146 = bool.bitwise_not v145
      nextln:   v147 = bool.icmp.i8.eq v119, 0x1
      nextln:   v148 = bool.and v146, v147
      nextln:   jumpif v78, addr_0_block_8, addr_0_block_9
      check: addr_0_block_8: // preds: addr_0_block_7
      nextln:   v149 = bool.icmp.i8.eq v107, 0x0
      nextln:   jump addr_0_block_10(0x1)
      check: addr_0_block_9: // preds: addr_0_block_7
      nextln:   jump addr_0_block_10(0x0)
      check: addr_0_block_10(v150: bool): // preds: addr_0_block_8 addr_0_block_9
      nextln:   v151 = bool.icmp.i8.eq v107, 0x0
      nextln:   v152 = bool.and v79, v151
      nextln:   jumpif v152, addr_0_block_11, addr_0_block_12
      check: addr_0_block_11: // preds: addr_0_block_10
      nextln:   jump addr_0_block_13(0x0, 0x0)
      check: addr_0_block_12: // preds: addr_0_block_10
      nextln:   jump addr_0_block_13(0x0, 0x0)
      check: addr_0_block_13(v153: bool, v154: bool): // preds: addr_0_block_11 addr_0_block_12
      nextln:   v155 = bool.or v150, v153
      nextln:   jumpif v155, addr_0_block_14, addr_0_block_27
      check: addr_0_block_14: // preds: addr_0_block_13
      nextln:   v156 = i52.unsigned_from_bits v103
      nextln:   v157 = int.modulo v156, 0x8
      nextln:   v158 = int.sub v156, v157
      nextln:   v159 = i52.to_bits v158
      nextln:   v160 = bool.icmp.i52.eq v103, v159
      nextln:   v161 = i64.load v103
      nextln:   jumpif v150, addr_0_block_15, addr_0_block_16
      nextln:   jump addr_0_block_28(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v161, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104, v105, 0x0, 0x0)
      check: addr_0_block_15: // no preds!
      nextln:   jump addr_0_block_17
      check: addr_0_block_16: // no preds!
      nextln:   jump addr_0_block_17
      check: addr_0_block_17: // preds: addr_0_block_15 addr_0_block_16
      nextln:   jumpif v153, addr_0_block_18, addr_0_block_19
      check: addr_0_block_18: // preds: addr_0_block_17
      nextln:   jump addr_0_block_20
      check: addr_0_block_19: // preds: addr_0_block_17
      nextln:   jump addr_0_block_20
      check: addr_0_block_20: // preds: addr_0_block_18 addr_0_block_19
      nextln:   v707 = i52.unsigned_from_bits v103
      nextln:   v708 = int.modulo v707, 0x8
      nextln:   v709 = int.sub v707, v708
      nextln:   v710 = i52.to_bits v709
      nextln:   v711 = bool.icmp.i52.eq v103, v710
      nextln:   v712 = bool.icmp.i52.eq v103, 0x13000000
      nextln:   jumpif v712, addr_0_block_21, addr_0_block_25
      check: addr_0_block_21: // preds: addr_0_block_20
      nextln:   v713 = i64.unsigned_from_bits v161
      nextln:   v714 = bool.icmp.int.eq v713, 0x4
      nextln:   jumpif v714, addr_0_block_22, addr_0_block_23
      nextln:   jump addr_0_block_26
      check: addr_0_block_22: // no preds!
      nextln:   jump addr_0_block_24
      check: addr_0_block_23: // no preds!
      nextln:   v715 = i8.trunc.i64 v161
      nextln:   v716 = i8.unsigned_from_bits v715
      nextln:   jump addr_0_block_24
      check: addr_0_block_24: // preds: addr_0_block_22 addr_0_block_23
      check: addr_0_block_25: // preds: addr_0_block_20
      nextln:   store.i64 v161, v103
      nextln:   jump addr_0_block_26
      check: addr_0_block_26: // preds: addr_0_block_21 addr_0_block_25
      check: addr_0_block_27: // preds: addr_0_block_13
      nextln:   jump addr_0_block_28(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_28(v162: i8, v163: i1, v164: i16, v165: i8, v166: bool, v167: bool, v168: bool, v169: int, v170: i64, v171: i8, v172: i8, v173: i52, v174: i1, v175: bool, v176: bool, v177: int, v178: i1, v179: bool, v180: i4, v181: i2, v182: i4, v183: i8, v184: i8, v185: i2, v186: i2, v187: bool, v188: i2, v189: i2, v190: bool, v191: bool, v192: bool, v193: bool, v194: i52, v195: i1, v196: i64, v197: i2, v198: bool): // preds: addr_0_block_14 addr_0_block_27
      nextln:   v199 = bool.icmp.i8.ne v107, 0x0
      nextln:   v200 = bool.bitwise_not v199
      nextln:   v201 = bool.and v200, 0x1
      nextln:   v202 = bool.icmp.i8.ne v107, 0x0
      nextln:   v203 = bool.bitwise_not v202
      nextln:   v204 = bool.and 0x1, v203
      nextln:   jumpif v204, addr_0_block_29, addr_0_block_30
      check: addr_0_block_29: // preds: addr_0_block_28
      nextln:   jump addr_0_block_31
      check: addr_0_block_30: // preds: addr_0_block_28
      nextln:   jump addr_0_block_31
      check: addr_0_block_31: // preds: addr_0_block_29 addr_0_block_30
      nextln:   v205 = bool.icmp.i8.ne v107, 0x0
      nextln:   jumpif v205, addr_0_block_32, addr_0_block_33
      check: addr_0_block_32: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_33: // preds: addr_0_block_31
      nextln:   jump addr_0_block_34
      check: addr_0_block_34: // preds: addr_0_block_32 addr_0_block_33
      nextln:   v206 = i52.unsigned_from_bits v130
      nextln:   v207 = int.modulo v206, 0x1
      nextln:   v208 = int.sub v206, v207
      nextln:   v209 = i52.to_bits v208
      nextln:   v210 = bool.icmp.i52.eq v130, v209
      nextln:   v211 = i8.load v130
      nextln:   v212 = i8.lshl v211, 0x0
      nextln:   v213 = i32.or 0x0, v212
      nextln:   v214 = bool.bitwise_not v6
      nextln:   jumpif v214, addr_0_block_35, addr_0_block_36
      check: addr_0_block_35: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37(v6, 0xc)
      check: addr_0_block_36: // preds: addr_0_block_34
      nextln:   jump addr_0_block_37(v6, 0x0)
      check: addr_0_block_37(v215: i64, v216: i8): // preds: addr_0_block_35 addr_0_block_36
      nextln:   v217 = i64.wrapping_add v1, 0x1
      nextln:   v218 = i64.unsigned_from_bits v217
      nextln:   v219 = int.modulo v218, 0x1
      nextln:   v220 = int.sub v218, v219
      nextln:   v221 = i64.to_bits v220
      nextln:   v222 = bool.icmp.i64.eq v217, v221
      nextln:   v223 = i64.lshr v217, 0x30
      nextln:   v224 = i16.trunc.i64 v223
      nextln:   v225 = bool.icmp.i16.eq v224, 0x0
      nextln:   v226 = bool.bitwise_not v225
      nextln:   jumpif v226, addr_0_block_38, addr_0_block_39
      check: addr_0_block_38: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_41(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_39: // preds: addr_0_block_37
      nextln:   jump addr_0_block_40(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_40(v697: i52, v698: int, v699: bool, v700: bool): // preds: addr_0_block_39
      nextln:   v701 = i52.trunc.i64 v217
      nextln:   jump addr_0_block_41(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v701, 0x1, 0x0)
      check: addr_0_block_41(v227: i3, v228: i1, v229: i1, v230: i1, v231: i1, v232: i4, v233: i1, v234: bool, v235: int, v236: int, v237: bool, v238: bool, v239: i8, v240: i8, v241: i52, v242: i1, v243: bool, v244: bool, v245: int, v246: i1, v247: bool, v248: i4, v249: i2, v250: i4, v251: i8, v252: i8, v253: i2, v254: i2, v255: bool, v256: i2, v257: i2, v258: bool, v259: bool, v260: bool, v261: bool, v262: i52, v263: i1, v264: i64, v265: i1, v266: i8, v267: i8, v268: i52, v269: i1, v270: bool, v271: bool, v272: int, v273: i1, v274: bool, v275: i4, v276: i2, v277: i4, v278: i8, v279: i8, v280: i2, v281: i2, v282: bool, v283: i2, v284: i2, v285: bool, v286: bool, v287: bool, v288: bool, v289: i52, v290: i1, v291: i64): // preds: addr_0_block_38 addr_0_block_40
      nextln:   v292 = bool.icmp.i8.ne v266, 0x0
      nextln:   v293 = bool.bitwise_not v292
      nextln:   v294 = bool.bitwise_not v6
      nextln:   v295 = bool.and v294, 0x1
      nextln:   v296 = bool.or v295, 0x0
      nextln:   v297 = bool.icmp.i8.ne v266, 0x0
      nextln:   v298 = bool.bitwise_not v297
      nextln:   v299 = bool.and v296, v298
      nextln:   v300 = bool.icmp.i8.eq v278, 0x1
      nextln:   v301 = bool.and v299, v300
      nextln:   jumpif v301, addr_0_block_42, addr_0_block_43
      check: addr_0_block_42: // preds: addr_0_block_41
      nextln:   jump addr_0_block_44
      check: addr_0_block_43: // preds: addr_0_block_41
      nextln:   jump addr_0_block_44
      check: addr_0_block_44: // preds: addr_0_block_42 addr_0_block_43
      nextln:   v302 = bool.icmp.i8.ne v266, 0x0
      nextln:   v303 = bool.bitwise_not v302
      nextln:   v304 = bool.icmp.i8.ne v266, 0x0
      nextln:   v305 = bool.bitwise_not v304
      nextln:   v306 = bool.icmp.i8.eq v278, 0x1
      nextln:   v307 = bool.and v305, v306
      nextln:   jumpif v237, addr_0_block_45, addr_0_block_46
      check: addr_0_block_45: // preds: addr_0_block_44
      nextln:   v308 = bool.icmp.i8.eq v266, 0x0
      nextln:   jump addr_0_block_47(0x1)
      check: addr_0_block_46: // preds: addr_0_block_44
      nextln:   jump addr_0_block_47(0x0)
      check: addr_0_block_47(v309: bool): // preds: addr_0_block_45 addr_0_block_46
      nextln:   v310 = bool.icmp.i8.eq v266, 0x0
      nextln:   v311 = bool.and v238, v310
      nextln:   jumpif v311, addr_0_block_48, addr_0_block_49
      check: addr_0_block_48: // preds: addr_0_block_47
      nextln:   jump addr_0_block_50(0x0, 0x0)
      check: addr_0_block_49: // preds: addr_0_block_47
      nextln:   jump addr_0_block_50(0x0, 0x0)
      check: addr_0_block_50(v312: bool, v313: bool): // preds: addr_0_block_48 addr_0_block_49
      nextln:   v314 = bool.or v309, v312
      nextln:   jumpif v314, addr_0_block_51, addr_0_block_64
      check: addr_0_block_51: // preds: addr_0_block_50
      nextln:   v315 = i52.unsigned_from_bits v262
      nextln:   v316 = int.modulo v315, 0x8
      nextln:   v317 = int.sub v315, v316
      nextln:   v318 = i52.to_bits v317
      nextln:   v319 = bool.icmp.i52.eq v262, v318
      nextln:   v320 = i64.load v262
      nextln:   jumpif v309, addr_0_block_52, addr_0_block_53
      nextln:   jump addr_0_block_65(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v320, v239, v240, v241, v242, v243, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, v259, v260, v261, v262, v263, v264, 0x0, 0x0)
      check: addr_0_block_52: // no preds!
      nextln:   jump addr_0_block_54
      check: addr_0_block_53: // no preds!
      nextln:   jump addr_0_block_54
      check: addr_0_block_54: // preds: addr_0_block_52 addr_0_block_53
      nextln:   jumpif v312, addr_0_block_55, addr_0_block_56
      check: addr_0_block_55: // preds: addr_0_block_54
      nextln:   jump addr_0_block_57
      check: addr_0_block_56: // preds: addr_0_block_54
      nextln:   jump addr_0_block_57
      check: addr_0_block_57: // preds: addr_0_block_55 addr_0_block_56
      nextln:   v717 = i52.unsigned_from_bits v262
      nextln:   v718 = int.modulo v717, 0x8
      nextln:   v719 = int.sub v717, v718
      nextln:   v720 = i52.to_bits v719
      nextln:   v721 = bool.icmp.i52.eq v262, v720
      nextln:   v722 = bool.icmp.i52.eq v262, 0x13000000
      nextln:   jumpif v722, addr_0_block_58, addr_0_block_62
      check: addr_0_block_58: // preds: addr_0_block_57
      nextln:   v723 = i64.unsigned_from_bits v320
      nextln:   v724 = bool.icmp.int.eq v723, 0x4
      nextln:   jumpif v724, addr_0_block_59, addr_0_block_60
      nextln:   jump addr_0_block_63
      check: addr_0_block_59: // no preds!
      nextln:   jump addr_0_block_61
      check: addr_0_block_60: // no preds!
      nextln:   v725 = i8.trunc.i64 v320
      nextln:   v726 = i8.unsigned_from_bits v725
      nextln:   jump addr_0_block_61
      check: addr_0_block_61: // preds: addr_0_block_59 addr_0_block_60
      check: addr_0_block_62: // preds: addr_0_block_57
      nextln:   store.i64 v320, v262
      nextln:   jump addr_0_block_63
      check: addr_0_block_63: // preds: addr_0_block_58 addr_0_block_62
      check: addr_0_block_64: // preds: addr_0_block_50
      nextln:   jump addr_0_block_65(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_65(v321: i8, v322: i1, v323: i16, v324: i8, v325: bool, v326: bool, v327: bool, v328: int, v329: i64, v330: i8, v331: i8, v332: i52, v333: i1, v334: bool, v335: bool, v336: int, v337: i1, v338: bool, v339: i4, v340: i2, v341: i4, v342: i8, v343: i8, v344: i2, v345: i2, v346: bool, v347: i2, v348: i2, v349: bool, v350: bool, v351: bool, v352: bool, v353: i52, v354: i1, v355: i64, v356: i2, v357: bool): // preds: addr_0_block_51 addr_0_block_64
      nextln:   v358 = bool.icmp.i8.ne v266, 0x0
      nextln:   v359 = bool.bitwise_not v358
      nextln:   v360 = bool.and v359, 0x1
      nextln:   v361 = bool.icmp.i8.ne v266, 0x0
      nextln:   v362 = bool.bitwise_not v361
      nextln:   v363 = bool.and 0x1, v362
      nextln:   jumpif v363, addr_0_block_66, addr_0_block_67
      check: addr_0_block_66: // preds: addr_0_block_65
      nextln:   jump addr_0_block_68
      check: addr_0_block_67: // preds: addr_0_block_65
      nextln:   jump addr_0_block_68
      check: addr_0_block_68: // preds: addr_0_block_66 addr_0_block_67
      nextln:   v364 = bool.icmp.i8.ne v266, 0x0
      nextln:   jumpif v364, addr_0_block_69, addr_0_block_70
      check: addr_0_block_69: // preds: addr_0_block_68
      nextln:   jump addr_0_block_71
      check: addr_0_block_70: // preds: addr_0_block_68
      nextln:   jump addr_0_block_71
      check: addr_0_block_71: // preds: addr_0_block_69 addr_0_block_70
      nextln:   v365 = i52.unsigned_from_bits v289
      nextln:   v366 = int.modulo v365, 0x1
      nextln:   v367 = int.sub v365, v366
      nextln:   v368 = i52.to_bits v367
      nextln:   v369 = bool.icmp.i52.eq v289, v368
      nextln:   v370 = i8.load v289
      nextln:   v371 = i8.lshl v370, 0x8
      nextln:   v372 = i32.or 0x0, v371
      nextln:   v373 = i64.wrapping_add v1, 0x2
      nextln:   v374 = i64.unsigned_from_bits v373
      nextln:   v375 = int.modulo v374, 0x1
      nextln:   v376 = int.sub v374, v375
      nextln:   v377 = i64.to_bits v376
      nextln:   v378 = bool.icmp.i64.eq v373, v377
      nextln:   v379 = i64.lshr v373, 0x30
      nextln:   v380 = i16.trunc.i64 v379
      nextln:   v381 = bool.icmp.i16.eq v380, 0x0
      nextln:   v382 = bool.bitwise_not v381
      nextln:   jumpif v382, addr_0_block_72, addr_0_block_73
      check: addr_0_block_72: // preds: addr_0_block_71
      nextln:   jump addr_0_block_74(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_75(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_73: // preds: addr_0_block_71
      nextln:   jump addr_0_block_74(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_74(v692: i52, v693: int, v694: bool, v695: bool): // preds: addr_0_block_73
      nextln:   v696 = i52.trunc.i64 v373
      nextln:   jump addr_0_block_75(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v696, 0x1, 0x0)
      check: addr_0_block_75(v383: i3, v384: i1, v385: i1, v386: i1, v387: i1, v388: i4, v389: i1, v390: bool, v391: int, v392: int, v393: bool, v394: bool, v395: i8, v396: i8, v397: i52, v398: i1, v399: bool, v400: bool, v401: int, v402: i1, v403: bool, v404: i4, v405: i2, v406: i4, v407: i8, v408: i8, v409: i2, v410: i2, v411: bool, v412: i2, v413: i2, v414: bool, v415: bool, v416: bool, v417: bool, v418: i52, v419: i1, v420: i64, v421: i1, v422: i8, v423: i8, v424: i52, v425: i1, v426: bool, v427: bool, v428: int, v429: i1, v430: bool, v431: i4, v432: i2, v433: i4, v434: i8, v435: i8, v436: i2, v437: i2, v438: bool, v439: i2, v440: i2, v441: bool, v442: bool, v443: bool, v444: bool, v445: i52, v446: i1, v447: i64): // preds: addr_0_block_72 addr_0_block_74
      nextln:   v448 = bool.icmp.i8.ne v422, 0x0
      nextln:   v449 = bool.bitwise_not v448
      nextln:   v450 = bool.bitwise_not v6
      nextln:   v451 = bool.and v450, 0x1
      nextln:   v452 = bool.or v451, 0x0
      nextln:   v453 = bool.icmp.i8.ne v422, 0x0
      nextln:   v454 = bool.bitwise_not v453
      nextln:   v455 = bool.and v452, v454
      nextln:   v456 = bool.icmp.i8.eq v434, 0x1
      nextln:   v457 = bool.and v455, v456
      nextln:   jumpif v457, addr_0_block_76, addr_0_block_77
      check: addr_0_block_76: // preds: addr_0_block_75
      nextln:   jump addr_0_block_78
      check: addr_0_block_77: // preds: addr_0_block_75
      nextln:   jump addr_0_block_78
      check: addr_0_block_78: // preds: addr_0_block_76 addr_0_block_77
      nextln:   v458 = bool.icmp.i8.ne v422, 0x0
      nextln:   v459 = bool.bitwise_not v458
      nextln:   v460 = bool.icmp.i8.ne v422, 0x0
      nextln:   v461 = bool.bitwise_not v460
      nextln:   v462 = bool.icmp.i8.eq v434, 0x1
      nextln:   v463 = bool.and v461, v462
      nextln:   jumpif v393, addr_0_block_79, addr_0_block_80
      check: addr_0_block_79: // preds: addr_0_block_78
      nextln:   v464 = bool.icmp.i8.eq v422, 0x0
      nextln:   jump addr_0_block_81(0x1)
      check: addr_0_block_80: // preds: addr_0_block_78
      nextln:   jump addr_0_block_81(0x0)
      check: addr_0_block_81(v465: bool): // preds: addr_0_block_79 addr_0_block_80
      nextln:   v466 = bool.icmp.i8.eq v422, 0x0
      nextln:   v467 = bool.and v394, v466
      nextln:   jumpif v467, addr_0_block_82, addr_0_block_83
      check: addr_0_block_82: // preds: addr_0_block_81
      nextln:   jump addr_0_block_84(0x0, 0x0)
      check: addr_0_block_83: // preds: addr_0_block_81
      nextln:   jump addr_0_block_84(0x0, 0x0)
      check: addr_0_block_84(v468: bool, v469: bool): // preds: addr_0_block_82 addr_0_block_83
      nextln:   v470 = bool.or v465, v468
      nextln:   jumpif v470, addr_0_block_85, addr_0_block_98
      check: addr_0_block_85: // preds: addr_0_block_84
      nextln:   v471 = i52.unsigned_from_bits v418
      nextln:   v472 = int.modulo v471, 0x8
      nextln:   v473 = int.sub v471, v472
      nextln:   v474 = i52.to_bits v473
      nextln:   v475 = bool.icmp.i52.eq v418, v474
      nextln:   v476 = i64.load v418
      nextln:   jumpif v465, addr_0_block_86, addr_0_block_87
      nextln:   jump addr_0_block_99(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v476, v395, v396, v397, v398, v399, v400, v401, v402, v403, v404, v405, v406, v407, v408, v409, v410, v411, v412, v413, v414, v415, v416, v417, v418, v419, v420, 0x0, 0x0)
      check: addr_0_block_86: // no preds!
      nextln:   jump addr_0_block_88
      check: addr_0_block_87: // no preds!
      nextln:   jump addr_0_block_88
      check: addr_0_block_88: // preds: addr_0_block_86 addr_0_block_87
      nextln:   jumpif v468, addr_0_block_89, addr_0_block_90
      check: addr_0_block_89: // preds: addr_0_block_88
      nextln:   jump addr_0_block_91
      check: addr_0_block_90: // preds: addr_0_block_88
      nextln:   jump addr_0_block_91
      check: addr_0_block_91: // preds: addr_0_block_89 addr_0_block_90
      nextln:   v727 = i52.unsigned_from_bits v418
      nextln:   v728 = int.modulo v727, 0x8
      nextln:   v729 = int.sub v727, v728
      nextln:   v730 = i52.to_bits v729
      nextln:   v731 = bool.icmp.i52.eq v418, v730
      nextln:   v732 = bool.icmp.i52.eq v418, 0x13000000
      nextln:   jumpif v732, addr_0_block_92, addr_0_block_96
      check: addr_0_block_92: // preds: addr_0_block_91
      nextln:   v733 = i64.unsigned_from_bits v476
      nextln:   v734 = bool.icmp.int.eq v733, 0x4
      nextln:   jumpif v734, addr_0_block_93, addr_0_block_94
      nextln:   jump addr_0_block_97
      check: addr_0_block_93: // no preds!
      nextln:   jump addr_0_block_95
      check: addr_0_block_94: // no preds!
      nextln:   v735 = i8.trunc.i64 v476
      nextln:   v736 = i8.unsigned_from_bits v735
      nextln:   jump addr_0_block_95
      check: addr_0_block_95: // preds: addr_0_block_93 addr_0_block_94
      check: addr_0_block_96: // preds: addr_0_block_91
      nextln:   store.i64 v476, v418
      nextln:   jump addr_0_block_97
      check: addr_0_block_97: // preds: addr_0_block_92 addr_0_block_96
      check: addr_0_block_98: // preds: addr_0_block_84
      nextln:   jump addr_0_block_99(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_99(v477: i8, v478: i1, v479: i16, v480: i8, v481: bool, v482: bool, v483: bool, v484: int, v485: i64, v486: i8, v487: i8, v488: i52, v489: i1, v490: bool, v491: bool, v492: int, v493: i1, v494: bool, v495: i4, v496: i2, v497: i4, v498: i8, v499: i8, v500: i2, v501: i2, v502: bool, v503: i2, v504: i2, v505: bool, v506: bool, v507: bool, v508: bool, v509: i52, v510: i1, v511: i64, v512: i2, v513: bool): // preds: addr_0_block_85 addr_0_block_98
      nextln:   v514 = bool.icmp.i8.ne v422, 0x0
      nextln:   v515 = bool.bitwise_not v514
      nextln:   v516 = bool.and v515, 0x1
      nextln:   v517 = bool.icmp.i8.ne v422, 0x0
      nextln:   v518 = bool.bitwise_not v517
      nextln:   v519 = bool.and 0x1, v518
      nextln:   jumpif v519, addr_0_block_100, addr_0_block_101
      check: addr_0_block_100: // preds: addr_0_block_99
      nextln:   jump addr_0_block_102
      check: addr_0_block_101: // preds: addr_0_block_99
      nextln:   jump addr_0_block_102
      check: addr_0_block_102: // preds: addr_0_block_100 addr_0_block_101
      nextln:   v520 = bool.icmp.i8.ne v422, 0x0
      nextln:   jumpif v520, addr_0_block_103, addr_0_block_104
      check: addr_0_block_103: // preds: addr_0_block_102
      nextln:   jump addr_0_block_105
      check: addr_0_block_104: // preds: addr_0_block_102
      nextln:   jump addr_0_block_105
      check: addr_0_block_105: // preds: addr_0_block_103 addr_0_block_104
      nextln:   v521 = i52.unsigned_from_bits v445
      nextln:   v522 = int.modulo v521, 0x1
      nextln:   v523 = int.sub v521, v522
      nextln:   v524 = i52.to_bits v523
      nextln:   v525 = bool.icmp.i52.eq v445, v524
      nextln:   v526 = i8.load v445
      nextln:   v527 = i32.and v372, 0xff00ffff
      nextln:   v528 = i8.lshl v526, 0x10
      nextln:   v529 = i32.or v527, v528
      nextln:   v530 = i64.wrapping_add v1, 0x3
      nextln:   v531 = i64.unsigned_from_bits v530
      nextln:   v532 = int.modulo v531, 0x1
      nextln:   v533 = int.sub v531, v532
      nextln:   v534 = i64.to_bits v533
      nextln:   v535 = bool.icmp.i64.eq v530, v534
      nextln:   v536 = i64.lshr v530, 0x30
      nextln:   v537 = i16.trunc.i64 v536
      nextln:   v538 = bool.icmp.i16.eq v537, 0x0
      nextln:   v539 = bool.bitwise_not v538
      nextln:   jumpif v539, addr_0_block_106, addr_0_block_107
      check: addr_0_block_106: // preds: addr_0_block_105
      nextln:   jump addr_0_block_108(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_109(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_107: // preds: addr_0_block_105
      nextln:   jump addr_0_block_108(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_108(v687: i52, v688: int, v689: bool, v690: bool): // preds: addr_0_block_107
      nextln:   v691 = i52.trunc.i64 v530
      nextln:   jump addr_0_block_109(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v691, 0x1, 0x0)
      check: addr_0_block_109(v540: i3, v541: i1, v542: i1, v543: i1, v544: i1, v545: i4, v546: i1, v547: bool, v548: int, v549: int, v550: bool, v551: bool, v552: i8, v553: i8, v554: i52, v555: i1, v556: bool, v557: bool, v558: int, v559: i1, v560: bool, v561: i4, v562: i2, v563: i4, v564: i8, v565: i8, v566: i2, v567: i2, v568: bool, v569: i2, v570: i2, v571: bool, v572: bool, v573: bool, v574: bool, v575: i52, v576: i1, v577: i64, v578: i1, v579: i8, v580: i8, v581: i52, v582: i1, v583: bool, v584: bool, v585: int, v586: i1, v587: bool, v588: i4, v589: i2, v590: i4, v591: i8, v592: i8, v593: i2, v594: i2, v595: bool, v596: i2, v597: i2, v598: bool, v599: bool, v600: bool, v601: bool, v602: i52, v603: i1, v604: i64): // preds: addr_0_block_106 addr_0_block_108
      nextln:   v605 = bool.icmp.i8.ne v579, 0x0
      nextln:   v606 = bool.bitwise_not v605
      nextln:   v607 = bool.bitwise_not v6
      nextln:   v608 = bool.and v607, 0x1
      nextln:   v609 = bool.or v608, 0x0
      nextln:   v610 = bool.icmp.i8.ne v579, 0x0
      nextln:   v611 = bool.bitwise_not v610
      nextln:   v612 = bool.and v609, v611
      nextln:   v613 = bool.icmp.i8.eq v591, 0x1
      nextln:   v614 = bool.and v612, v613
      nextln:   jumpif v614, addr_0_block_110, addr_0_block_111
      check: addr_0_block_110: // preds: addr_0_block_109
      nextln:   jump addr_0_block_112
      check: addr_0_block_111: // preds: addr_0_block_109
      nextln:   jump addr_0_block_112
      check: addr_0_block_112: // preds: addr_0_block_110 addr_0_block_111
      nextln:   v615 = bool.icmp.i8.ne v579, 0x0
      nextln:   v616 = bool.bitwise_not v615
      nextln:   v617 = bool.icmp.i8.ne v579, 0x0
      nextln:   v618 = bool.bitwise_not v617
      nextln:   v619 = bool.icmp.i8.eq v591, 0x1
      nextln:   v620 = bool.and v618, v619
      nextln:   jumpif v550, addr_0_block_113, addr_0_block_114
      check: addr_0_block_113: // preds: addr_0_block_112
      nextln:   v621 = bool.icmp.i8.eq v579, 0x0
      nextln:   jump addr_0_block_115(0x1)
      check: addr_0_block_114: // preds: addr_0_block_112
      nextln:   jump addr_0_block_115(0x0)
      check: addr_0_block_115(v622: bool): // preds: addr_0_block_113 addr_0_block_114
      nextln:   v623 = bool.icmp.i8.eq v579, 0x0
      nextln:   v624 = bool.and v551, v623
      nextln:   jumpif v624, addr_0_block_116, addr_0_block_117
      check: addr_0_block_116: // preds: addr_0_block_115
      nextln:   jump addr_0_block_118(0x0, 0x0)
      check: addr_0_block_117: // preds: addr_0_block_115
      nextln:   jump addr_0_block_118(0x0, 0x0)
      check: addr_0_block_118(v625: bool, v626: bool): // preds: addr_0_block_116 addr_0_block_117
      nextln:   v627 = bool.or v622, v625
      nextln:   jumpif v627, addr_0_block_119, addr_0_block_132
      check: addr_0_block_119: // preds: addr_0_block_118
      nextln:   v628 = i52.unsigned_from_bits v575
      nextln:   v629 = int.modulo v628, 0x8
      nextln:   v630 = int.sub v628, v629
      nextln:   v631 = i52.to_bits v630
      nextln:   v632 = bool.icmp.i52.eq v575, v631
      nextln:   v633 = i64.load v575
      nextln:   jumpif v622, addr_0_block_120, addr_0_block_121
      nextln:   jump addr_0_block_133(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v633, v552, v553, v554, v555, v556, v557, v558, v559, v560, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, v573, v574, v575, v576, v577, 0x0, 0x0)
      check: addr_0_block_120: // no preds!
      nextln:   jump addr_0_block_122
      check: addr_0_block_121: // no preds!
      nextln:   jump addr_0_block_122
      check: addr_0_block_122: // preds: addr_0_block_120 addr_0_block_121
      nextln:   jumpif v625, addr_0_block_123, addr_0_block_124
      check: addr_0_block_123: // preds: addr_0_block_122
      nextln:   jump addr_0_block_125
      check: addr_0_block_124: // preds: addr_0_block_122
      nextln:   jump addr_0_block_125
      check: addr_0_block_125: // preds: addr_0_block_123 addr_0_block_124
      nextln:   v737 = i52.unsigned_from_bits v575
      nextln:   v738 = int.modulo v737, 0x8
      nextln:   v739 = int.sub v737, v738
      nextln:   v740 = i52.to_bits v739
      nextln:   v741 = bool.icmp.i52.eq v575, v740
      nextln:   v742 = bool.icmp.i52.eq v575, 0x13000000
      nextln:   jumpif v742, addr_0_block_126, addr_0_block_130
      check: addr_0_block_126: // preds: addr_0_block_125
      nextln:   v743 = i64.unsigned_from_bits v633
      nextln:   v744 = bool.icmp.int.eq v743, 0x4
      nextln:   jumpif v744, addr_0_block_127, addr_0_block_128
      nextln:   jump addr_0_block_131
      check: addr_0_block_127: // no preds!
      nextln:   jump addr_0_block_129
      check: addr_0_block_128: // no preds!
      nextln:   v745 = i8.trunc.i64 v633
      nextln:   v746 = i8.unsigned_from_bits v745
      nextln:   jump addr_0_block_129
      check: addr_0_block_129: // preds: addr_0_block_127 addr_0_block_128
      check: addr_0_block_130: // preds: addr_0_block_125
      nextln:   store.i64 v633, v575
      nextln:   jump addr_0_block_131
      check: addr_0_block_131: // preds: addr_0_block_126 addr_0_block_130
      check: addr_0_block_132: // preds: addr_0_block_118
      nextln:   jump addr_0_block_133(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_133(v634: i8, v635: i1, v636: i16, v637: i8, v638: bool, v639: bool, v640: bool, v641: int, v642: i64, v643: i8, v644: i8, v645: i52, v646: i1, v647: bool, v648: bool, v649: int, v650: i1, v651: bool, v652: i4, v653: i2, v654: i4, v655: i8, v656: i8, v657: i2, v658: i2, v659: bool, v660: i2, v661: i2, v662: bool, v663: bool, v664: bool, v665: bool, v666: i52, v667: i1, v668: i64, v669: i2, v670: bool): // preds: addr_0_block_119 addr_0_block_132
      nextln:   v671 = bool.icmp.i8.ne v579, 0x0
      nextln:   v672 = bool.bitwise_not v671
      nextln:   v673 = bool.and v672, 0x1
      nextln:   v674 = bool.icmp.i8.ne v579, 0x0
      nextln:   v675 = bool.bitwise_not v674
      nextln:   v676 = bool.and 0x1, v675
      nextln:   jumpif v676, addr_0_block_134, addr_0_block_135
      check: addr_0_block_134: // preds: addr_0_block_133
      nextln:   jump addr_0_block_136
      check: addr_0_block_135: // preds: addr_0_block_133
      nextln:   jump addr_0_block_136
      check: addr_0_block_136: // preds: addr_0_block_134 addr_0_block_135
      nextln:   v677 = bool.icmp.i8.ne v579, 0x0
      nextln:   jumpif v677, addr_0_block_137, addr_0_block_138
      check: addr_0_block_137: // preds: addr_0_block_136
      nextln:   jump addr_0_block_139
      check: addr_0_block_138: // preds: addr_0_block_136
      nextln:   jump addr_0_block_139
      check: addr_0_block_139: // preds: addr_0_block_137 addr_0_block_138
      nextln:   v678 = i52.unsigned_from_bits v602
      nextln:   v679 = int.modulo v678, 0x1
      nextln:   v680 = int.sub v678, v679
      nextln:   v681 = i52.to_bits v680
      nextln:   v682 = bool.icmp.i52.eq v602, v681
      nextln:   v683 = i8.load v602
      nextln:   v684 = i32.and v529, 0xffffff
      nextln:   v685 = i8.lshl v683, 0x18
      nextln:   v686 = i32.or v684, v685
      check: addr_0_block_140: // preds: entry
      nextln:   v59 = i64.unsigned_from_bits v1
      nextln:   v60 = int.modulo v59, 0x4
      nextln:   v61 = int.sub v59, v60
      nextln:   v62 = i64.to_bits v61
      nextln:   v63 = bool.icmp.i64.eq v1, v62
      nextln:   v64 = i64.lshr v1, 0x30
      nextln:   v65 = i16.trunc.i64 v64
      nextln:   v66 = bool.icmp.i16.eq v65, 0x0
      nextln:   v67 = bool.bitwise_not v66
      nextln:   jumpif v67, addr_0_block_141, addr_0_block_142
      nextln:   jump addr_0_block_175(v6, 0x0, v890)
      check: addr_0_block_141: // no preds!
      nextln:   jump addr_0_block_143(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_144(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_142: // no preds!
      nextln:   jump addr_0_block_143(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_143(v891: i52, v892: int, v893: bool, v894: bool): // preds: addr_0_block_142
      nextln:   v895 = i52.trunc.i64 v1
      nextln:   jump addr_0_block_144(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v895, 0x1, 0x0)
      check: addr_0_block_144(v747: i3, v748: i1, v749: i1, v750: i1, v751: i1, v752: i4, v753: i1, v754: bool, v755: int, v756: int, v757: bool, v758: bool, v759: i8, v760: i8, v761: i52, v762: i1, v763: bool, v764: bool, v765: int, v766: i1, v767: bool, v768: i4, v769: i2, v770: i4, v771: i8, v772: i8, v773: i2, v774: i2, v775: bool, v776: i2, v777: i2, v778: bool, v779: bool, v780: bool, v781: bool, v782: i52, v783: i1, v784: i64, v785: i1, v786: i8, v787: i8, v788: i52, v789: i1, v790: bool, v791: bool, v792: int, v793: i1, v794: bool, v795: i4, v796: i2, v797: i4, v798: i8, v799: i8, v800: i2, v801: i2, v802: bool, v803: i2, v804: i2, v805: bool, v806: bool, v807: bool, v808: bool, v809: i52, v810: i1, v811: i64): // preds: addr_0_block_141 addr_0_block_143
      nextln:   v812 = bool.icmp.i8.ne v786, 0x0
      nextln:   v813 = bool.bitwise_not v812
      nextln:   v814 = bool.bitwise_not v6
      nextln:   v815 = bool.and v814, 0x1
      nextln:   v816 = bool.or v815, 0x0
      nextln:   v817 = bool.icmp.i8.ne v786, 0x0
      nextln:   v818 = bool.bitwise_not v817
      nextln:   v819 = bool.and v816, v818
      nextln:   v820 = bool.icmp.i8.eq v798, 0x1
      nextln:   v821 = bool.and v819, v820
      nextln:   jumpif v821, addr_0_block_145, addr_0_block_146
      check: addr_0_block_145: // preds: addr_0_block_144
      nextln:   jump addr_0_block_147
      check: addr_0_block_146: // preds: addr_0_block_144
      nextln:   jump addr_0_block_147
      check: addr_0_block_147: // preds: addr_0_block_145 addr_0_block_146
      nextln:   v822 = bool.icmp.i8.ne v786, 0x0
      nextln:   v823 = bool.bitwise_not v822
      nextln:   v824 = bool.icmp.i8.ne v786, 0x0
      nextln:   v825 = bool.bitwise_not v824
      nextln:   v826 = bool.icmp.i8.eq v798, 0x1
      nextln:   v827 = bool.and v825, v826
      nextln:   jumpif v757, addr_0_block_148, addr_0_block_149
      check: addr_0_block_148: // preds: addr_0_block_147
      nextln:   v828 = bool.icmp.i8.eq v786, 0x0
      nextln:   jump addr_0_block_150(0x1)
      check: addr_0_block_149: // preds: addr_0_block_147
      nextln:   jump addr_0_block_150(0x0)
      check: addr_0_block_150(v829: bool): // preds: addr_0_block_148 addr_0_block_149
      nextln:   v830 = bool.icmp.i8.eq v786, 0x0
      nextln:   v831 = bool.and v758, v830
      nextln:   jumpif v831, addr_0_block_151, addr_0_block_152
      check: addr_0_block_151: // preds: addr_0_block_150
      nextln:   jump addr_0_block_153(0x0, 0x0)
      check: addr_0_block_152: // preds: addr_0_block_150
      nextln:   jump addr_0_block_153(0x0, 0x0)
      check: addr_0_block_153(v832: bool, v833: bool): // preds: addr_0_block_151 addr_0_block_152
      nextln:   v834 = bool.or v829, v832
      nextln:   jumpif v834, addr_0_block_154, addr_0_block_167
      check: addr_0_block_154: // preds: addr_0_block_153
      nextln:   v835 = i52.unsigned_from_bits v782
      nextln:   v836 = int.modulo v835, 0x8
      nextln:   v837 = int.sub v835, v836
      nextln:   v838 = i52.to_bits v837
      nextln:   v839 = bool.icmp.i52.eq v782, v838
      nextln:   v840 = i64.load v782
      nextln:   jumpif v829, addr_0_block_155, addr_0_block_156
      nextln:   jump addr_0_block_168(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v840, v759, v760, v761, v762, v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, v776, v777, v778, v779, v780, v781, v782, v783, v784, 0x0, 0x0)
      check: addr_0_block_155: // no preds!
      nextln:   jump addr_0_block_157
      check: addr_0_block_156: // no preds!
      nextln:   jump addr_0_block_157
      check: addr_0_block_157: // preds: addr_0_block_155 addr_0_block_156
      nextln:   jumpif v832, addr_0_block_158, addr_0_block_159
      check: addr_0_block_158: // preds: addr_0_block_157
      nextln:   jump addr_0_block_160
      check: addr_0_block_159: // preds: addr_0_block_157
      nextln:   jump addr_0_block_160
      check: addr_0_block_160: // preds: addr_0_block_158 addr_0_block_159
      nextln:   v896 = i52.unsigned_from_bits v782
      nextln:   v897 = int.modulo v896, 0x8
      nextln:   v898 = int.sub v896, v897
      nextln:   v899 = i52.to_bits v898
      nextln:   v900 = bool.icmp.i52.eq v782, v899
      nextln:   v901 = bool.icmp.i52.eq v782, 0x13000000
      nextln:   jumpif v901, addr_0_block_161, addr_0_block_165
      check: addr_0_block_161: // preds: addr_0_block_160
      nextln:   v902 = i64.unsigned_from_bits v840
      nextln:   v903 = bool.icmp.int.eq v902, 0x4
      nextln:   jumpif v903, addr_0_block_162, addr_0_block_163
      nextln:   jump addr_0_block_166
      check: addr_0_block_162: // no preds!
      nextln:   jump addr_0_block_164
      check: addr_0_block_163: // no preds!
      nextln:   v904 = i8.trunc.i64 v840
      nextln:   v905 = i8.unsigned_from_bits v904
      nextln:   jump addr_0_block_164
      check: addr_0_block_164: // preds: addr_0_block_162 addr_0_block_163
      check: addr_0_block_165: // preds: addr_0_block_160
      nextln:   store.i64 v840, v782
      nextln:   jump addr_0_block_166
      check: addr_0_block_166: // preds: addr_0_block_161 addr_0_block_165
      check: addr_0_block_167: // preds: addr_0_block_153
      nextln:   jump addr_0_block_168(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_168(v841: i8, v842: i1, v843: i16, v844: i8, v845: bool, v846: bool, v847: bool, v848: int, v849: i64, v850: i8, v851: i8, v852: i52, v853: i1, v854: bool, v855: bool, v856: int, v857: i1, v858: bool, v859: i4, v860: i2, v861: i4, v862: i8, v863: i8, v864: i2, v865: i2, v866: bool, v867: i2, v868: i2, v869: bool, v870: bool, v871: bool, v872: bool, v873: i52, v874: i1, v875: i64, v876: i2, v877: bool): // preds: addr_0_block_154 addr_0_block_167
      nextln:   v878 = bool.icmp.i8.ne v786, 0x0
      nextln:   v879 = bool.bitwise_not v878
      nextln:   v880 = bool.and v879, 0x1
      nextln:   v881 = bool.icmp.i8.ne v786, 0x0
      nextln:   v882 = bool.bitwise_not v881
      nextln:   v883 = bool.and 0x1, v882
      nextln:   jumpif v883, addr_0_block_169, addr_0_block_170
      check: addr_0_block_169: // preds: addr_0_block_168
      nextln:   jump addr_0_block_171
      check: addr_0_block_170: // preds: addr_0_block_168
      nextln:   jump addr_0_block_171
      check: addr_0_block_171: // preds: addr_0_block_169 addr_0_block_170
      nextln:   v884 = bool.icmp.i8.ne v786, 0x0
      nextln:   jumpif v884, addr_0_block_172, addr_0_block_173
      check: addr_0_block_172: // preds: addr_0_block_171
      nextln:   jump addr_0_block_174
      check: addr_0_block_173: // preds: addr_0_block_171
      nextln:   jump addr_0_block_174
      check: addr_0_block_174: // preds: addr_0_block_172 addr_0_block_173
      nextln:   v885 = i52.unsigned_from_bits v809
      nextln:   v886 = int.modulo v885, 0x4
      nextln:   v887 = int.sub v885, v886
      nextln:   v888 = i52.to_bits v887
      nextln:   v889 = bool.icmp.i52.eq v809, v888
      nextln:   v890 = i32.load v809
      check: addr_0_block_175(v18: i64, v19: i8, v20: i32): // preds: addr_0_block_0 addr_0_block_140
      nextln:   v21 = i64.wrapping_add v0, 0x4
      nextln:   v22 = i64.unsigned_from_bits v21
      nextln:   v23 = int.modulo v22, 0x4
      nextln:   v24 = int.sub v22, v23
      nextln:   v25 = i64.to_bits v24
      nextln:   v26 = bool.icmp.i64.eq v21, v25
      nextln:   v27 = bool.bitwise_not v26
      nextln:   v28 = bool.bitwise_not v26
      nextln:   jumpif v28, addr_0_block_176, addr_0_block_316
      check: addr_0_block_176: // preds: addr_0_block_175
      nextln:   v29 = i64.unsigned_from_bits v21
      nextln:   v30 = int.modulo v29, 0x1
      nextln:   v31 = int.sub v29, v30
      nextln:   v32 = i64.to_bits v31
      nextln:   v33 = bool.icmp.i64.eq v21, v32
      nextln:   v34 = i64.lshr v21, 0x30
      nextln:   v35 = i16.trunc.i64 v34
      nextln:   v36 = bool.icmp.i16.eq v35, 0x0
      nextln:   v37 = bool.bitwise_not v36
      nextln:   jumpif v37, addr_0_block_177, addr_0_block_178
      nextln:   jump addr_0_block_351(v1053, v1054, v1524)
      check: addr_0_block_177: // no preds!
      nextln:   jump addr_0_block_179(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_180(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_178: // no preds!
      nextln:   jump addr_0_block_179(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_179(v1540: i52, v1541: int, v1542: bool, v1543: bool): // preds: addr_0_block_178
      nextln:   v1544 = i52.trunc.i64 v21
      nextln:   jump addr_0_block_180(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1544, 0x1, 0x0)
      check: addr_0_block_180(v906: i3, v907: i1, v908: i1, v909: i1, v910: i1, v911: i4, v912: i1, v913: bool, v914: int, v915: int, v916: bool, v917: bool, v918: i8, v919: i8, v920: i52, v921: i1, v922: bool, v923: bool, v924: int, v925: i1, v926: bool, v927: i4, v928: i2, v929: i4, v930: i8, v931: i8, v932: i2, v933: i2, v934: bool, v935: i2, v936: i2, v937: bool, v938: bool, v939: bool, v940: bool, v941: i52, v942: i1, v943: i64, v944: i1, v945: i8, v946: i8, v947: i52, v948: i1, v949: bool, v950: bool, v951: int, v952: i1, v953: bool, v954: i4, v955: i2, v956: i4, v957: i8, v958: i8, v959: i2, v960: i2, v961: bool, v962: i2, v963: i2, v964: bool, v965: bool, v966: bool, v967: bool, v968: i52, v969: i1, v970: i64): // preds: addr_0_block_177 addr_0_block_179
      nextln:   v971 = bool.icmp.i8.ne v945, 0x0
      nextln:   v972 = bool.bitwise_not v971
      nextln:   v973 = bool.bitwise_not v26
      nextln:   v974 = bool.and v973, 0x1
      nextln:   v975 = bool.or v974, 0x0
      nextln:   v976 = bool.icmp.i8.ne v945, 0x0
      nextln:   v977 = bool.bitwise_not v976
      nextln:   v978 = bool.and v975, v977
      nextln:   v979 = bool.icmp.i8.eq v957, 0x1
      nextln:   v980 = bool.and v978, v979
      nextln:   jumpif v980, addr_0_block_181, addr_0_block_182
      check: addr_0_block_181: // preds: addr_0_block_180
      nextln:   jump addr_0_block_183
      check: addr_0_block_182: // preds: addr_0_block_180
      nextln:   jump addr_0_block_183
      check: addr_0_block_183: // preds: addr_0_block_181 addr_0_block_182
      nextln:   v981 = bool.icmp.i8.ne v945, 0x0
      nextln:   v982 = bool.bitwise_not v981
      nextln:   v983 = bool.icmp.i8.ne v945, 0x0
      nextln:   v984 = bool.bitwise_not v983
      nextln:   v985 = bool.icmp.i8.eq v957, 0x1
      nextln:   v986 = bool.and v984, v985
      nextln:   jumpif v916, addr_0_block_184, addr_0_block_185
      check: addr_0_block_184: // preds: addr_0_block_183
      nextln:   v987 = bool.icmp.i8.eq v945, 0x0
      nextln:   jump addr_0_block_186(0x1)
      check: addr_0_block_185: // preds: addr_0_block_183
      nextln:   jump addr_0_block_186(0x0)
      check: addr_0_block_186(v988: bool): // preds: addr_0_block_184 addr_0_block_185
      nextln:   v989 = bool.icmp.i8.eq v945, 0x0
      nextln:   v990 = bool.and v917, v989
      nextln:   jumpif v990, addr_0_block_187, addr_0_block_188
      check: addr_0_block_187: // preds: addr_0_block_186
      nextln:   jump addr_0_block_189(0x0, 0x0)
      check: addr_0_block_188: // preds: addr_0_block_186
      nextln:   jump addr_0_block_189(0x0, 0x0)
      check: addr_0_block_189(v991: bool, v992: bool): // preds: addr_0_block_187 addr_0_block_188
      nextln:   v993 = bool.or v988, v991
      nextln:   jumpif v993, addr_0_block_190, addr_0_block_203
      check: addr_0_block_190: // preds: addr_0_block_189
      nextln:   v994 = i52.unsigned_from_bits v941
      nextln:   v995 = int.modulo v994, 0x8
      nextln:   v996 = int.sub v994, v995
      nextln:   v997 = i52.to_bits v996
      nextln:   v998 = bool.icmp.i52.eq v941, v997
      nextln:   v999 = i64.load v941
      nextln:   jumpif v988, addr_0_block_191, addr_0_block_192
      nextln:   jump addr_0_block_204(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v999, v918, v919, v920, v921, v922, v923, v924, v925, v926, v927, v928, v929, v930, v931, v932, v933, v934, v935, v936, v937, v938, v939, v940, v941, v942, v943, 0x0, 0x0)
      check: addr_0_block_191: // no preds!
      nextln:   jump addr_0_block_193
      check: addr_0_block_192: // no preds!
      nextln:   jump addr_0_block_193
      check: addr_0_block_193: // preds: addr_0_block_191 addr_0_block_192
      nextln:   jumpif v991, addr_0_block_194, addr_0_block_195
      check: addr_0_block_194: // preds: addr_0_block_193
      nextln:   jump addr_0_block_196
      check: addr_0_block_195: // preds: addr_0_block_193
      nextln:   jump addr_0_block_196
      check: addr_0_block_196: // preds: addr_0_block_194 addr_0_block_195
      nextln:   v1545 = i52.unsigned_from_bits v941
      nextln:   v1546 = int.modulo v1545, 0x8
      nextln:   v1547 = int.sub v1545, v1546
      nextln:   v1548 = i52.to_bits v1547
      nextln:   v1549 = bool.icmp.i52.eq v941, v1548
      nextln:   v1550 = bool.icmp.i52.eq v941, 0x13000000
      nextln:   jumpif v1550, addr_0_block_197, addr_0_block_201
      check: addr_0_block_197: // preds: addr_0_block_196
      nextln:   v1551 = i64.unsigned_from_bits v999
      nextln:   v1552 = bool.icmp.int.eq v1551, 0x4
      nextln:   jumpif v1552, addr_0_block_198, addr_0_block_199
      nextln:   jump addr_0_block_202
      check: addr_0_block_198: // no preds!
      nextln:   jump addr_0_block_200
      check: addr_0_block_199: // no preds!
      nextln:   v1553 = i8.trunc.i64 v999
      nextln:   v1554 = i8.unsigned_from_bits v1553
      nextln:   jump addr_0_block_200
      check: addr_0_block_200: // preds: addr_0_block_198 addr_0_block_199
      check: addr_0_block_201: // preds: addr_0_block_196
      nextln:   store.i64 v999, v941
      nextln:   jump addr_0_block_202
      check: addr_0_block_202: // preds: addr_0_block_197 addr_0_block_201
      check: addr_0_block_203: // preds: addr_0_block_189
      nextln:   jump addr_0_block_204(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_204(v1000: i8, v1001: i1, v1002: i16, v1003: i8, v1004: bool, v1005: bool, v1006: bool, v1007: int, v1008: i64, v1009: i8, v1010: i8, v1011: i52, v1012: i1, v1013: bool, v1014: bool, v1015: int, v1016: i1, v1017: bool, v1018: i4, v1019: i2, v1020: i4, v1021: i8, v1022: i8, v1023: i2, v1024: i2, v1025: bool, v1026: i2, v1027: i2, v1028: bool, v1029: bool, v1030: bool, v1031: bool, v1032: i52, v1033: i1, v1034: i64, v1035: i2, v1036: bool): // preds: addr_0_block_190 addr_0_block_203
      nextln:   v1037 = bool.icmp.i8.ne v945, 0x0
      nextln:   v1038 = bool.bitwise_not v1037
      nextln:   v1039 = bool.and v1038, 0x1
      nextln:   v1040 = bool.icmp.i8.ne v945, 0x0
      nextln:   v1041 = bool.bitwise_not v1040
      nextln:   v1042 = bool.and 0x1, v1041
      nextln:   jumpif v1042, addr_0_block_205, addr_0_block_206
      check: addr_0_block_205: // preds: addr_0_block_204
      nextln:   jump addr_0_block_207
      check: addr_0_block_206: // preds: addr_0_block_204
      nextln:   jump addr_0_block_207
      check: addr_0_block_207: // preds: addr_0_block_205 addr_0_block_206
      nextln:   v1043 = bool.icmp.i8.ne v945, 0x0
      nextln:   jumpif v1043, addr_0_block_208, addr_0_block_209
      check: addr_0_block_208: // preds: addr_0_block_207
      nextln:   jump addr_0_block_210
      check: addr_0_block_209: // preds: addr_0_block_207
      nextln:   jump addr_0_block_210
      check: addr_0_block_210: // preds: addr_0_block_208 addr_0_block_209
      nextln:   v1044 = i52.unsigned_from_bits v968
      nextln:   v1045 = int.modulo v1044, 0x1
      nextln:   v1046 = int.sub v1044, v1045
      nextln:   v1047 = i52.to_bits v1046
      nextln:   v1048 = bool.icmp.i52.eq v968, v1047
      nextln:   v1049 = i8.load v968
      nextln:   v1050 = i8.lshl v1049, 0x0
      nextln:   v1051 = i32.or 0x0, v1050
      nextln:   v1052 = bool.bitwise_not v26
      nextln:   jumpif v1052, addr_0_block_211, addr_0_block_212
      check: addr_0_block_211: // preds: addr_0_block_210
      nextln:   jump addr_0_block_213(v26, 0xc)
      check: addr_0_block_212: // preds: addr_0_block_210
      nextln:   jump addr_0_block_213(v26, 0x0)
      check: addr_0_block_213(v1053: i64, v1054: i8): // preds: addr_0_block_211 addr_0_block_212
      nextln:   v1055 = i64.wrapping_add v21, 0x1
      nextln:   v1056 = i64.unsigned_from_bits v1055
      nextln:   v1057 = int.modulo v1056, 0x1
      nextln:   v1058 = int.sub v1056, v1057
      nextln:   v1059 = i64.to_bits v1058
      nextln:   v1060 = bool.icmp.i64.eq v1055, v1059
      nextln:   v1061 = i64.lshr v1055, 0x30
      nextln:   v1062 = i16.trunc.i64 v1061
      nextln:   v1063 = bool.icmp.i16.eq v1062, 0x0
      nextln:   v1064 = bool.bitwise_not v1063
      nextln:   jumpif v1064, addr_0_block_214, addr_0_block_215
      check: addr_0_block_214: // preds: addr_0_block_213
      nextln:   jump addr_0_block_216(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_217(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_215: // preds: addr_0_block_213
      nextln:   jump addr_0_block_216(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_216(v1535: i52, v1536: int, v1537: bool, v1538: bool): // preds: addr_0_block_215
      nextln:   v1539 = i52.trunc.i64 v1055
      nextln:   jump addr_0_block_217(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1539, 0x1, 0x0)
      check: addr_0_block_217(v1065: i3, v1066: i1, v1067: i1, v1068: i1, v1069: i1, v1070: i4, v1071: i1, v1072: bool, v1073: int, v1074: int, v1075: bool, v1076: bool, v1077: i8, v1078: i8, v1079: i52, v1080: i1, v1081: bool, v1082: bool, v1083: int, v1084: i1, v1085: bool, v1086: i4, v1087: i2, v1088: i4, v1089: i8, v1090: i8, v1091: i2, v1092: i2, v1093: bool, v1094: i2, v1095: i2, v1096: bool, v1097: bool, v1098: bool, v1099: bool, v1100: i52, v1101: i1, v1102: i64, v1103: i1, v1104: i8, v1105: i8, v1106: i52, v1107: i1, v1108: bool, v1109: bool, v1110: int, v1111: i1, v1112: bool, v1113: i4, v1114: i2, v1115: i4, v1116: i8, v1117: i8, v1118: i2, v1119: i2, v1120: bool, v1121: i2, v1122: i2, v1123: bool, v1124: bool, v1125: bool, v1126: bool, v1127: i52, v1128: i1, v1129: i64): // preds: addr_0_block_214 addr_0_block_216
      nextln:   v1130 = bool.icmp.i8.ne v1104, 0x0
      nextln:   v1131 = bool.bitwise_not v1130
      nextln:   v1132 = bool.bitwise_not v26
      nextln:   v1133 = bool.and v1132, 0x1
      nextln:   v1134 = bool.or v1133, 0x0
      nextln:   v1135 = bool.icmp.i8.ne v1104, 0x0
      nextln:   v1136 = bool.bitwise_not v1135
      nextln:   v1137 = bool.and v1134, v1136
      nextln:   v1138 = bool.icmp.i8.eq v1116, 0x1
      nextln:   v1139 = bool.and v1137, v1138
      nextln:   jumpif v1139, addr_0_block_218, addr_0_block_219
      check: addr_0_block_218: // preds: addr_0_block_217
      nextln:   jump addr_0_block_220
      check: addr_0_block_219: // preds: addr_0_block_217
      nextln:   jump addr_0_block_220
      check: addr_0_block_220: // preds: addr_0_block_218 addr_0_block_219
      nextln:   v1140 = bool.icmp.i8.ne v1104, 0x0
      nextln:   v1141 = bool.bitwise_not v1140
      nextln:   v1142 = bool.icmp.i8.ne v1104, 0x0
      nextln:   v1143 = bool.bitwise_not v1142
      nextln:   v1144 = bool.icmp.i8.eq v1116, 0x1
      nextln:   v1145 = bool.and v1143, v1144
      nextln:   jumpif v1075, addr_0_block_221, addr_0_block_222
      check: addr_0_block_221: // preds: addr_0_block_220
      nextln:   v1146 = bool.icmp.i8.eq v1104, 0x0
      nextln:   jump addr_0_block_223(0x1)
      check: addr_0_block_222: // preds: addr_0_block_220
      nextln:   jump addr_0_block_223(0x0)
      check: addr_0_block_223(v1147: bool): // preds: addr_0_block_221 addr_0_block_222
      nextln:   v1148 = bool.icmp.i8.eq v1104, 0x0
      nextln:   v1149 = bool.and v1076, v1148
      nextln:   jumpif v1149, addr_0_block_224, addr_0_block_225
      check: addr_0_block_224: // preds: addr_0_block_223
      nextln:   jump addr_0_block_226(0x0, 0x0)
      check: addr_0_block_225: // preds: addr_0_block_223
      nextln:   jump addr_0_block_226(0x0, 0x0)
      check: addr_0_block_226(v1150: bool, v1151: bool): // preds: addr_0_block_224 addr_0_block_225
      nextln:   v1152 = bool.or v1147, v1150
      nextln:   jumpif v1152, addr_0_block_227, addr_0_block_240
      check: addr_0_block_227: // preds: addr_0_block_226
      nextln:   v1153 = i52.unsigned_from_bits v1100
      nextln:   v1154 = int.modulo v1153, 0x8
      nextln:   v1155 = int.sub v1153, v1154
      nextln:   v1156 = i52.to_bits v1155
      nextln:   v1157 = bool.icmp.i52.eq v1100, v1156
      nextln:   v1158 = i64.load v1100
      nextln:   jumpif v1147, addr_0_block_228, addr_0_block_229
      nextln:   jump addr_0_block_241(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v1158, v1077, v1078, v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, v1097, v1098, v1099, v1100, v1101, v1102, 0x0, 0x0)
      check: addr_0_block_228: // no preds!
      nextln:   jump addr_0_block_230
      check: addr_0_block_229: // no preds!
      nextln:   jump addr_0_block_230
      check: addr_0_block_230: // preds: addr_0_block_228 addr_0_block_229
      nextln:   jumpif v1150, addr_0_block_231, addr_0_block_232
      check: addr_0_block_231: // preds: addr_0_block_230
      nextln:   jump addr_0_block_233
      check: addr_0_block_232: // preds: addr_0_block_230
      nextln:   jump addr_0_block_233
      check: addr_0_block_233: // preds: addr_0_block_231 addr_0_block_232
      nextln:   v1555 = i52.unsigned_from_bits v1100
      nextln:   v1556 = int.modulo v1555, 0x8
      nextln:   v1557 = int.sub v1555, v1556
      nextln:   v1558 = i52.to_bits v1557
      nextln:   v1559 = bool.icmp.i52.eq v1100, v1558
      nextln:   v1560 = bool.icmp.i52.eq v1100, 0x13000000
      nextln:   jumpif v1560, addr_0_block_234, addr_0_block_238
      check: addr_0_block_234: // preds: addr_0_block_233
      nextln:   v1561 = i64.unsigned_from_bits v1158
      nextln:   v1562 = bool.icmp.int.eq v1561, 0x4
      nextln:   jumpif v1562, addr_0_block_235, addr_0_block_236
      nextln:   jump addr_0_block_239
      check: addr_0_block_235: // no preds!
      nextln:   jump addr_0_block_237
      check: addr_0_block_236: // no preds!
      nextln:   v1563 = i8.trunc.i64 v1158
      nextln:   v1564 = i8.unsigned_from_bits v1563
      nextln:   jump addr_0_block_237
      check: addr_0_block_237: // preds: addr_0_block_235 addr_0_block_236
      check: addr_0_block_238: // preds: addr_0_block_233
      nextln:   store.i64 v1158, v1100
      nextln:   jump addr_0_block_239
      check: addr_0_block_239: // preds: addr_0_block_234 addr_0_block_238
      check: addr_0_block_240: // preds: addr_0_block_226
      nextln:   jump addr_0_block_241(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_241(v1159: i8, v1160: i1, v1161: i16, v1162: i8, v1163: bool, v1164: bool, v1165: bool, v1166: int, v1167: i64, v1168: i8, v1169: i8, v1170: i52, v1171: i1, v1172: bool, v1173: bool, v1174: int, v1175: i1, v1176: bool, v1177: i4, v1178: i2, v1179: i4, v1180: i8, v1181: i8, v1182: i2, v1183: i2, v1184: bool, v1185: i2, v1186: i2, v1187: bool, v1188: bool, v1189: bool, v1190: bool, v1191: i52, v1192: i1, v1193: i64, v1194: i2, v1195: bool): // preds: addr_0_block_227 addr_0_block_240
      nextln:   v1196 = bool.icmp.i8.ne v1104, 0x0
      nextln:   v1197 = bool.bitwise_not v1196
      nextln:   v1198 = bool.and v1197, 0x1
      nextln:   v1199 = bool.icmp.i8.ne v1104, 0x0
      nextln:   v1200 = bool.bitwise_not v1199
      nextln:   v1201 = bool.and 0x1, v1200
      nextln:   jumpif v1201, addr_0_block_242, addr_0_block_243
      check: addr_0_block_242: // preds: addr_0_block_241
      nextln:   jump addr_0_block_244
      check: addr_0_block_243: // preds: addr_0_block_241
      nextln:   jump addr_0_block_244
      check: addr_0_block_244: // preds: addr_0_block_242 addr_0_block_243
      nextln:   v1202 = bool.icmp.i8.ne v1104, 0x0
      nextln:   jumpif v1202, addr_0_block_245, addr_0_block_246
      check: addr_0_block_245: // preds: addr_0_block_244
      nextln:   jump addr_0_block_247
      check: addr_0_block_246: // preds: addr_0_block_244
      nextln:   jump addr_0_block_247
      check: addr_0_block_247: // preds: addr_0_block_245 addr_0_block_246
      nextln:   v1203 = i52.unsigned_from_bits v1127
      nextln:   v1204 = int.modulo v1203, 0x1
      nextln:   v1205 = int.sub v1203, v1204
      nextln:   v1206 = i52.to_bits v1205
      nextln:   v1207 = bool.icmp.i52.eq v1127, v1206
      nextln:   v1208 = i8.load v1127
      nextln:   v1209 = i8.lshl v1208, 0x8
      nextln:   v1210 = i32.or 0x0, v1209
      nextln:   v1211 = i64.wrapping_add v21, 0x2
      nextln:   v1212 = i64.unsigned_from_bits v1211
      nextln:   v1213 = int.modulo v1212, 0x1
      nextln:   v1214 = int.sub v1212, v1213
      nextln:   v1215 = i64.to_bits v1214
      nextln:   v1216 = bool.icmp.i64.eq v1211, v1215
      nextln:   v1217 = i64.lshr v1211, 0x30
      nextln:   v1218 = i16.trunc.i64 v1217
      nextln:   v1219 = bool.icmp.i16.eq v1218, 0x0
      nextln:   v1220 = bool.bitwise_not v1219
      nextln:   jumpif v1220, addr_0_block_248, addr_0_block_249
      check: addr_0_block_248: // preds: addr_0_block_247
      nextln:   jump addr_0_block_250(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_251(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_249: // preds: addr_0_block_247
      nextln:   jump addr_0_block_250(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_250(v1530: i52, v1531: int, v1532: bool, v1533: bool): // preds: addr_0_block_249
      nextln:   v1534 = i52.trunc.i64 v1211
      nextln:   jump addr_0_block_251(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1534, 0x1, 0x0)
      check: addr_0_block_251(v1221: i3, v1222: i1, v1223: i1, v1224: i1, v1225: i1, v1226: i4, v1227: i1, v1228: bool, v1229: int, v1230: int, v1231: bool, v1232: bool, v1233: i8, v1234: i8, v1235: i52, v1236: i1, v1237: bool, v1238: bool, v1239: int, v1240: i1, v1241: bool, v1242: i4, v1243: i2, v1244: i4, v1245: i8, v1246: i8, v1247: i2, v1248: i2, v1249: bool, v1250: i2, v1251: i2, v1252: bool, v1253: bool, v1254: bool, v1255: bool, v1256: i52, v1257: i1, v1258: i64, v1259: i1, v1260: i8, v1261: i8, v1262: i52, v1263: i1, v1264: bool, v1265: bool, v1266: int, v1267: i1, v1268: bool, v1269: i4, v1270: i2, v1271: i4, v1272: i8, v1273: i8, v1274: i2, v1275: i2, v1276: bool, v1277: i2, v1278: i2, v1279: bool, v1280: bool, v1281: bool, v1282: bool, v1283: i52, v1284: i1, v1285: i64): // preds: addr_0_block_248 addr_0_block_250
      nextln:   v1286 = bool.icmp.i8.ne v1260, 0x0
      nextln:   v1287 = bool.bitwise_not v1286
      nextln:   v1288 = bool.bitwise_not v26
      nextln:   v1289 = bool.and v1288, 0x1
      nextln:   v1290 = bool.or v1289, 0x0
      nextln:   v1291 = bool.icmp.i8.ne v1260, 0x0
      nextln:   v1292 = bool.bitwise_not v1291
      nextln:   v1293 = bool.and v1290, v1292
      nextln:   v1294 = bool.icmp.i8.eq v1272, 0x1
      nextln:   v1295 = bool.and v1293, v1294
      nextln:   jumpif v1295, addr_0_block_252, addr_0_block_253
      check: addr_0_block_252: // preds: addr_0_block_251
      nextln:   jump addr_0_block_254
      check: addr_0_block_253: // preds: addr_0_block_251
      nextln:   jump addr_0_block_254
      check: addr_0_block_254: // preds: addr_0_block_252 addr_0_block_253
      nextln:   v1296 = bool.icmp.i8.ne v1260, 0x0
      nextln:   v1297 = bool.bitwise_not v1296
      nextln:   v1298 = bool.icmp.i8.ne v1260, 0x0
      nextln:   v1299 = bool.bitwise_not v1298
      nextln:   v1300 = bool.icmp.i8.eq v1272, 0x1
      nextln:   v1301 = bool.and v1299, v1300
      nextln:   jumpif v1231, addr_0_block_255, addr_0_block_256
      check: addr_0_block_255: // preds: addr_0_block_254
      nextln:   v1302 = bool.icmp.i8.eq v1260, 0x0
      nextln:   jump addr_0_block_257(0x1)
      check: addr_0_block_256: // preds: addr_0_block_254
      nextln:   jump addr_0_block_257(0x0)
      check: addr_0_block_257(v1303: bool): // preds: addr_0_block_255 addr_0_block_256
      nextln:   v1304 = bool.icmp.i8.eq v1260, 0x0
      nextln:   v1305 = bool.and v1232, v1304
      nextln:   jumpif v1305, addr_0_block_258, addr_0_block_259
      check: addr_0_block_258: // preds: addr_0_block_257
      nextln:   jump addr_0_block_260(0x0, 0x0)
      check: addr_0_block_259: // preds: addr_0_block_257
      nextln:   jump addr_0_block_260(0x0, 0x0)
      check: addr_0_block_260(v1306: bool, v1307: bool): // preds: addr_0_block_258 addr_0_block_259
      nextln:   v1308 = bool.or v1303, v1306
      nextln:   jumpif v1308, addr_0_block_261, addr_0_block_274
      check: addr_0_block_261: // preds: addr_0_block_260
      nextln:   v1309 = i52.unsigned_from_bits v1256
      nextln:   v1310 = int.modulo v1309, 0x8
      nextln:   v1311 = int.sub v1309, v1310
      nextln:   v1312 = i52.to_bits v1311
      nextln:   v1313 = bool.icmp.i52.eq v1256, v1312
      nextln:   v1314 = i64.load v1256
      nextln:   jumpif v1303, addr_0_block_262, addr_0_block_263
      nextln:   jump addr_0_block_275(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v1314, v1233, v1234, v1235, v1236, v1237, v1238, v1239, v1240, v1241, v1242, v1243, v1244, v1245, v1246, v1247, v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258, 0x0, 0x0)
      check: addr_0_block_262: // no preds!
      nextln:   jump addr_0_block_264
      check: addr_0_block_263: // no preds!
      nextln:   jump addr_0_block_264
      check: addr_0_block_264: // preds: addr_0_block_262 addr_0_block_263
      nextln:   jumpif v1306, addr_0_block_265, addr_0_block_266
      check: addr_0_block_265: // preds: addr_0_block_264
      nextln:   jump addr_0_block_267
      check: addr_0_block_266: // preds: addr_0_block_264
      nextln:   jump addr_0_block_267
      check: addr_0_block_267: // preds: addr_0_block_265 addr_0_block_266
      nextln:   v1565 = i52.unsigned_from_bits v1256
      nextln:   v1566 = int.modulo v1565, 0x8
      nextln:   v1567 = int.sub v1565, v1566
      nextln:   v1568 = i52.to_bits v1567
      nextln:   v1569 = bool.icmp.i52.eq v1256, v1568
      nextln:   v1570 = bool.icmp.i52.eq v1256, 0x13000000
      nextln:   jumpif v1570, addr_0_block_268, addr_0_block_272
      check: addr_0_block_268: // preds: addr_0_block_267
      nextln:   v1571 = i64.unsigned_from_bits v1314
      nextln:   v1572 = bool.icmp.int.eq v1571, 0x4
      nextln:   jumpif v1572, addr_0_block_269, addr_0_block_270
      nextln:   jump addr_0_block_273
      check: addr_0_block_269: // no preds!
      nextln:   jump addr_0_block_271
      check: addr_0_block_270: // no preds!
      nextln:   v1573 = i8.trunc.i64 v1314
      nextln:   v1574 = i8.unsigned_from_bits v1573
      nextln:   jump addr_0_block_271
      check: addr_0_block_271: // preds: addr_0_block_269 addr_0_block_270
      check: addr_0_block_272: // preds: addr_0_block_267
      nextln:   store.i64 v1314, v1256
      nextln:   jump addr_0_block_273
      check: addr_0_block_273: // preds: addr_0_block_268 addr_0_block_272
      check: addr_0_block_274: // preds: addr_0_block_260
      nextln:   jump addr_0_block_275(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_275(v1315: i8, v1316: i1, v1317: i16, v1318: i8, v1319: bool, v1320: bool, v1321: bool, v1322: int, v1323: i64, v1324: i8, v1325: i8, v1326: i52, v1327: i1, v1328: bool, v1329: bool, v1330: int, v1331: i1, v1332: bool, v1333: i4, v1334: i2, v1335: i4, v1336: i8, v1337: i8, v1338: i2, v1339: i2, v1340: bool, v1341: i2, v1342: i2, v1343: bool, v1344: bool, v1345: bool, v1346: bool, v1347: i52, v1348: i1, v1349: i64, v1350: i2, v1351: bool): // preds: addr_0_block_261 addr_0_block_274
      nextln:   v1352 = bool.icmp.i8.ne v1260, 0x0
      nextln:   v1353 = bool.bitwise_not v1352
      nextln:   v1354 = bool.and v1353, 0x1
      nextln:   v1355 = bool.icmp.i8.ne v1260, 0x0
      nextln:   v1356 = bool.bitwise_not v1355
      nextln:   v1357 = bool.and 0x1, v1356
      nextln:   jumpif v1357, addr_0_block_276, addr_0_block_277
      check: addr_0_block_276: // preds: addr_0_block_275
      nextln:   jump addr_0_block_278
      check: addr_0_block_277: // preds: addr_0_block_275
      nextln:   jump addr_0_block_278
      check: addr_0_block_278: // preds: addr_0_block_276 addr_0_block_277
      nextln:   v1358 = bool.icmp.i8.ne v1260, 0x0
      nextln:   jumpif v1358, addr_0_block_279, addr_0_block_280
      check: addr_0_block_279: // preds: addr_0_block_278
      nextln:   jump addr_0_block_281
      check: addr_0_block_280: // preds: addr_0_block_278
      nextln:   jump addr_0_block_281
      check: addr_0_block_281: // preds: addr_0_block_279 addr_0_block_280
      nextln:   v1359 = i52.unsigned_from_bits v1283
      nextln:   v1360 = int.modulo v1359, 0x1
      nextln:   v1361 = int.sub v1359, v1360
      nextln:   v1362 = i52.to_bits v1361
      nextln:   v1363 = bool.icmp.i52.eq v1283, v1362
      nextln:   v1364 = i8.load v1283
      nextln:   v1365 = i32.and v1210, 0xff00ffff
      nextln:   v1366 = i8.lshl v1364, 0x10
      nextln:   v1367 = i32.or v1365, v1366
      nextln:   v1368 = i64.wrapping_add v21, 0x3
      nextln:   v1369 = i64.unsigned_from_bits v1368
      nextln:   v1370 = int.modulo v1369, 0x1
      nextln:   v1371 = int.sub v1369, v1370
      nextln:   v1372 = i64.to_bits v1371
      nextln:   v1373 = bool.icmp.i64.eq v1368, v1372
      nextln:   v1374 = i64.lshr v1368, 0x30
      nextln:   v1375 = i16.trunc.i64 v1374
      nextln:   v1376 = bool.icmp.i16.eq v1375, 0x0
      nextln:   v1377 = bool.bitwise_not v1376
      nextln:   jumpif v1377, addr_0_block_282, addr_0_block_283
      check: addr_0_block_282: // preds: addr_0_block_281
      nextln:   jump addr_0_block_284(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_285(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_283: // preds: addr_0_block_281
      nextln:   jump addr_0_block_284(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_284(v1525: i52, v1526: int, v1527: bool, v1528: bool): // preds: addr_0_block_283
      nextln:   v1529 = i52.trunc.i64 v1368
      nextln:   jump addr_0_block_285(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1529, 0x1, 0x0)
      check: addr_0_block_285(v1378: i3, v1379: i1, v1380: i1, v1381: i1, v1382: i1, v1383: i4, v1384: i1, v1385: bool, v1386: int, v1387: int, v1388: bool, v1389: bool, v1390: i8, v1391: i8, v1392: i52, v1393: i1, v1394: bool, v1395: bool, v1396: int, v1397: i1, v1398: bool, v1399: i4, v1400: i2, v1401: i4, v1402: i8, v1403: i8, v1404: i2, v1405: i2, v1406: bool, v1407: i2, v1408: i2, v1409: bool, v1410: bool, v1411: bool, v1412: bool, v1413: i52, v1414: i1, v1415: i64, v1416: i1, v1417: i8, v1418: i8, v1419: i52, v1420: i1, v1421: bool, v1422: bool, v1423: int, v1424: i1, v1425: bool, v1426: i4, v1427: i2, v1428: i4, v1429: i8, v1430: i8, v1431: i2, v1432: i2, v1433: bool, v1434: i2, v1435: i2, v1436: bool, v1437: bool, v1438: bool, v1439: bool, v1440: i52, v1441: i1, v1442: i64): // preds: addr_0_block_282 addr_0_block_284
      nextln:   v1443 = bool.icmp.i8.ne v1417, 0x0
      nextln:   v1444 = bool.bitwise_not v1443
      nextln:   v1445 = bool.bitwise_not v26
      nextln:   v1446 = bool.and v1445, 0x1
      nextln:   v1447 = bool.or v1446, 0x0
      nextln:   v1448 = bool.icmp.i8.ne v1417, 0x0
      nextln:   v1449 = bool.bitwise_not v1448
      nextln:   v1450 = bool.and v1447, v1449
      nextln:   v1451 = bool.icmp.i8.eq v1429, 0x1
      nextln:   v1452 = bool.and v1450, v1451
      nextln:   jumpif v1452, addr_0_block_286, addr_0_block_287
      check: addr_0_block_286: // preds: addr_0_block_285
      nextln:   jump addr_0_block_288
      check: addr_0_block_287: // preds: addr_0_block_285
      nextln:   jump addr_0_block_288
      check: addr_0_block_288: // preds: addr_0_block_286 addr_0_block_287
      nextln:   v1453 = bool.icmp.i8.ne v1417, 0x0
      nextln:   v1454 = bool.bitwise_not v1453
      nextln:   v1455 = bool.icmp.i8.ne v1417, 0x0
      nextln:   v1456 = bool.bitwise_not v1455
      nextln:   v1457 = bool.icmp.i8.eq v1429, 0x1
      nextln:   v1458 = bool.and v1456, v1457
      nextln:   jumpif v1388, addr_0_block_289, addr_0_block_290
      check: addr_0_block_289: // preds: addr_0_block_288
      nextln:   v1459 = bool.icmp.i8.eq v1417, 0x0
      nextln:   jump addr_0_block_291(0x1)
      check: addr_0_block_290: // preds: addr_0_block_288
      nextln:   jump addr_0_block_291(0x0)
      check: addr_0_block_291(v1460: bool): // preds: addr_0_block_289 addr_0_block_290
      nextln:   v1461 = bool.icmp.i8.eq v1417, 0x0
      nextln:   v1462 = bool.and v1389, v1461
      nextln:   jumpif v1462, addr_0_block_292, addr_0_block_293
      check: addr_0_block_292: // preds: addr_0_block_291
      nextln:   jump addr_0_block_294(0x0, 0x0)
      check: addr_0_block_293: // preds: addr_0_block_291
      nextln:   jump addr_0_block_294(0x0, 0x0)
      check: addr_0_block_294(v1463: bool, v1464: bool): // preds: addr_0_block_292 addr_0_block_293
      nextln:   v1465 = bool.or v1460, v1463
      nextln:   jumpif v1465, addr_0_block_295, addr_0_block_308
      check: addr_0_block_295: // preds: addr_0_block_294
      nextln:   v1466 = i52.unsigned_from_bits v1413
      nextln:   v1467 = int.modulo v1466, 0x8
      nextln:   v1468 = int.sub v1466, v1467
      nextln:   v1469 = i52.to_bits v1468
      nextln:   v1470 = bool.icmp.i52.eq v1413, v1469
      nextln:   v1471 = i64.load v1413
      nextln:   jumpif v1460, addr_0_block_296, addr_0_block_297
      nextln:   jump addr_0_block_309(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v1471, v1390, v1391, v1392, v1393, v1394, v1395, v1396, v1397, v1398, v1399, v1400, v1401, v1402, v1403, v1404, v1405, v1406, v1407, v1408, v1409, v1410, v1411, v1412, v1413, v1414, v1415, 0x0, 0x0)
      check: addr_0_block_296: // no preds!
      nextln:   jump addr_0_block_298
      check: addr_0_block_297: // no preds!
      nextln:   jump addr_0_block_298
      check: addr_0_block_298: // preds: addr_0_block_296 addr_0_block_297
      nextln:   jumpif v1463, addr_0_block_299, addr_0_block_300
      check: addr_0_block_299: // preds: addr_0_block_298
      nextln:   jump addr_0_block_301
      check: addr_0_block_300: // preds: addr_0_block_298
      nextln:   jump addr_0_block_301
      check: addr_0_block_301: // preds: addr_0_block_299 addr_0_block_300
      nextln:   v1575 = i52.unsigned_from_bits v1413
      nextln:   v1576 = int.modulo v1575, 0x8
      nextln:   v1577 = int.sub v1575, v1576
      nextln:   v1578 = i52.to_bits v1577
      nextln:   v1579 = bool.icmp.i52.eq v1413, v1578
      nextln:   v1580 = bool.icmp.i52.eq v1413, 0x13000000
      nextln:   jumpif v1580, addr_0_block_302, addr_0_block_306
      check: addr_0_block_302: // preds: addr_0_block_301
      nextln:   v1581 = i64.unsigned_from_bits v1471
      nextln:   v1582 = bool.icmp.int.eq v1581, 0x4
      nextln:   jumpif v1582, addr_0_block_303, addr_0_block_304
      nextln:   jump addr_0_block_307
      check: addr_0_block_303: // no preds!
      nextln:   jump addr_0_block_305
      check: addr_0_block_304: // no preds!
      nextln:   v1583 = i8.trunc.i64 v1471
      nextln:   v1584 = i8.unsigned_from_bits v1583
      nextln:   jump addr_0_block_305
      check: addr_0_block_305: // preds: addr_0_block_303 addr_0_block_304
      check: addr_0_block_306: // preds: addr_0_block_301
      nextln:   store.i64 v1471, v1413
      nextln:   jump addr_0_block_307
      check: addr_0_block_307: // preds: addr_0_block_302 addr_0_block_306
      check: addr_0_block_308: // preds: addr_0_block_294
      nextln:   jump addr_0_block_309(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_309(v1472: i8, v1473: i1, v1474: i16, v1475: i8, v1476: bool, v1477: bool, v1478: bool, v1479: int, v1480: i64, v1481: i8, v1482: i8, v1483: i52, v1484: i1, v1485: bool, v1486: bool, v1487: int, v1488: i1, v1489: bool, v1490: i4, v1491: i2, v1492: i4, v1493: i8, v1494: i8, v1495: i2, v1496: i2, v1497: bool, v1498: i2, v1499: i2, v1500: bool, v1501: bool, v1502: bool, v1503: bool, v1504: i52, v1505: i1, v1506: i64, v1507: i2, v1508: bool): // preds: addr_0_block_295 addr_0_block_308
      nextln:   v1509 = bool.icmp.i8.ne v1417, 0x0
      nextln:   v1510 = bool.bitwise_not v1509
      nextln:   v1511 = bool.and v1510, 0x1
      nextln:   v1512 = bool.icmp.i8.ne v1417, 0x0
      nextln:   v1513 = bool.bitwise_not v1512
      nextln:   v1514 = bool.and 0x1, v1513
      nextln:   jumpif v1514, addr_0_block_310, addr_0_block_311
      check: addr_0_block_310: // preds: addr_0_block_309
      nextln:   jump addr_0_block_312
      check: addr_0_block_311: // preds: addr_0_block_309
      nextln:   jump addr_0_block_312
      check: addr_0_block_312: // preds: addr_0_block_310 addr_0_block_311
      nextln:   v1515 = bool.icmp.i8.ne v1417, 0x0
      nextln:   jumpif v1515, addr_0_block_313, addr_0_block_314
      check: addr_0_block_313: // preds: addr_0_block_312
      nextln:   jump addr_0_block_315
      check: addr_0_block_314: // preds: addr_0_block_312
      nextln:   jump addr_0_block_315
      check: addr_0_block_315: // preds: addr_0_block_313 addr_0_block_314
      nextln:   v1516 = i52.unsigned_from_bits v1440
      nextln:   v1517 = int.modulo v1516, 0x1
      nextln:   v1518 = int.sub v1516, v1517
      nextln:   v1519 = i52.to_bits v1518
      nextln:   v1520 = bool.icmp.i52.eq v1440, v1519
      nextln:   v1521 = i8.load v1440
      nextln:   v1522 = i32.and v1367, 0xffffff
      nextln:   v1523 = i8.lshl v1521, 0x18
      nextln:   v1524 = i32.or v1522, v1523
      check: addr_0_block_316: // preds: addr_0_block_175
      nextln:   v50 = i64.unsigned_from_bits v21
      nextln:   v51 = int.modulo v50, 0x4
      nextln:   v52 = int.sub v50, v51
      nextln:   v53 = i64.to_bits v52
      nextln:   v54 = bool.icmp.i64.eq v21, v53
      nextln:   v55 = i64.lshr v21, 0x30
      nextln:   v56 = i16.trunc.i64 v55
      nextln:   v57 = bool.icmp.i16.eq v56, 0x0
      nextln:   v58 = bool.bitwise_not v57
      nextln:   jumpif v58, addr_0_block_317, addr_0_block_318
      nextln:   jump addr_0_block_351(v26, 0x0, v1728)
      check: addr_0_block_317: // no preds!
      nextln:   jump addr_0_block_319(0x0, 0x0, 0x0, 0x0)
      nextln:   jump addr_0_block_320(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_318: // no preds!
      nextln:   jump addr_0_block_319(0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_319(v1729: i52, v1730: int, v1731: bool, v1732: bool): // preds: addr_0_block_318
      nextln:   v1733 = i52.trunc.i64 v21
      nextln:   jump addr_0_block_320(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, v1733, 0x1, 0x0)
      check: addr_0_block_320(v1585: i3, v1586: i1, v1587: i1, v1588: i1, v1589: i1, v1590: i4, v1591: i1, v1592: bool, v1593: int, v1594: int, v1595: bool, v1596: bool, v1597: i8, v1598: i8, v1599: i52, v1600: i1, v1601: bool, v1602: bool, v1603: int, v1604: i1, v1605: bool, v1606: i4, v1607: i2, v1608: i4, v1609: i8, v1610: i8, v1611: i2, v1612: i2, v1613: bool, v1614: i2, v1615: i2, v1616: bool, v1617: bool, v1618: bool, v1619: bool, v1620: i52, v1621: i1, v1622: i64, v1623: i1, v1624: i8, v1625: i8, v1626: i52, v1627: i1, v1628: bool, v1629: bool, v1630: int, v1631: i1, v1632: bool, v1633: i4, v1634: i2, v1635: i4, v1636: i8, v1637: i8, v1638: i2, v1639: i2, v1640: bool, v1641: i2, v1642: i2, v1643: bool, v1644: bool, v1645: bool, v1646: bool, v1647: i52, v1648: i1, v1649: i64): // preds: addr_0_block_317 addr_0_block_319
      nextln:   v1650 = bool.icmp.i8.ne v1624, 0x0
      nextln:   v1651 = bool.bitwise_not v1650
      nextln:   v1652 = bool.bitwise_not v26
      nextln:   v1653 = bool.and v1652, 0x1
      nextln:   v1654 = bool.or v1653, 0x0
      nextln:   v1655 = bool.icmp.i8.ne v1624, 0x0
      nextln:   v1656 = bool.bitwise_not v1655
      nextln:   v1657 = bool.and v1654, v1656
      nextln:   v1658 = bool.icmp.i8.eq v1636, 0x1
      nextln:   v1659 = bool.and v1657, v1658
      nextln:   jumpif v1659, addr_0_block_321, addr_0_block_322
      check: addr_0_block_321: // preds: addr_0_block_320
      nextln:   jump addr_0_block_323
      check: addr_0_block_322: // preds: addr_0_block_320
      nextln:   jump addr_0_block_323
      check: addr_0_block_323: // preds: addr_0_block_321 addr_0_block_322
      nextln:   v1660 = bool.icmp.i8.ne v1624, 0x0
      nextln:   v1661 = bool.bitwise_not v1660
      nextln:   v1662 = bool.icmp.i8.ne v1624, 0x0
      nextln:   v1663 = bool.bitwise_not v1662
      nextln:   v1664 = bool.icmp.i8.eq v1636, 0x1
      nextln:   v1665 = bool.and v1663, v1664
      nextln:   jumpif v1595, addr_0_block_324, addr_0_block_325
      check: addr_0_block_324: // preds: addr_0_block_323
      nextln:   v1666 = bool.icmp.i8.eq v1624, 0x0
      nextln:   jump addr_0_block_326(0x1)
      check: addr_0_block_325: // preds: addr_0_block_323
      nextln:   jump addr_0_block_326(0x0)
      check: addr_0_block_326(v1667: bool): // preds: addr_0_block_324 addr_0_block_325
      nextln:   v1668 = bool.icmp.i8.eq v1624, 0x0
      nextln:   v1669 = bool.and v1596, v1668
      nextln:   jumpif v1669, addr_0_block_327, addr_0_block_328
      check: addr_0_block_327: // preds: addr_0_block_326
      nextln:   jump addr_0_block_329(0x0, 0x0)
      check: addr_0_block_328: // preds: addr_0_block_326
      nextln:   jump addr_0_block_329(0x0, 0x0)
      check: addr_0_block_329(v1670: bool, v1671: bool): // preds: addr_0_block_327 addr_0_block_328
      nextln:   v1672 = bool.or v1667, v1670
      nextln:   jumpif v1672, addr_0_block_330, addr_0_block_343
      check: addr_0_block_330: // preds: addr_0_block_329
      nextln:   v1673 = i52.unsigned_from_bits v1620
      nextln:   v1674 = int.modulo v1673, 0x8
      nextln:   v1675 = int.sub v1673, v1674
      nextln:   v1676 = i52.to_bits v1675
      nextln:   v1677 = bool.icmp.i52.eq v1620, v1676
      nextln:   v1678 = i64.load v1620
      nextln:   jumpif v1667, addr_0_block_331, addr_0_block_332
      nextln:   jump addr_0_block_344(0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, v1678, v1597, v1598, v1599, v1600, v1601, v1602, v1603, v1604, v1605, v1606, v1607, v1608, v1609, v1610, v1611, v1612, v1613, v1614, v1615, v1616, v1617, v1618, v1619, v1620, v1621, v1622, 0x0, 0x0)
      check: addr_0_block_331: // no preds!
      nextln:   jump addr_0_block_333
      check: addr_0_block_332: // no preds!
      nextln:   jump addr_0_block_333
      check: addr_0_block_333: // preds: addr_0_block_331 addr_0_block_332
      nextln:   jumpif v1670, addr_0_block_334, addr_0_block_335
      check: addr_0_block_334: // preds: addr_0_block_333
      nextln:   jump addr_0_block_336
      check: addr_0_block_335: // preds: addr_0_block_333
      nextln:   jump addr_0_block_336
      check: addr_0_block_336: // preds: addr_0_block_334 addr_0_block_335
      nextln:   v1734 = i52.unsigned_from_bits v1620
      nextln:   v1735 = int.modulo v1734, 0x8
      nextln:   v1736 = int.sub v1734, v1735
      nextln:   v1737 = i52.to_bits v1736
      nextln:   v1738 = bool.icmp.i52.eq v1620, v1737
      nextln:   v1739 = bool.icmp.i52.eq v1620, 0x13000000
      nextln:   jumpif v1739, addr_0_block_337, addr_0_block_341
      check: addr_0_block_337: // preds: addr_0_block_336
      nextln:   v1740 = i64.unsigned_from_bits v1678
      nextln:   v1741 = bool.icmp.int.eq v1740, 0x4
      nextln:   jumpif v1741, addr_0_block_338, addr_0_block_339
      nextln:   jump addr_0_block_342
      check: addr_0_block_338: // no preds!
      nextln:   jump addr_0_block_340
      check: addr_0_block_339: // no preds!
      nextln:   v1742 = i8.trunc.i64 v1678
      nextln:   v1743 = i8.unsigned_from_bits v1742
      nextln:   jump addr_0_block_340
      check: addr_0_block_340: // preds: addr_0_block_338 addr_0_block_339
      check: addr_0_block_341: // preds: addr_0_block_336
      nextln:   store.i64 v1678, v1620
      nextln:   jump addr_0_block_342
      check: addr_0_block_342: // preds: addr_0_block_337 addr_0_block_341
      check: addr_0_block_343: // preds: addr_0_block_329
      nextln:   jump addr_0_block_344(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
      check: addr_0_block_344(v1679: i8, v1680: i1, v1681: i16, v1682: i8, v1683: bool, v1684: bool, v1685: bool, v1686: int, v1687: i64, v1688: i8, v1689: i8, v1690: i52, v1691: i1, v1692: bool, v1693: bool, v1694: int, v1695: i1, v1696: bool, v1697: i4, v1698: i2, v1699: i4, v1700: i8, v1701: i8, v1702: i2, v1703: i2, v1704: bool, v1705: i2, v1706: i2, v1707: bool, v1708: bool, v1709: bool, v1710: bool, v1711: i52, v1712: i1, v1713: i64, v1714: i2, v1715: bool): // preds: addr_0_block_330 addr_0_block_343
      nextln:   v1716 = bool.icmp.i8.ne v1624, 0x0
      nextln:   v1717 = bool.bitwise_not v1716
      nextln:   v1718 = bool.and v1717, 0x1
      nextln:   v1719 = bool.icmp.i8.ne v1624, 0x0
      nextln:   v1720 = bool.bitwise_not v1719
      nextln:   v1721 = bool.and 0x1, v1720
      nextln:   jumpif v1721, addr_0_block_345, addr_0_block_346
      check: addr_0_block_345: // preds: addr_0_block_344
      nextln:   jump addr_0_block_347
      check: addr_0_block_346: // preds: addr_0_block_344
      nextln:   jump addr_0_block_347
      check: addr_0_block_347: // preds: addr_0_block_345 addr_0_block_346
      nextln:   v1722 = bool.icmp.i8.ne v1624, 0x0
      nextln:   jumpif v1722, addr_0_block_348, addr_0_block_349
      check: addr_0_block_348: // preds: addr_0_block_347
      nextln:   jump addr_0_block_350
      check: addr_0_block_349: // preds: addr_0_block_347
      nextln:   jump addr_0_block_350
      check: addr_0_block_350: // preds: addr_0_block_348 addr_0_block_349
      nextln:   v1723 = i52.unsigned_from_bits v1647
      nextln:   v1724 = int.modulo v1723, 0x4
      nextln:   v1725 = int.sub v1723, v1724
      nextln:   v1726 = i52.to_bits v1725
      nextln:   v1727 = bool.icmp.i52.eq v1647, v1726
      nextln:   v1728 = i32.load v1647
      check: addr_0_block_351(v38: i64, v39: i8, v40: i32): // preds: addr_0_block_176 addr_0_block_316
      nextln:   v41 = i64.zext.i32 0x0
      nextln:   v42 = i64.lshl v41, 0x20
      nextln:   v43 = i64.zext.i32 v20
      nextln:   v44 = i64.or v42, v43
      nextln:   write_reg.i64 v44, "x1"
      nextln:   v45 = i64.zext.i32 0x0
      nextln:   v46 = i64.lshl v45, 0x20
      nextln:   v47 = i64.zext.i32 v40
      nextln:   v48 = i64.or v46, v47
      nextln:   write_reg.i64 v48, "x2"
      nextln:   v49 = i64.wrapping_add v0, 0x10
      nextln:   write_reg.i64 v49, "x4"
